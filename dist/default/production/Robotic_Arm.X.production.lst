

Microchip Technology PIC18 LITE Macro Assembler V1.45 build -152302408 
                                                                                               Wed Jun 12 10:43:40 2019

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	18F47K42
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     7                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     8                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     9                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    10                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    11                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    15                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1,group=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1,group=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1,group=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1,group=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1,group=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1,group=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1,group=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1,group=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1,group=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1,group=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1,group=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1,group=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=4,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=4,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	text58,global,reloc=4,class=CODE,delta=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1
    78                           	psect	text61,global,reloc=4,class=CODE,delta=1
    79                           	psect	text62,global,reloc=2,class=CODE,delta=1
    80                           	psect	text63,global,reloc=2,class=CODE,delta=1
    81                           	psect	text64,global,reloc=4,class=CODE,delta=1
    82                           	psect	text65,global,reloc=2,class=CODE,delta=1
    83                           	psect	text66,global,reloc=2,class=CODE,delta=1
    84                           	psect	text67,global,reloc=4,class=CODE,delta=1
    85                           	psect	text68,global,reloc=2,class=CODE,delta=1
    86                           	psect	text69,global,reloc=2,class=CODE,delta=1
    87                           	psect	text70,global,reloc=4,class=CODE,delta=1
    88                           	psect	text71,global,reloc=4,class=CODE,delta=1
    89                           	psect	text72,global,reloc=2,class=CODE,delta=1
    90                           	psect	text73,global,reloc=2,class=CODE,delta=1
    91                           	psect	text74,global,reloc=2,class=CODE,delta=1
    92                           	psect	ivt0x8,global,reloc=2,class=CODE,delta=1,noexec,keep,optim=
    93                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    94                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    95  0000                     
    96                           ; Version 1.45
    97                           ; Generated 16/11/2017 GMT
    98                           ; 
    99                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
   100                           ; All rights reserved.
   101                           ; 
   102                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   103                           ; 
   104                           ; Redistribution and use in source and binary forms, with or without modification, are
   105                           ; permitted provided that the following conditions are met:
   106                           ; 
   107                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   108                           ;        conditions and the following disclaimer.
   109                           ; 
   110                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   111                           ;        of conditions and the following disclaimer in the documentation and/or other
   112                           ;        materials provided with the distribution.
   113                           ; 
   114                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   115                           ;        software without specific prior written permission.
   116                           ; 
   117                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   118                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   119                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   120                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   121                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   122                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   123                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   124                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   125                           ; 
   126                           ; 
   127                           ; Code-generator required, PIC18F47K42 Definitions
   128                           ; 
   129                           ; SFR Addresses
   130  0000                     
   131                           	psect	idataBANK0
   132  006B50                     __pidataBANK0:
   133                           	opt stack 0
   134                           
   135                           ;initializer for _copia_buf_1
   136  006B50  00FF               	dw	255
   137                           
   138                           ;initializer for _copia_buf_0
   139  006B52  00FF               	dw	255
   140                           
   141                           ;initializer for _RX_PORTB
   142  006B54  FF                 	db	255
   143                           
   144                           ;initializer for _RX_PORTA
   145  006B55  FF                 	db	255
   146                           
   147                           	psect	idataBANK1
   148  006764                     __pidataBANK1:
   149                           	opt stack 0
   150                           
   151                           ;initializer for _GM_phases
   152  006764  40                 	db	64
   153  006765  60                 	db	96
   154  006766  20                 	db	32
   155  006767  A0                 	db	160
   156  006768  80                 	db	128
   157  006769  90                 	db	144
   158  00676A  10                 	db	16
   159  00676B  50                 	db	80
   160                           
   161                           ;initializer for _EM_phases
   162  00676C  04                 	db	4
   163  00676D  05                 	db	5
   164  00676E  01                 	db	1
   165  00676F  09                 	db	9
   166  006770  08                 	db	8
   167  006771  0A                 	db	10
   168  006772  02                 	db	2
   169  006773  06                 	db	6
   170                           
   171                           ;initializer for _SM_phases
   172  006774  01                 	db	1
   173  006775  05                 	db	5
   174  006776  04                 	db	4
   175  006777  06                 	db	6
   176  006778  02                 	db	2
   177  006779  0A                 	db	10
   178  00677A  08                 	db	8
   179  00677B  09                 	db	9
   180                           
   181                           ;initializer for _BM_phases
   182  00677C  08                 	db	8
   183  00677D  09                 	db	9
   184  00677E  01                 	db	1
   185  00677F  05                 	db	5
   186  006780  04                 	db	4
   187  006781  06                 	db	6
   188  006782  02                 	db	2
   189  006783  0A                 	db	10
   190                           
   191                           ;initializer for _RWM_phases
   192  006784  20                 	db	32
   193  006785  A0                 	db	160
   194  006786  80                 	db	128
   195  006787  90                 	db	144
   196  006788  10                 	db	16
   197  006789  50                 	db	80
   198  00678A  40                 	db	64
   199  00678B  60                 	db	96
   200                           
   201                           ;initializer for _LWM_phases
   202  00678C  10                 	db	16
   203  00678D  50                 	db	80
   204  00678E  40                 	db	64
   205  00678F  60                 	db	96
   206  006790  20                 	db	32
   207  006791  A0                 	db	160
   208  006792  80                 	db	128
   209  006793  90                 	db	144
   210                           
   211                           	psect	smallconst
   212  002000                     __psmallconst:
   213                           	opt stack 0
   214  002000  00                 	db	0
   215  002001                     _Bank1_Reg0_13:
   216                           	opt stack 0
   217  002001  4B40               	dw	19264
   218  002003  E201               	dw	57857
   219  002005  4BC0               	dw	19392
   220  002007  0000               	dw	0
   221  002009  FCD0               	dw	64720
   222  00200B  028C               	dw	652
   223  00200D  0099               	dw	153
   224  00200F  4139               	dw	16697
   225  002011  9EF9               	dw	40697
   226  002013  0B86               	dw	2950
   227  002015  0624               	dw	1572
   228  002017  A67F               	dw	42623
   229  002019  0000               	dw	0
   230  00201B  0000               	dw	0
   231  00201D  0000               	dw	0
   232  00201F  0000               	dw	0
   233  002021  0000               	dw	0
   234  002023  0000               	dw	0
   235  002025  0000               	dw	0
   236  002027  0000               	dw	0
   237  002029  0000               	dw	0
   238  00202B  0000               	dw	0
   239  00202D  0000               	dw	0
   240  00202F  0000               	dw	0
   241  002031  7300               	dw	29440
   242  002033  0012               	dw	18
   243  002035  8000               	dw	32768
   244  002037  36B4               	dw	14004
   245  002039                     __end_of_Bank1_Reg0_13:
   246                           	opt stack 0
   247  002039                     _Bank0_Reg:
   248                           	opt stack 0
   249  002039  00                 	db	0
   250  00203A  3B                 	db	59
   251  00203B  01                 	db	1
   252  00203C  00                 	db	0
   253  00203D  02                 	db	2
   254  00203E  3F                 	db	63
   255  00203F  03                 	db	3
   256  002040  01                 	db	1
   257  002041  04                 	db	4
   258  002042  FF                 	db	255
   259  002043  05                 	db	5
   260  002044  17                 	db	23
   261  002045  06                 	db	6
   262  002046  11                 	db	17
   263  002047  07                 	db	7
   264  002048  07                 	db	7
   265  002049  08                 	db	8
   266  00204A  00                 	db	0
   267  00204B  09                 	db	9
   268  00204C  00                 	db	0
   269  00204D  0C                 	db	12
   270  00204E  C3                 	db	195
   271  00204F  0D                 	db	13
   272  002050  C4                 	db	196
   273  002051  0E                 	db	14
   274  002052  C5                 	db	197
   275  002053  0F                 	db	15
   276  002054  C6                 	db	198
   277  002055  11                 	db	17
   278  002056  02                 	db	2
   279  002057  12                 	db	18
   280  002058  02                 	db	2
   281  002059  13                 	db	19
   282  00205A  02                 	db	2
   283  00205B  14                 	db	20
   284  00205C  02                 	db	2
   285  00205D  15                 	db	21
   286  00205E  02                 	db	2
   287  00205F  16                 	db	22
   288  002060  02                 	db	2
   289  002061  17                 	db	23
   290  002062  00                 	db	0
   291  002063  1C                 	db	28
   292  002064  00                 	db	0
   293  002065  1D                 	db	29
   294  002066  00                 	db	0
   295  002067                     __end_of_Bank0_Reg:
   296                           	opt stack 0
   297  002067                     _Bank1_Reg14:
   298                           	opt stack 0
   299  002067  41                 	db	65
   300  002068  20                 	db	32
   301  002069  08                 	db	8
   302  00206A  04                 	db	4
   303  00206B  81                 	db	129
   304  00206C  20                 	db	32
   305  00206D  CF                 	db	207
   306  00206E  F7                 	db	247
   307  00206F  FE                 	db	254
   308  002070  FF                 	db	255
   309  002071  FF                 	db	255
   310  002072                     __end_of_Bank1_Reg14:
   311                           	opt stack 0
   312  002072                     _RX1_Address:
   313                           	opt stack 0
   314  002072  39                 	db	57
   315  002073  38                 	db	56
   316  002074  37                 	db	55
   317  002075                     __end_of_RX1_Address:
   318                           	opt stack 0
   319  002075                     _RX0_Address:
   320                           	opt stack 0
   321  002075  34                 	db	52
   322  002076  43                 	db	67
   323  002077  10                 	db	16
   324  002078                     __end_of_RX0_Address:
   325                           	opt stack 0
   326  002078                     atan@coeff_a:
   327                           	opt stack 0
   328  002078  3C06               	dw	15366
   329  00207A  4204               	dw	16900
   330  00207C  9F7D               	dw	40829
   331  00207E  426A               	dw	17002
   332  002080  905C               	dw	36956
   333  002082  4201               	dw	16897
   334  002084  4D60               	dw	19808
   335  002086  40BB               	dw	16571
   336  002088  EC51               	dw	60497
   337  00208A  3E47               	dw	15943
   338  00208C  8DDE               	dw	36318
   339  00208E  BB1F               	dw	47903
   340  002090                     __end_ofatan@coeff_a:
   341                           	opt stack 0
   342  002090                     sin@coeff_a:
   343                           	opt stack 0
   344  002090  F3EC               	dw	62444
   345  002092  484A               	dw	18506
   346  002094  9535               	dw	38197
   347  002096  C795               	dw	51093
   348  002098  C117               	dw	49431
   349  00209A  45DC               	dw	17884
   350  00209C  DBFD               	dw	56317
   351  00209E  C36D               	dw	50029
   352  0020A0  B372               	dw	45938
   353  0020A2  4033               	dw	16435
   354  0020A4                     __end_ofsin@coeff_a:
   355                           	opt stack 0
   356  0020A4                     atan@coeff_b:
   357                           	opt stack 0
   358  0020A4  3C06               	dw	15366
   359  0020A6  4204               	dw	16900
   360  0020A8  59C0               	dw	22976
   361  0020AA  428B               	dw	17035
   362  0020AC  0474               	dw	1140
   363  0020AE  4244               	dw	16964
   364  0020B0  9BF9               	dw	39929
   365  0020B2  414F               	dw	16719
   366  0020B4  0000               	dw	0
   367  0020B6  3F80               	dw	16256
   368  0020B8                     __end_ofatan@coeff_b:
   369                           	opt stack 0
   370  0020B8                     sin@coeff_b:
   371                           	opt stack 0
   372  0020B8  342B               	dw	13355
   373  0020BA  4801               	dw	18433
   374  0020BC  9D7F               	dw	40319
   375  0020BE  45B0               	dw	17840
   376  0020C0  FFE7               	dw	65511
   377  0020C2  42D9               	dw	17113
   378  0020C4  0000               	dw	0
   379  0020C6  3F80               	dw	16256
   380  0020C8                     __end_ofsin@coeff_b:
   381                           	opt stack 0
   382  0000                     _IVTADL	set	14493
   383  0000                     _IVTADH	set	14494
   384  0000                     _IVTADU	set	14495
   385  0000                     _PIR2bits	set	14754
   386  0000                     _PIE1bits	set	14737
   387  0000                     _PIR1bits	set	14753
   388  0000                     _PIE6bits	set	14742
   389  0000                     _PIR6bits	set	14758
   390  0000                     _PIE8bits	set	14744
   391  0000                     _PIR8bits	set	14760
   392  0000                     _PIE9bits	set	14745
   393  0000                     _PIR9bits	set	14761
   394  0000                     _PIE7bits	set	14743
   395  0000                     _PIR7bits	set	14759
   396  0000                     _PIE4bits	set	14740
   397  0000                     _PIR4bits	set	14756
   398  0000                     _IPR4bits	set	14724
   399  0000                     _IPR6bits	set	14726
   400  0000                     _IPR7bits	set	14727
   401  0000                     _IPR8bits	set	14728
   402  0000                     _IPR9bits	set	14729
   403  0000                     _IPR1bits	set	14721
   404  0000                     _PMD7	set	14791
   405  0000                     _PMD6	set	14790
   406  0000                     _PMD5	set	14789
   407  0000                     _PMD4	set	14788
   408  0000                     _PMD3	set	14787
   409  0000                     _PMD2	set	14786
   410  0000                     _PMD1	set	14785
   411  0000                     _PMD0	set	14784
   412  0000                     _OSCTUNE	set	14814
   413  0000                     _OSCFRQ	set	14815
   414  0000                     _OSCEN	set	14813
   415  0000                     _OSCCON3	set	14811
   416  0000                     _OSCCON1	set	14809
   417  0000                     _TMR3IF	set	118070
   418  0000                     _TMR5IF	set	118086
   419  0000                     _TMR6IF	set	118088
   420  0000                     _TMR4IF	set	118072
   421  0000                     _TMR2IF	set	118050
   422  0000                     _TMR1IF	set	118048
   423  0000                     _SPI1SDIPPS	set	15071
   424  0000                     _RB4PPS	set	14860
   425  0000                     _INT0PPS	set	15040
   426  0000                     _RB1PPS	set	14857
   427  0000                     _SPI1SCKPPS	set	15070
   428  0000                     _INLVLB	set	14932
   429  0000                     _SLRCONE	set	14979
   430  0000                     _SLRCOND	set	14963
   431  0000                     _SLRCONC	set	14947
   432  0000                     _SLRCONB	set	14931
   433  0000                     _SLRCONA	set	14915
   434  0000                     _ODCOND	set	14962
   435  0000                     _ODCONC	set	14946
   436  0000                     _ODCONB	set	14930
   437  0000                     _ODCONA	set	14914
   438  0000                     _ODCONE	set	14978
   439  0000                     _RD1I2C	set	14971
   440  0000                     _RD0I2C	set	14970
   441  0000                     _RC4I2C	set	14955
   442  0000                     _RC3I2C	set	14954
   443  0000                     _RB2I2C	set	14939
   444  0000                     _RB1I2C	set	14938
   445  0000                     _WPUC	set	14945
   446  0000                     _WPUA	set	14913
   447  0000                     _WPUB	set	14929
   448  0000                     _WPUE	set	14977
   449  0000                     _WPUD	set	14961
   450  0000                     _ANSELA	set	14912
   451  0000                     _ANSELE	set	14976
   452  0000                     _ANSELB	set	14928
   453  0000                     _ANSELC	set	14944
   454  0000                     _ANSELD	set	14960
   455  0000                     _SPI1RXB	set	15632
   456  0000                     _SPI1TXB	set	15633
   457  0000                     _SPI1CON0	set	15636
   458  0000                     _SPI1CLK	set	15644
   459  0000                     _SPI1BAUD	set	15641
   460  0000                     _SPI1CON2	set	15638
   461  0000                     _SPI1CON1	set	15637
   462  0000                     _T6CONbits	set	16276
   463  0000                     _T4CONbits	set	16288
   464  0000                     _T2CONbits	set	16300
   465  0000                     _T5CONbits	set	16282
   466  0000                     _PORTEbits	set	16334
   467  0000                     _T3CONbits	set	16294
   468  0000                     _T1CONbits	set	16306
   469  0000                     _T3CON	set	16294
   470  0000                     _TMR3L	set	16292
   471  0000                     _TMR3H	set	16293
   472  0000                     _T3CLK	set	16297
   473  0000                     _T3GATE	set	16296
   474  0000                     _T3GCON	set	16295
   475  0000                     _T5CON	set	16282
   476  0000                     _TMR5L	set	16280
   477  0000                     _TMR5H	set	16281
   478  0000                     _T5CLK	set	16285
   479  0000                     _T5GATE	set	16284
   480  0000                     _T5GCON	set	16283
   481  0000                     _T6CON	set	16276
   482  0000                     _T6TMR	set	16274
   483  0000                     _T6PR	set	16275
   484  0000                     _T6RST	set	16279
   485  0000                     _T6HLT	set	16277
   486  0000                     _T6CLKCON	set	16278
   487  0000                     _T4CON	set	16288
   488  0000                     _T4TMR	set	16286
   489  0000                     _T4PR	set	16287
   490  0000                     _T4RST	set	16291
   491  0000                     _T4HLT	set	16289
   492  0000                     _T4CLKCON	set	16290
   493  0000                     _T2CON	set	16300
   494  0000                     _T2TMR	set	16298
   495  0000                     _T2PR	set	16299
   496  0000                     _T2RST	set	16303
   497  0000                     _T2HLT	set	16301
   498  0000                     _T2CLKCON	set	16302
   499  0000                     _T1CON	set	16306
   500  0000                     _TMR1L	set	16304
   501  0000                     _TMR1H	set	16305
   502  0000                     _T1CLK	set	16309
   503  0000                     _T1GATE	set	16308
   504  0000                     _T1GCON	set	16307
   505  0000                     _IVTLOCKbits	set	16340
   506  0000                     _IVTLOCK	set	16340
   507  0000                     _INTCON0bits	set	16338
   508  0000                     _TRISD	set	16325
   509  0000                     _TRISC	set	16324
   510  0000                     _TRISB	set	16323
   511  0000                     _TRISA	set	16322
   512  0000                     _TRISE	set	16326
   513  0000                     _LATC	set	16316
   514  0000                     _LATB	set	16315
   515  0000                     _LATA	set	16314
   516  0000                     _LATD	set	16317
   517  0000                     _LATE	set	16318
   518  0000                     _GIEL	set	130710
   519  0000                     _GIEH	set	130711
   520  0000                     _LATA4	set	130516
   521  0000                     _LATA7	set	130519
   522  0000                     _LATA5	set	130517
   523  0000                     _LATA6	set	130518
   524  0000                     _LATA1	set	130513
   525  0000                     _LATA3	set	130515
   526  0000                     _LATA0	set	130512
   527  0000                     _LATA2	set	130514
   528  0000                     _LATC3	set	130531
   529  0000                     _LATC1	set	130529
   530  0000                     _LATC2	set	130530
   531  0000                     _LATC0	set	130528
   532  0000                     _LATD1	set	130537
   533  0000                     _LATD2	set	130538
   534  0000                     _LATD0	set	130536
   535  0000                     _LATD3	set	130539
   536  0000                     _LATD6	set	130542
   537  0000                     _LATD7	set	130543
   538  0000                     _LATD4	set	130540
   539  0000                     _LATD5	set	130541
   540  0000                     _LATC7	set	130535
   541  0000                     _LATC6	set	130534
   542  0000                     _LATC5	set	130533
   543  0000                     _LATC4	set	130532
   544  0000                     _RB2	set	130650
   545  0000                     _RB3	set	130651
   546  0000                     _GIE	set	130711
   547                           
   548                           ; #config settings
   549  0020C8  00                 	db	0	; dummy byte at the end
   550  0000                     
   551                           	psect	cinit
   552  00623A                     __pcinit:
   553                           	opt stack 0
   554  00623A                     start_initialization:
   555                           	opt stack 0
   556  00623A                     __initialization:
   557                           	opt stack 0
   558                           
   559                           ; Initialize objects allocated to BANK1 (48 bytes)
   560                           ; load TBLPTR registers with __pidataBANK1
   561  00623A  0E64               	movlw	low __pidataBANK1
   562  00623C  6EF6               	movwf	16374,c
   563  00623E  0E67               	movlw	high __pidataBANK1
   564  006240  6EF7               	movwf	16375,c
   565  006242  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   566  006244  6EF8               	movwf	16376,c
   567  006246  EE00  F100         	lfsr	0,__pdataBANK1
   568  00624A  EE10 F030          	lfsr	1,48
   569  00624E                     copy_data0:
   570  00624E  0009               	tblrd		*+
   571  006250  006F FFD7 FFEE     	movff	16373,16366
   572  006256  50E5               	movf	16357,w,c
   573  006258  50E1               	movf	16353,w,c
   574  00625A  E1F9               	bnz	copy_data0
   575                           
   576                           ; Initialize objects allocated to BANK0 (6 bytes)
   577                           ; load TBLPTR registers with __pidataBANK0
   578  00625C  0E50               	movlw	low __pidataBANK0
   579  00625E  6EF6               	movwf	16374,c
   580  006260  0E6B               	movlw	high __pidataBANK0
   581  006262  6EF7               	movwf	16375,c
   582  006264  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   583  006266  6EF8               	movwf	16376,c
   584  006268  EE00  F0F9         	lfsr	0,__pdataBANK0
   585  00626C  EE10 F006          	lfsr	1,6
   586  006270                     copy_data1:
   587  006270  0009               	tblrd		*+
   588  006272  006F FFD7 FFEE     	movff	16373,16366
   589  006278  50E5               	movf	16357,w,c
   590  00627A  50E1               	movf	16353,w,c
   591  00627C  E1F9               	bnz	copy_data1
   592                           
   593                           ; Clear objects allocated to BANK1 (46 bytes)
   594  00627E  EE00  F130         	lfsr	0,__pbssBANK1
   595  006282  0E2E               	movlw	46
   596  006284                     clear_0:
   597  006284  6AEE               	clrf	16366,c
   598  006286  06E8               	decf	16360,f,c
   599  006288  E1FD               	bnz	clear_0
   600                           
   601                           ; Clear objects allocated to BANK0 (64 bytes)
   602  00628A  EE00  F0B9         	lfsr	0,__pbssBANK0
   603  00628E  0E40               	movlw	64
   604  006290                     clear_1:
   605  006290  6AEE               	clrf	16366,c
   606  006292  06E8               	decf	16360,f,c
   607  006294  E1FD               	bnz	clear_1
   608                           
   609                           ; Clear objects allocated to COMRAM (12 bytes)
   610  006296  EE00  F047         	lfsr	0,__pbssCOMRAM
   611  00629A  0E0C               	movlw	12
   612  00629C                     clear_2:
   613  00629C  6AEE               	clrf	16366,c
   614  00629E  06E8               	decf	16360,f,c
   615  0062A0  E1FD               	bnz	clear_2
   616                           
   617                           ;
   618                           ; Setup IVTBASE
   619                           ;
   620  0062A2  0E08               	movlw	(ivt0x8_base shr 0)& (0+255)
   621  0062A4  6ED5               	movwf	213,c
   622  0062A6  0E00               	movlw	(ivt0x8_base shr (0+8))& (0+255)
   623  0062A8  6ED6               	movwf	214,c
   624  0062AA  0E00               	movlw	(ivt0x8_base shr (0+16))& (0+255)
   625  0062AC  6ED7               	movwf	215,c
   626  0062AE                     end_of_initialization:
   627                           	opt stack 0
   628  0062AE                     __end_of__initialization:
   629                           	opt stack 0
   630  0062AE  0100               	movlb	0
   631  0062B0  EF65  F010         	goto	_main	;jump to C main() function
   632                           
   633                           	psect	bssCOMRAM
   634  000047                     __pbssCOMRAM:
   635                           	opt stack 0
   636  000047                     _grip_steps_count:
   637                           	opt stack 0
   638  000047                     	ds	2
   639  000049                     _elbow_steps_count:
   640                           	opt stack 0
   641  000049                     	ds	2
   642  00004B                     _shoulder_steps_count:
   643                           	opt stack 0
   644  00004B                     	ds	2
   645  00004D                     _shoulder_steps:
   646                           	opt stack 0
   647  00004D                     	ds	2
   648  00004F                     _LAT_copy:
   649                           	opt stack 0
   650  00004F                     	ds	1
   651  000050                     _grip:
   652                           	opt stack 0
   653  000050                     	ds	1
   654  000051                     _rx_buf:
   655                           	opt stack 0
   656  000051                     	ds	2
   657                           
   658                           	psect	bssBANK0
   659  0000B9                     __pbssBANK0:
   660                           	opt stack 0
   661  0000B9                     _real_elbow_rad:
   662                           	opt stack 0
   663  0000B9                     	ds	4
   664  0000BD                     _real_shoulder_rad:
   665                           	opt stack 0
   666  0000BD                     	ds	4
   667  0000C1                     _shoulder_rad:
   668                           	opt stack 0
   669  0000C1                     	ds	4
   670  0000C5                     _beta:
   671                           	opt stack 0
   672  0000C5                     	ds	4
   673  0000C9                     _Z0:
   674                           	opt stack 0
   675  0000C9                     	ds	4
   676  0000CD                     _R0:
   677                           	opt stack 0
   678  0000CD                     	ds	4
   679  0000D1                     _Pitch:
   680                           	opt stack 0
   681  0000D1                     	ds	4
   682  0000D5                     _Y_c:
   683                           	opt stack 0
   684  0000D5                     	ds	4
   685  0000D9                     _X_c:
   686                           	opt stack 0
   687  0000D9                     	ds	4
   688  0000DD                     _grip_steps:
   689                           	opt stack 0
   690  0000DD                     	ds	2
   691  0000DF                     _next_grip_steps:
   692                           	opt stack 0
   693  0000DF                     	ds	2
   694  0000E1                     _next_elbow_steps:
   695                           	opt stack 0
   696  0000E1                     	ds	2
   697  0000E3                     _next_shoulder_steps:
   698                           	opt stack 0
   699  0000E3                     	ds	2
   700  0000E5                     _elbow_steps:
   701                           	opt stack 0
   702  0000E5                     	ds	2
   703  0000E7                     _base_steps:
   704                           	opt stack 0
   705  0000E7                     	ds	2
   706  0000E9                     _rwrist_steps:
   707                           	opt stack 0
   708  0000E9                     	ds	2
   709  0000EB                     _lwrist_steps_count:
   710                           	opt stack 0
   711  0000EB                     	ds	2
   712  0000ED                     _lwrist_steps:
   713                           	opt stack 0
   714  0000ED                     	ds	2
   715  0000EF                     _G_phase:
   716                           	opt stack 0
   717  0000EF                     	ds	1
   718  0000F0                     _E_phase:
   719                           	opt stack 0
   720  0000F0                     	ds	1
   721  0000F1                     _S_phase:
   722                           	opt stack 0
   723  0000F1                     	ds	1
   724  0000F2                     _B_phase:
   725                           	opt stack 0
   726  0000F2                     	ds	1
   727  0000F3                     _RW_phase:
   728                           	opt stack 0
   729  0000F3                     	ds	1
   730  0000F4                     _LW_phase:
   731                           	opt stack 0
   732  0000F4                     	ds	1
   733  0000F5                     _alfa:
   734                           	opt stack 0
   735  0000F5                     	ds	4
   736                           
   737                           	psect	dataBANK0
   738  0000F9                     __pdataBANK0:
   739                           	opt stack 0
   740  0000F9                     _copia_buf_1:
   741                           	opt stack 0
   742  0000F9                     	ds	2
   743  0000FB                     _copia_buf_0:
   744                           	opt stack 0
   745  0000FB                     	ds	2
   746  0000FD                     _RX_PORTB:
   747                           	opt stack 0
   748  0000FD                     	ds	1
   749  0000FE                     _RX_PORTA:
   750                           	opt stack 0
   751  0000FE                     	ds	1
   752                           
   753                           	psect	bssBANK1
   754  000130                     __pbssBANK1:
   755                           	opt stack 0
   756  000130                     _next_elbow_rad:
   757                           	opt stack 0
   758  000130                     	ds	4
   759  000134                     _next_shoulder_rad:
   760                           	opt stack 0
   761  000134                     	ds	4
   762  000138                     _real_base_rad:
   763                           	opt stack 0
   764  000138                     	ds	4
   765  00013C                     _roll:
   766                           	opt stack 0
   767  00013C                     	ds	4
   768  000140                     _pitch:
   769                           	opt stack 0
   770  000140                     	ds	4
   771  000144                     _elbow_rad:
   772                           	opt stack 0
   773  000144                     	ds	4
   774  000148                     _base_rad:
   775                           	opt stack 0
   776  000148                     	ds	4
   777  00014C                     _RR:
   778                           	opt stack 0
   779  00014C                     	ds	4
   780  000150                     _Roll:
   781                           	opt stack 0
   782  000150                     	ds	4
   783  000154                     _Z_c:
   784                           	opt stack 0
   785  000154                     	ds	4
   786  000158                     _errno:
   787                           	opt stack 0
   788  000158                     	ds	2
   789  00015A                     _base_steps_count:
   790                           	opt stack 0
   791  00015A                     	ds	2
   792  00015C                     _rwrist_steps_count:
   793                           	opt stack 0
   794  00015C                     	ds	2
   795                           
   796                           	psect	dataBANK1
   797  000100                     __pdataBANK1:
   798                           	opt stack 0
   799  000100                     _GM_phases:
   800                           	opt stack 0
   801  000100                     	ds	8
   802  000108                     _EM_phases:
   803                           	opt stack 0
   804  000108                     	ds	8
   805  000110                     _SM_phases:
   806                           	opt stack 0
   807  000110                     	ds	8
   808  000118                     _BM_phases:
   809                           	opt stack 0
   810  000118                     	ds	8
   811  000120                     _RWM_phases:
   812                           	opt stack 0
   813  000120                     	ds	8
   814  000128                     _LWM_phases:
   815                           	opt stack 0
   816  000128                     	ds	8
   817                           
   818                           	psect	cstackBANK1
   819  00015E                     __pcstackBANK1:
   820                           	opt stack 0
   821  00015E                     _rad_calculation_auto$2447:
   822                           	opt stack 0
   823                           
   824                           ; 4 bytes @ 0x0
   825  00015E                     	ds	4
   826  000162                     _rad_calculation_auto$2448:
   827                           	opt stack 0
   828                           
   829                           ; 4 bytes @ 0x4
   830  000162                     	ds	4
   831  000166                     _rad_calculation_auto$2449:
   832                           	opt stack 0
   833                           
   834                           ; 4 bytes @ 0x8
   835  000166                     	ds	4
   836  00016A                     _rad_calculation_auto$2446:
   837                           	opt stack 0
   838                           
   839                           ; 4 bytes @ 0xC
   840  00016A                     	ds	4
   841                           
   842                           	psect	cstackBANK0
   843  000060                     __pcstackBANK0:
   844                           	opt stack 0
   845  000060                     ___fladd@signs:
   846                           	opt stack 0
   847                           
   848                           ; 1 bytes @ 0x0
   849  000060                     	ds	1
   850  000061                     ___fladd@aexp:
   851                           	opt stack 0
   852                           
   853                           ; 1 bytes @ 0x1
   854  000061                     	ds	1
   855  000062                     ___fladd@bexp:
   856                           	opt stack 0
   857                           
   858                           ; 1 bytes @ 0x2
   859  000062                     	ds	1
   860  000063                     ___fladd@grs:
   861                           	opt stack 0
   862                           
   863                           ; 1 bytes @ 0x3
   864  000063                     	ds	1
   865  000064                     ?___flmul:
   866                           	opt stack 0
   867  000064                     ___flmul@b:
   868                           	opt stack 0
   869                           
   870                           ; 4 bytes @ 0x4
   871  000064                     	ds	4
   872  000068                     ___flmul@a:
   873                           	opt stack 0
   874                           
   875                           ; 4 bytes @ 0x8
   876  000068                     	ds	4
   877  00006C                     ??___flmul:
   878                           
   879                           ; 1 bytes @ 0xC
   880  00006C                     	ds	4
   881  000070                     ___flmul@sign:
   882                           	opt stack 0
   883                           
   884                           ; 1 bytes @ 0x10
   885  000070                     	ds	1
   886  000071                     ___flmul@aexp:
   887                           	opt stack 0
   888                           
   889                           ; 1 bytes @ 0x11
   890  000071                     	ds	1
   891  000072                     ___flmul@grs:
   892                           	opt stack 0
   893                           
   894                           ; 4 bytes @ 0x12
   895  000072                     	ds	4
   896  000076                     ___flmul@bexp:
   897                           	opt stack 0
   898                           
   899                           ; 1 bytes @ 0x16
   900  000076                     	ds	1
   901  000077                     ___flmul@prod:
   902                           	opt stack 0
   903                           
   904                           ; 4 bytes @ 0x17
   905  000077                     	ds	4
   906  00007B                     ___flmul@temp:
   907                           	opt stack 0
   908                           
   909                           ; 2 bytes @ 0x1B
   910  00007B                     	ds	2
   911  00007D                     ?_sqrt:
   912                           	opt stack 0
   913  00007D                     ?_eval_poly:
   914                           	opt stack 0
   915  00007D                     ?___fltol:
   916                           	opt stack 0
   917  00007D                     eval_poly@x:
   918                           	opt stack 0
   919  00007D                     ___fltol@f1:
   920                           	opt stack 0
   921  00007D                     sqrt@a:
   922                           	opt stack 0
   923                           
   924                           ; 4 bytes @ 0x1D
   925  00007D                     	ds	4
   926  000081                     ??_sqrt:
   927  000081                     ??___fltol:
   928  000081                     eval_poly@d:
   929                           	opt stack 0
   930                           
   931                           ; 2 bytes @ 0x21
   932  000081                     	ds	2
   933  000083                     eval_poly@n:
   934                           	opt stack 0
   935                           
   936                           ; 2 bytes @ 0x23
   937  000083                     	ds	2
   938  000085                     ??_eval_poly:
   939  000085                     ?_trunc:
   940                           	opt stack 0
   941  000085                     ?_floor:
   942                           	opt stack 0
   943  000085                     sqrt@sign:
   944                           	opt stack 0
   945  000085                     trunc@x:
   946                           	opt stack 0
   947  000085                     floor@x:
   948                           	opt stack 0
   949                           
   950                           ; 4 bytes @ 0x25
   951  000085                     	ds	1
   952  000086                     sqrt@i:
   953                           	opt stack 0
   954                           
   955                           ; 1 bytes @ 0x26
   956  000086                     	ds	1
   957  000087                     sqrt@tfrac:
   958                           	opt stack 0
   959                           
   960                           ; 4 bytes @ 0x27
   961  000087                     	ds	2
   962  000089                     eval_poly@res:
   963                           	opt stack 0
   964  000089                     trunc@i:
   965                           	opt stack 0
   966  000089                     floor@i:
   967                           	opt stack 0
   968                           
   969                           ; 4 bytes @ 0x29
   970  000089                     	ds	2
   971  00008B                     sqrt@p:
   972                           	opt stack 0
   973                           
   974                           ; 1 bytes @ 0x2B
   975  00008B                     	ds	1
   976  00008C                     sqrt@grs:
   977                           	opt stack 0
   978                           
   979                           ; 4 bytes @ 0x2C
   980  00008C                     	ds	1
   981  00008D                     trunc@expon:
   982                           	opt stack 0
   983  00008D                     floor@expon:
   984                           	opt stack 0
   985                           
   986                           ; 2 bytes @ 0x2D
   987  00008D                     	ds	2
   988  00008F                     ?_round:
   989                           	opt stack 0
   990  00008F                     ?___flsub:
   991                           	opt stack 0
   992  00008F                     round@x:
   993                           	opt stack 0
   994  00008F                     ___flsub@b:
   995                           	opt stack 0
   996                           
   997                           ; 4 bytes @ 0x2F
   998  00008F                     	ds	1
   999  000090                     sqrt@exp:
  1000                           	opt stack 0
  1001                           
  1002                           ; 2 bytes @ 0x30
  1003  000090                     	ds	2
  1004  000092                     sqrt@root:
  1005                           	opt stack 0
  1006                           
  1007                           ; 4 bytes @ 0x32
  1008  000092                     	ds	1
  1009  000093                     round@f:
  1010                           	opt stack 0
  1011  000093                     ___flsub@a:
  1012                           	opt stack 0
  1013                           
  1014                           ; 4 bytes @ 0x33
  1015  000093                     	ds	3
  1016  000096                     sqrt@frac:
  1017                           	opt stack 0
  1018                           
  1019                           ; 4 bytes @ 0x36
  1020  000096                     	ds	1
  1021  000097                     ?_sin:
  1022                           	opt stack 0
  1023  000097                     sin@f:
  1024                           	opt stack 0
  1025  000097                     _steps_calculation$2452:
  1026                           	opt stack 0
  1027  000097                     _next_steps_calculation$2454:
  1028                           	opt stack 0
  1029                           
  1030                           ; 4 bytes @ 0x37
  1031  000097                     	ds	3
  1032  00009A                     ?_atan:
  1033                           	opt stack 0
  1034  00009A                     atan@f:
  1035                           	opt stack 0
  1036                           
  1037                           ; 4 bytes @ 0x3A
  1038  00009A                     	ds	1
  1039  00009B                     sin@y:
  1040                           	opt stack 0
  1041  00009B                     _steps_calculation$2453:
  1042                           	opt stack 0
  1043  00009B                     _next_steps_calculation$2455:
  1044                           	opt stack 0
  1045                           
  1046                           ; 4 bytes @ 0x3B
  1047  00009B                     	ds	3
  1048  00009E                     atan@y:
  1049                           	opt stack 0
  1050                           
  1051                           ; 4 bytes @ 0x3E
  1052  00009E                     	ds	1
  1053  00009F                     _sin$2457:
  1054                           	opt stack 0
  1055                           
  1056                           ; 4 bytes @ 0x3F
  1057  00009F                     	ds	3
  1058  0000A2                     atan@x:
  1059                           	opt stack 0
  1060                           
  1061                           ; 4 bytes @ 0x42
  1062  0000A2                     	ds	1
  1063  0000A3                     sin@x2:
  1064                           	opt stack 0
  1065                           
  1066                           ; 4 bytes @ 0x43
  1067  0000A3                     	ds	3
  1068  0000A6                     atan@recip:
  1069                           	opt stack 0
  1070                           
  1071                           ; 1 bytes @ 0x46
  1072  0000A6                     	ds	1
  1073  0000A7                     sin@sgn:
  1074                           	opt stack 0
  1075  0000A7                     atan@val_squared:
  1076                           	opt stack 0
  1077                           
  1078                           ; 4 bytes @ 0x47
  1079  0000A7                     	ds	1
  1080  0000A8                     ?_cos:
  1081                           	opt stack 0
  1082  0000A8                     cos@f:
  1083                           	opt stack 0
  1084                           
  1085                           ; 4 bytes @ 0x48
  1086  0000A8                     	ds	3
  1087  0000AB                     atan@val:
  1088                           	opt stack 0
  1089                           
  1090                           ; 4 bytes @ 0x4B
  1091  0000AB                     	ds	1
  1092  0000AC                     _cos$2456:
  1093                           	opt stack 0
  1094                           
  1095                           ; 4 bytes @ 0x4C
  1096  0000AC                     	ds	3
  1097  0000AF                     _rad_calculation_manual$2450:
  1098                           	opt stack 0
  1099  0000AF                     _next_rad_calculation_manual$2451:
  1100                           	opt stack 0
  1101                           
  1102                           ; 4 bytes @ 0x4F
  1103  0000AF                     	ds	4
  1104  0000B3                     ??_main:
  1105                           
  1106                           ; 1 bytes @ 0x53
  1107  0000B3                     	ds	2
  1108  0000B5                     main@base_state:
  1109                           	opt stack 0
  1110                           
  1111                           ; 1 bytes @ 0x55
  1112  0000B5                     	ds	1
  1113  0000B6                     main@grip_state:
  1114                           	opt stack 0
  1115                           
  1116                           ; 1 bytes @ 0x56
  1117  0000B6                     	ds	1
  1118  0000B7                     main@pitch_roll_state:
  1119                           	opt stack 0
  1120                           
  1121                           ; 1 bytes @ 0x57
  1122  0000B7                     	ds	1
  1123  0000B8                     main@elbow_shoulder_state:
  1124                           	opt stack 0
  1125                           
  1126                           ; 1 bytes @ 0x58
  1127  0000B8                     	ds	1
  1128                           
  1129                           	psect	cstackCOMRAM
  1130  000001                     __pcstackCOMRAM:
  1131                           	opt stack 0
  1132  000001                     i2SPI_RW@value:
  1133                           	opt stack 0
  1134                           
  1135                           ; 1 bytes @ 0x0
  1136  000001                     	ds	1
  1137  000002                     i2SPI_Write_Reg@value:
  1138                           	opt stack 0
  1139  000002                     SPI_Read_Buf@pBuf:
  1140                           	opt stack 0
  1141                           
  1142                           ; 2 bytes @ 0x1
  1143  000002                     	ds	1
  1144  000003                     i2SPI_Write_Reg@reg:
  1145                           	opt stack 0
  1146                           
  1147                           ; 1 bytes @ 0x2
  1148  000003                     	ds	1
  1149  000004                     SPI_Read_Buf@length:
  1150                           	opt stack 0
  1151  000004                     i2SPI_Write_Reg@status:
  1152                           	opt stack 0
  1153                           
  1154                           ; 1 bytes @ 0x3
  1155  000004                     	ds	1
  1156  000005                     SPI_Read_Buf@status:
  1157                           	opt stack 0
  1158                           
  1159                           ; 1 bytes @ 0x4
  1160  000005                     	ds	1
  1161  000006                     SPI_Read_Buf@reg:
  1162                           	opt stack 0
  1163                           
  1164                           ; 1 bytes @ 0x5
  1165  000006                     	ds	1
  1166  000007                     SPI_Read_Buf@byte_ctr:
  1167                           	opt stack 0
  1168                           
  1169                           ; 1 bytes @ 0x6
  1170  000007                     	ds	1
  1171  000008                     ??_TMR1_ISR:
  1172  000008                     
  1173                           ; 1 bytes @ 0x7
  1174  000008                     	ds	1
  1175  000009                     ??_TMR2_ISR:
  1176  000009                     
  1177                           ; 1 bytes @ 0x8
  1178  000009                     	ds	1
  1179  00000A                     ??_TMR4_ISR:
  1180  00000A                     
  1181                           ; 1 bytes @ 0x9
  1182  00000A                     	ds	1
  1183  00000B                     ??_TMR6_ISR:
  1184  00000B                     
  1185                           ; 1 bytes @ 0xA
  1186  00000B                     	ds	1
  1187  00000C                     ??_TMR5_ISR:
  1188  00000C                     
  1189                           ; 1 bytes @ 0xB
  1190  00000C                     	ds	1
  1191  00000D                     ??_TMR3_ISR:
  1192  00000D                     
  1193                           ; 1 bytes @ 0xC
  1194  00000D                     	ds	1
  1195  00000E                     ?___xxtofl:
  1196                           	opt stack 0
  1197  00000E                     INTERRUPT_Initialize@state:
  1198                           	opt stack 0
  1199  00000E                     SPI_RW@value:
  1200                           	opt stack 0
  1201  00000E                     ___flge@ff1:
  1202                           	opt stack 0
  1203  00000E                     ___xxtofl@val:
  1204                           	opt stack 0
  1205  00000E                     frexp@value:
  1206                           	opt stack 0
  1207                           
  1208                           ; 4 bytes @ 0xD
  1209  00000E                     	ds	1
  1210  00000F                     SPI_Write_Reg@value:
  1211                           	opt stack 0
  1212  00000F                     SPI_Read_Reg@status:
  1213                           	opt stack 0
  1214  00000F                     SPI_Write_Buf@pBuf:
  1215                           	opt stack 0
  1216                           
  1217                           ; 2 bytes @ 0xE
  1218  00000F                     	ds	1
  1219  000010                     SPI_Write_Reg@status:
  1220                           	opt stack 0
  1221  000010                     SPI_Read_Reg@reg:
  1222                           	opt stack 0
  1223                           
  1224                           ; 1 bytes @ 0xF
  1225  000010                     	ds	1
  1226  000011                     SPI_Write_Reg@reg:
  1227                           	opt stack 0
  1228  000011                     SPI_Read_Reg@value:
  1229                           	opt stack 0
  1230  000011                     SPI_Write_Buf@length:
  1231                           	opt stack 0
  1232                           
  1233                           ; 1 bytes @ 0x10
  1234  000011                     	ds	1
  1235  000012                     ??___xxtofl:
  1236  000012                     SPI_Write_Buf@status:
  1237                           	opt stack 0
  1238  000012                     SwitchToRxMode@value:
  1239                           	opt stack 0
  1240  000012                     SwitchCFG@_cfg:
  1241                           	opt stack 0
  1242  000012                     frexp@eptr:
  1243                           	opt stack 0
  1244  000012                     ___flge@ff2:
  1245                           	opt stack 0
  1246                           
  1247                           ; 4 bytes @ 0x11
  1248  000012                     	ds	1
  1249  000013                     SPI_Write_Buf@reg:
  1250                           	opt stack 0
  1251  000013                     SwitchCFG@Tmp:
  1252                           	opt stack 0
  1253                           
  1254                           ; 1 bytes @ 0x12
  1255  000013                     	ds	1
  1256  000014                     ??_frexp:
  1257  000014                     SPI_Write_Buf@byte_ctr:
  1258                           	opt stack 0
  1259                           
  1260                           ; 1 bytes @ 0x13
  1261  000014                     	ds	1
  1262  000015                     ??_RFM70_Initialize:
  1263                           
  1264                           ; 1 bytes @ 0x14
  1265  000015                     	ds	1
  1266  000016                     ??___flge:
  1267  000016                     ___xxtofl@sign:
  1268                           	opt stack 0
  1269                           
  1270                           ; 1 bytes @ 0x15
  1271  000016                     	ds	1
  1272  000017                     ___xxtofl@exp:
  1273                           	opt stack 0
  1274                           
  1275                           ; 1 bytes @ 0x16
  1276  000017                     	ds	1
  1277  000018                     ___xxtofl@arg:
  1278                           	opt stack 0
  1279                           
  1280                           ; 4 bytes @ 0x17
  1281  000018                     	ds	2
  1282  00001A                     RFM70_Initialize@WriteArr:
  1283                           	opt stack 0
  1284                           
  1285                           ; 12 bytes @ 0x19
  1286  00001A                     	ds	2
  1287  00001C                     ?___fldiv:
  1288                           	opt stack 0
  1289  00001C                     ?___flneg:
  1290                           	opt stack 0
  1291  00001C                     ___flneg@f1:
  1292                           	opt stack 0
  1293  00001C                     ___fldiv@b:
  1294                           	opt stack 0
  1295                           
  1296                           ; 4 bytes @ 0x1B
  1297  00001C                     	ds	4
  1298  000020                     ?_fabs:
  1299                           	opt stack 0
  1300  000020                     fabs@d:
  1301                           	opt stack 0
  1302  000020                     ___fldiv@a:
  1303                           	opt stack 0
  1304                           
  1305                           ; 4 bytes @ 0x1F
  1306  000020                     	ds	4
  1307  000024                     ??___fldiv:
  1308  000024                     
  1309                           ; 1 bytes @ 0x23
  1310  000024                     	ds	2
  1311  000026                     RFM70_Initialize@i:
  1312                           	opt stack 0
  1313                           
  1314                           ; 1 bytes @ 0x25
  1315  000026                     	ds	1
  1316  000027                     RFM70_Initialize@j:
  1317                           	opt stack 0
  1318                           
  1319                           ; 1 bytes @ 0x26
  1320  000027                     	ds	1
  1321  000028                     ___fldiv@sign:
  1322                           	opt stack 0
  1323                           
  1324                           ; 1 bytes @ 0x27
  1325  000028                     	ds	1
  1326  000029                     ___fldiv@rem:
  1327                           	opt stack 0
  1328                           
  1329                           ; 4 bytes @ 0x28
  1330  000029                     	ds	4
  1331  00002D                     ___fldiv@new_exp:
  1332                           	opt stack 0
  1333                           
  1334                           ; 2 bytes @ 0x2C
  1335  00002D                     	ds	2
  1336  00002F                     ___fldiv@grs:
  1337                           	opt stack 0
  1338                           
  1339                           ; 4 bytes @ 0x2E
  1340  00002F                     	ds	4
  1341  000033                     ___fldiv@bexp:
  1342                           	opt stack 0
  1343                           
  1344                           ; 1 bytes @ 0x32
  1345  000033                     	ds	1
  1346  000034                     ___fldiv@aexp:
  1347                           	opt stack 0
  1348                           
  1349                           ; 1 bytes @ 0x33
  1350  000034                     	ds	1
  1351  000035                     ?___fladd:
  1352                           	opt stack 0
  1353  000035                     ___fladd@b:
  1354                           	opt stack 0
  1355                           
  1356                           ; 4 bytes @ 0x34
  1357  000035                     	ds	4
  1358  000039                     ___fladd@a:
  1359                           	opt stack 0
  1360                           
  1361                           ; 4 bytes @ 0x38
  1362  000039                     	ds	4
  1363  00003D                     ??___fladd:
  1364                           
  1365                           ; 1 bytes @ 0x3C
  1366  00003D                     	ds	8
  1367  000045                     ___fltol@sign1:
  1368                           	opt stack 0
  1369                           
  1370                           ; 1 bytes @ 0x44
  1371  000045                     	ds	1
  1372  000046                     ___fltol@exp1:
  1373                           	opt stack 0
  1374                           
  1375                           ; 1 bytes @ 0x45
  1376  000046                     	ds	1
  1377  000047                     
  1378                           ; 1 bytes @ 0x46
  1379 ;;
  1380 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1381 ;;
  1382 ;; *************** function _main *****************
  1383 ;; Defined at:
  1384 ;;		line 159 in file "RoboticArm.c"
  1385 ;; Parameters:    Size  Location     Type
  1386 ;;		None
  1387 ;; Auto vars:     Size  Location     Type
  1388 ;;  elbow_should    1   88[BANK0 ] unsigned char 
  1389 ;;  pitch_roll_s    1   87[BANK0 ] unsigned char 
  1390 ;;  grip_state      1   86[BANK0 ] unsigned char 
  1391 ;;  base_state      1   85[BANK0 ] unsigned char 
  1392 ;; Return value:  Size  Location     Type
  1393 ;;                  1    wreg      void 
  1394 ;; Registers used:
  1395 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1396 ;; Tracked objects:
  1397 ;;		On entry : 0/0
  1398 ;;		On exit  : 0/0
  1399 ;;		Unchanged: 0/0
  1400 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
  1401 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1402 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1403 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1404 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  1405 ;;Total ram usage:        6 bytes
  1406 ;; Hardware stack levels required when called:   11
  1407 ;; This function calls:
  1408 ;;		_G_start_check
  1409 ;;		_RFM70_Initialize
  1410 ;;		_SEG_start_check
  1411 ;;		_SYSTEM_Initialize
  1412 ;;		_SwitchToRxMode
  1413 ;;		___fladd
  1414 ;;		___flsub
  1415 ;;		_base_motors_off
  1416 ;;		_elbow_shoulder_motors_off
  1417 ;;		_next_rad_calculation_manual
  1418 ;;		_next_steps_calculation
  1419 ;;		_pitch_roll_motors_off
  1420 ;;		_rad_calculation_auto
  1421 ;;		_rad_calculation_manual
  1422 ;;		_rad_copy
  1423 ;;		_real_rad_calculation
  1424 ;;		_steps_calculation
  1425 ;;		_values_update
  1426 ;; This function is called by:
  1427 ;;		Startup code after reset
  1428 ;; This function uses a non-reentrant model
  1429 ;;
  1430                           
  1431                           	psect	text0
  1432  0020CA                     __ptext0:
  1433                           	opt stack 0
  1434  0020CA                     _main:
  1435                           	opt stack 20
  1436                           
  1437                           ;RoboticArm.c: 161: unsigned char elbow_shoulder_state = 0;
  1438                           
  1439                           ;incstack = 0
  1440  0020CA  0E00               	movlw	0
  1441  0020CC  0100               	movlb	0	; () banked
  1442  0020CE  6FB8               	movwf	main@elbow_shoulder_state& (0+255),b
  1443                           
  1444                           ;RoboticArm.c: 162: unsigned char base_state = 0;
  1445  0020D0  0E00               	movlw	0
  1446  0020D2  6FB5               	movwf	main@base_state& (0+255),b
  1447                           
  1448                           ;RoboticArm.c: 163: unsigned char grip_state = 0;
  1449  0020D4  0E00               	movlw	0
  1450  0020D6  6FB6               	movwf	main@grip_state& (0+255),b
  1451                           
  1452                           ;RoboticArm.c: 165: unsigned char pitch_roll_state = 0;
  1453  0020D8  0E00               	movlw	0
  1454  0020DA  6FB7               	movwf	main@pitch_roll_state& (0+255),b
  1455                           
  1456                           ; BSR set to: 0
  1457                           ;RoboticArm.c: 167: SYSTEM_Initialize();
  1458  0020DC  EC4E  F033         	call	_SYSTEM_Initialize	;wreg free
  1459                           
  1460                           ;RoboticArm.c: 168: RFM70_Initialize();
  1461  0020E0  EC93  F01A         	call	_RFM70_Initialize	;wreg free
  1462                           
  1463                           ;RoboticArm.c: 169: SwitchToRxMode();
  1464  0020E4  EC62  F032         	call	_SwitchToRxMode	;wreg free
  1465                           
  1466                           ;RoboticArm.c: 171: _delay((unsigned long)((1000)*(64000000/4000.0)));
  1467  0020E8  0E52               	movlw	82
  1468  0020EA  0100               	movlb	0	; () banked
  1469  0020EC  6FB4               	movwf	(??_main+1)& (0+255),b
  1470  0020EE  0E2B               	movlw	43
  1471  0020F0  6FB3               	movwf	??_main& (0+255),b
  1472  0020F2  0E00               	movlw	0
  1473  0020F4                     u7737:
  1474  0020F4  2EE8               	decfsz	16360,f,c
  1475  0020F6  D7FE               	bra	u7737
  1476  0020F8  2FB3               	decfsz	??_main& (0+255),f,b
  1477  0020FA  D7FC               	bra	u7737
  1478  0020FC  2FB4               	decfsz	(??_main+1)& (0+255),f,b
  1479  0020FE  D7FA               	bra	u7737
  1480  002100  F000               	nop	
  1481                           
  1482                           ;RoboticArm.c: 183: lwrist_steps = 0;
  1483  002102  0E00               	movlw	0
  1484  002104  0100               	movlb	0	; () banked
  1485  002106  6FEE               	movwf	(_lwrist_steps+1)& (0+255),b
  1486  002108  0E00               	movlw	0
  1487  00210A  6FED               	movwf	_lwrist_steps& (0+255),b
  1488                           
  1489                           ; BSR set to: 0
  1490                           ;RoboticArm.c: 184: rwrist_steps = 0;
  1491  00210C  0E00               	movlw	0
  1492  00210E  6FEA               	movwf	(_rwrist_steps+1)& (0+255),b
  1493  002110  0E00               	movlw	0
  1494  002112  6FE9               	movwf	_rwrist_steps& (0+255),b
  1495                           
  1496                           ; BSR set to: 0
  1497                           ;RoboticArm.c: 185: base_steps = 0;
  1498  002114  0E00               	movlw	0
  1499  002116  6FE8               	movwf	(_base_steps+1)& (0+255),b
  1500  002118  0E00               	movlw	0
  1501  00211A  6FE7               	movwf	_base_steps& (0+255),b
  1502                           
  1503                           ; BSR set to: 0
  1504                           ;RoboticArm.c: 186: shoulder_steps = 0;
  1505  00211C  0E00               	movlw	0
  1506  00211E  6E4E               	movwf	_shoulder_steps+1,c
  1507  002120  0E00               	movlw	0
  1508  002122  6E4D               	movwf	_shoulder_steps,c
  1509                           
  1510                           ; BSR set to: 0
  1511                           ;RoboticArm.c: 187: elbow_steps = 0;
  1512  002124  0E00               	movlw	0
  1513  002126  6FE6               	movwf	(_elbow_steps+1)& (0+255),b
  1514  002128  0E00               	movlw	0
  1515  00212A  6FE5               	movwf	_elbow_steps& (0+255),b
  1516                           
  1517                           ; BSR set to: 0
  1518                           ;RoboticArm.c: 188: grip_steps = 0;
  1519  00212C  0E00               	movlw	0
  1520  00212E  6FDE               	movwf	(_grip_steps+1)& (0+255),b
  1521  002130  0E00               	movlw	0
  1522  002132  6FDD               	movwf	_grip_steps& (0+255),b
  1523                           
  1524                           ; BSR set to: 0
  1525                           ;RoboticArm.c: 191: X_c = 130;
  1526  002134  0E00               	movlw	0
  1527  002136  6FD9               	movwf	_X_c& (0+255),b
  1528  002138  0E00               	movlw	0
  1529  00213A  6FDA               	movwf	(_X_c+1)& (0+255),b
  1530  00213C  0E02               	movlw	2
  1531  00213E  6FDB               	movwf	(_X_c+2)& (0+255),b
  1532  002140  0E43               	movlw	67
  1533  002142  6FDC               	movwf	(_X_c+3)& (0+255),b
  1534                           
  1535                           ; BSR set to: 0
  1536                           ;RoboticArm.c: 192: Y_c = 0;
  1537  002144  0E00               	movlw	0
  1538  002146  6FD5               	movwf	_Y_c& (0+255),b
  1539  002148  0E00               	movlw	0
  1540  00214A  6FD6               	movwf	(_Y_c+1)& (0+255),b
  1541  00214C  0E00               	movlw	0
  1542  00214E  6FD7               	movwf	(_Y_c+2)& (0+255),b
  1543  002150  0E00               	movlw	0
  1544  002152  6FD8               	movwf	(_Y_c+3)& (0+255),b
  1545                           
  1546                           ; BSR set to: 0
  1547                           ;RoboticArm.c: 193: Z_c = 0;
  1548  002154  0E00               	movlw	0
  1549  002156  0101               	movlb	1	; () banked
  1550  002158  6F54               	movwf	_Z_c& (0+255),b
  1551  00215A  0E00               	movlw	0
  1552  00215C  6F55               	movwf	(_Z_c+1)& (0+255),b
  1553  00215E  0E00               	movlw	0
  1554  002160  6F56               	movwf	(_Z_c+2)& (0+255),b
  1555  002162  0E00               	movlw	0
  1556  002164  6F57               	movwf	(_Z_c+3)& (0+255),b
  1557                           
  1558                           ; BSR set to: 1
  1559                           ;RoboticArm.c: 194: Roll = 0;
  1560  002166  0E00               	movlw	0
  1561  002168  6F50               	movwf	_Roll& (0+255),b
  1562  00216A  0E00               	movlw	0
  1563  00216C  6F51               	movwf	(_Roll+1)& (0+255),b
  1564  00216E  0E00               	movlw	0
  1565  002170  6F52               	movwf	(_Roll+2)& (0+255),b
  1566  002172  0E00               	movlw	0
  1567  002174  6F53               	movwf	(_Roll+3)& (0+255),b
  1568                           
  1569                           ; BSR set to: 1
  1570                           ;RoboticArm.c: 195: Pitch = -3.14159265358979323846/2;
  1571  002176  0EDB               	movlw	219
  1572  002178  0100               	movlb	0	; () banked
  1573  00217A  6FD1               	movwf	_Pitch& (0+255),b
  1574  00217C  0E0F               	movlw	15
  1575  00217E  6FD2               	movwf	(_Pitch+1)& (0+255),b
  1576  002180  0EC9               	movlw	201
  1577  002182  6FD3               	movwf	(_Pitch+2)& (0+255),b
  1578  002184  0EBF               	movlw	191
  1579  002186  6FD4               	movwf	(_Pitch+3)& (0+255),b
  1580                           
  1581                           ; BSR set to: 0
  1582                           ;RoboticArm.c: 197: rad_calculation_auto();
  1583  002188  ECAA  F017         	call	_rad_calculation_auto	;wreg free
  1584                           
  1585                           ;RoboticArm.c: 198: rad_copy();
  1586  00218C  ECC0  F034         	call	_rad_copy	;wreg free
  1587                           
  1588                           ;RoboticArm.c: 202: X_c = 130;
  1589  002190  0E00               	movlw	0
  1590  002192  0100               	movlb	0	; () banked
  1591  002194  6FD9               	movwf	_X_c& (0+255),b
  1592  002196  0E00               	movlw	0
  1593  002198  6FDA               	movwf	(_X_c+1)& (0+255),b
  1594  00219A  0E02               	movlw	2
  1595  00219C  6FDB               	movwf	(_X_c+2)& (0+255),b
  1596  00219E  0E43               	movlw	67
  1597  0021A0  6FDC               	movwf	(_X_c+3)& (0+255),b
  1598                           
  1599                           ; BSR set to: 0
  1600                           ;RoboticArm.c: 203: Y_c = 0;
  1601  0021A2  0E00               	movlw	0
  1602  0021A4  6FD5               	movwf	_Y_c& (0+255),b
  1603  0021A6  0E00               	movlw	0
  1604  0021A8  6FD6               	movwf	(_Y_c+1)& (0+255),b
  1605  0021AA  0E00               	movlw	0
  1606  0021AC  6FD7               	movwf	(_Y_c+2)& (0+255),b
  1607  0021AE  0E00               	movlw	0
  1608  0021B0  6FD8               	movwf	(_Y_c+3)& (0+255),b
  1609                           
  1610                           ; BSR set to: 0
  1611                           ;RoboticArm.c: 204: Z_c = 50;
  1612  0021B2  0E00               	movlw	0
  1613  0021B4  0101               	movlb	1	; () banked
  1614  0021B6  6F54               	movwf	_Z_c& (0+255),b
  1615  0021B8  0E00               	movlw	0
  1616  0021BA  6F55               	movwf	(_Z_c+1)& (0+255),b
  1617  0021BC  0E48               	movlw	72
  1618  0021BE  6F56               	movwf	(_Z_c+2)& (0+255),b
  1619  0021C0  0E42               	movlw	66
  1620  0021C2  6F57               	movwf	(_Z_c+3)& (0+255),b
  1621                           
  1622                           ; BSR set to: 1
  1623                           ;RoboticArm.c: 205: Roll = 0;
  1624  0021C4  0E00               	movlw	0
  1625  0021C6  6F50               	movwf	_Roll& (0+255),b
  1626  0021C8  0E00               	movlw	0
  1627  0021CA  6F51               	movwf	(_Roll+1)& (0+255),b
  1628  0021CC  0E00               	movlw	0
  1629  0021CE  6F52               	movwf	(_Roll+2)& (0+255),b
  1630  0021D0  0E00               	movlw	0
  1631  0021D2  6F53               	movwf	(_Roll+3)& (0+255),b
  1632                           
  1633                           ; BSR set to: 1
  1634                           ;RoboticArm.c: 206: Pitch = -3.14159265358979323846/2;
  1635  0021D4  0EDB               	movlw	219
  1636  0021D6  0100               	movlb	0	; () banked
  1637  0021D8  6FD1               	movwf	_Pitch& (0+255),b
  1638  0021DA  0E0F               	movlw	15
  1639  0021DC  6FD2               	movwf	(_Pitch+1)& (0+255),b
  1640  0021DE  0EC9               	movlw	201
  1641  0021E0  6FD3               	movwf	(_Pitch+2)& (0+255),b
  1642  0021E2  0EBF               	movlw	191
  1643  0021E4  6FD4               	movwf	(_Pitch+3)& (0+255),b
  1644                           
  1645                           ; BSR set to: 0
  1646                           ;RoboticArm.c: 208: rad_calculation_auto();
  1647  0021E6  ECAA  F017         	call	_rad_calculation_auto	;wreg free
  1648                           
  1649                           ;RoboticArm.c: 209: steps_calculation();
  1650  0021EA  EC62  F029         	call	_steps_calculation	;wreg free
  1651                           
  1652                           ;RoboticArm.c: 210: real_rad_calculation();
  1653  0021EE  ECFB  F02D         	call	_real_rad_calculation	;wreg free
  1654                           
  1655                           ;RoboticArm.c: 213: LW_phase = 3;
  1656  0021F2  0E03               	movlw	3
  1657  0021F4  0100               	movlb	0	; () banked
  1658  0021F6  6FF4               	movwf	_LW_phase& (0+255),b
  1659                           
  1660                           ; BSR set to: 0
  1661                           ;RoboticArm.c: 214: RW_phase = 3;
  1662  0021F8  0E03               	movlw	3
  1663  0021FA  6FF3               	movwf	_RW_phase& (0+255),b
  1664                           
  1665                           ; BSR set to: 0
  1666                           ;RoboticArm.c: 215: B_phase = 3;
  1667  0021FC  0E03               	movlw	3
  1668  0021FE  6FF2               	movwf	_B_phase& (0+255),b
  1669                           
  1670                           ; BSR set to: 0
  1671                           ;RoboticArm.c: 216: S_phase = 3;
  1672  002200  0E03               	movlw	3
  1673  002202  6FF1               	movwf	_S_phase& (0+255),b
  1674                           
  1675                           ; BSR set to: 0
  1676                           ;RoboticArm.c: 217: E_phase = 3;
  1677  002204  0E03               	movlw	3
  1678  002206  6FF0               	movwf	_E_phase& (0+255),b
  1679                           
  1680                           ; BSR set to: 0
  1681                           ;RoboticArm.c: 218: G_phase = 3;
  1682  002208  0E03               	movlw	3
  1683  00220A  6FEF               	movwf	_G_phase& (0+255),b
  1684                           
  1685                           ; BSR set to: 0
  1686                           ;RoboticArm.c: 220: GIEH=1;
  1687  00220C  013F               	movlb	63	; () banked
  1688  00220E  8FD2               	bsf	210,7,b	;volatile
  1689                           
  1690                           ; BSR set to: 63
  1691                           ;RoboticArm.c: 221: GIEL=0;
  1692  002210  9DD2               	bcf	210,6,b	;volatile
  1693                           
  1694                           ; BSR set to: 63
  1695                           ;RoboticArm.c: 222: GIE=1;
  1696  002212  8FD2               	bsf	210,7,b	;volatile
  1697                           
  1698                           ;RoboticArm.c: 224: while((RX_PORTB & 0b00000010))
  1699  002214  D007               	goto	l1009
  1700  002216                     l1010:
  1701                           
  1702                           ; BSR set to: 0
  1703                           ;RoboticArm.c: 225: {
  1704                           ;RoboticArm.c: 226: (PIE1bits.INT0IE = 0);
  1705  002216  0139               	movlb	57	; () banked
  1706  002218  9191               	bcf	145,0,b	;volatile
  1707                           
  1708                           ;RoboticArm.c: 227: RX_PORTA= copia_buf_0;
  1709  00221A  C0FB  F0FE         	movff	_copia_buf_0,_RX_PORTA
  1710                           
  1711                           ;RoboticArm.c: 228: RX_PORTB= copia_buf_1;
  1712  00221E  C0F9  F0FD         	movff	_copia_buf_1,_RX_PORTB
  1713                           
  1714                           ;RoboticArm.c: 229: (PIE1bits.INT0IE = 1);
  1715  002222  8191               	bsf	145,0,b	;volatile
  1716  002224                     l1009:
  1717  002224  0100               	movlb	0	; () banked
  1718  002226  B3FD               	btfsc	_RX_PORTB& (0+255),1,b
  1719  002228  D7F6               	goto	l1010
  1720                           
  1721                           ; BSR set to: 0
  1722                           ;RoboticArm.c: 230: }
  1723                           ;RoboticArm.c: 233: SEG_start_check();
  1724                           
  1725                           ; BSR set to: 0
  1726  00222A  EC83  F032         	call	_SEG_start_check	;wreg free
  1727                           
  1728                           ;RoboticArm.c: 234: GIEL=1;
  1729  00222E  013F               	movlb	63	; () banked
  1730  002230  8DD2               	bsf	210,6,b	;volatile
  1731  002232                     
  1732                           ; BSR set to: 63
  1733                           
  1734                           ; BSR set to: 63
  1735  002232  A1A6               	btfss	166,0,b	;volatile
  1736                           
  1737                           ; BSR set to: 63
  1738  002234  B1B2               	btfsc	178,0,b	;volatile
  1739  002236  D7FD               	goto	l1013
  1740                           
  1741                           ; BSR set to: 63
  1742  002238  B19A               	btfsc	154,0,b	;volatile
  1743  00223A  D7FB               	goto	l1013
  1744  00223C                     u6980:
  1745                           
  1746                           ;RoboticArm.c: 239: {
  1747                           ;RoboticArm.c: 240: (PIE1bits.INT0IE = 0);
  1748                           
  1749                           ; BSR set to: 63
  1750                           ;RoboticArm.c: 238: while(1)
  1751  00223C  0139               	movlb	57	; () banked
  1752  00223E  9191               	bcf	145,0,b	;volatile
  1753                           
  1754                           ;RoboticArm.c: 241: RX_PORTA= copia_buf_0;
  1755  002240  C0FB  F0FE         	movff	_copia_buf_0,_RX_PORTA
  1756                           
  1757                           ;RoboticArm.c: 242: RX_PORTB= copia_buf_1;
  1758  002244  C0F9  F0FD         	movff	_copia_buf_1,_RX_PORTB
  1759                           
  1760                           ;RoboticArm.c: 243: (PIE1bits.INT0IE = 1);
  1761  002248  8191               	bsf	145,0,b	;volatile
  1762                           
  1763                           ;RoboticArm.c: 248: switch (elbow_shoulder_state)
  1764  00224A  EFAF  F016         	goto	l1016
  1765  00224E                     
  1766                           ;RoboticArm.c: 251: elbow_shoulder_motors_off();
  1767                           
  1768                           ; BSR set to: 57
  1769  00224E  EC7D  F035         	call	_elbow_shoulder_motors_off	;wreg free
  1770                           
  1771                           ;RoboticArm.c: 253: if(((RX_PORTB & 0b00000010)==0))
  1772  002252  0100               	movlb	0	; () banked
  1773  002254  B3FD               	btfsc	_RX_PORTB& (0+255),1,b
  1774  002256  D053               	goto	l1018
  1775                           
  1776                           ; BSR set to: 0
  1777                           ;RoboticArm.c: 254: {
  1778                           ;RoboticArm.c: 255: R0++;
  1779  002258  0060  F334  F035   	movff	_R0,___fladd@b
  1780  00225E  0060  F338  F036   	movff	_R0+1,___fladd@b+1
  1781  002264  0060  F33C  F037   	movff	_R0+2,___fladd@b+2
  1782  00226A  0060  F340  F038   	movff	_R0+3,___fladd@b+3
  1783  002270  0E00               	movlw	0
  1784  002272  6E39               	movwf	___fladd@a,c
  1785  002274  0E00               	movlw	0
  1786  002276  6E3A               	movwf	___fladd@a+1,c
  1787  002278  0E80               	movlw	128
  1788  00227A  6E3B               	movwf	___fladd@a+2,c
  1789  00227C  0E3F               	movlw	63
  1790  00227E  6E3C               	movwf	___fladd@a+3,c
  1791  002280  EC78  F020         	call	___fladd	;wreg free
  1792  002284  0060  F0D4  F0CD   	movff	?___fladd,_R0
  1793  00228A  0060  F0D8  F0CE   	movff	?___fladd+1,_R0+1
  1794  002290  0060  F0DC  F0CF   	movff	?___fladd+2,_R0+2
  1795  002296  0060  F0E0  F0D0   	movff	?___fladd+3,_R0+3
  1796                           
  1797                           ;RoboticArm.c: 256: rad_calculation_manual();
  1798  00229C  ECB8  F026         	call	_rad_calculation_manual	;wreg free
  1799                           
  1800                           ;RoboticArm.c: 257: steps_calculation();
  1801  0022A0  EC62  F029         	call	_steps_calculation	;wreg free
  1802                           
  1803                           ;RoboticArm.c: 258: real_rad_calculation();
  1804  0022A4  ECFB  F02D         	call	_real_rad_calculation	;wreg free
  1805                           
  1806                           ;RoboticArm.c: 260: R0++;
  1807  0022A8  0060  F334  F035   	movff	_R0,___fladd@b
  1808  0022AE  0060  F338  F036   	movff	_R0+1,___fladd@b+1
  1809  0022B4  0060  F33C  F037   	movff	_R0+2,___fladd@b+2
  1810  0022BA  0060  F340  F038   	movff	_R0+3,___fladd@b+3
  1811  0022C0  0E00               	movlw	0
  1812  0022C2  6E39               	movwf	___fladd@a,c
  1813  0022C4  0E00               	movlw	0
  1814  0022C6  6E3A               	movwf	___fladd@a+1,c
  1815  0022C8  0E80               	movlw	128
  1816  0022CA  6E3B               	movwf	___fladd@a+2,c
  1817  0022CC  0E3F               	movlw	63
  1818  0022CE  6E3C               	movwf	___fladd@a+3,c
  1819  0022D0  EC78  F020         	call	___fladd	;wreg free
  1820  0022D4  0060  F0D4  F0CD   	movff	?___fladd,_R0
  1821  0022DA  0060  F0D8  F0CE   	movff	?___fladd+1,_R0+1
  1822  0022E0  0060  F0DC  F0CF   	movff	?___fladd+2,_R0+2
  1823  0022E6  0060  F0E0  F0D0   	movff	?___fladd+3,_R0+3
  1824                           
  1825                           ;RoboticArm.c: 261: next_rad_calculation_manual();
  1826  0022EC  EC0D  F028         	call	_next_rad_calculation_manual	;wreg free
  1827                           
  1828                           ;RoboticArm.c: 262: next_steps_calculation();
  1829  0022F0  EC59  F02A         	call	_next_steps_calculation	;wreg free
  1830                           
  1831                           ;RoboticArm.c: 264: SEG_start_check ();
  1832  0022F4  EC83  F032         	call	_SEG_start_check	;wreg free
  1833                           
  1834                           ;RoboticArm.c: 265: elbow_shoulder_state = 1;
  1835  0022F8  0E01               	movlw	1
  1836  0022FA  0100               	movlb	0	; () banked
  1837  0022FC  6FB8               	movwf	main@elbow_shoulder_state& (0+255),b
  1838  0022FE                     l1018:
  1839                           
  1840                           ; BSR set to: 0
  1841                           ;RoboticArm.c: 266: }
  1842                           ;RoboticArm.c: 268: if(((RX_PORTB & 0b00010000)==0))
  1843                           
  1844                           ; BSR set to: 0
  1845  0022FE  B9FD               	btfsc	_RX_PORTB& (0+255),4,b
  1846  002300  D054               	goto	l1019
  1847                           
  1848                           ; BSR set to: 0
  1849                           ;RoboticArm.c: 269: {
  1850                           ;RoboticArm.c: 270: R0--;
  1851  002302  0060  F334  F08F   	movff	_R0,___flsub@b
  1852  002308  0060  F338  F090   	movff	_R0+1,___flsub@b+1
  1853  00230E  0060  F33C  F091   	movff	_R0+2,___flsub@b+2
  1854  002314  0060  F340  F092   	movff	_R0+3,___flsub@b+3
  1855  00231A  0E00               	movlw	0
  1856  00231C  6F93               	movwf	___flsub@a& (0+255),b
  1857  00231E  0E00               	movlw	0
  1858  002320  6F94               	movwf	(___flsub@a+1)& (0+255),b
  1859  002322  0E80               	movlw	128
  1860  002324  6F95               	movwf	(___flsub@a+2)& (0+255),b
  1861  002326  0E3F               	movlw	63
  1862  002328  6F96               	movwf	(___flsub@a+3)& (0+255),b
  1863  00232A  EC8F  F031         	call	___flsub	;wreg free
  1864  00232E  0060  F23C  F0CD   	movff	?___flsub,_R0
  1865  002334  0060  F240  F0CE   	movff	?___flsub+1,_R0+1
  1866  00233A  0060  F244  F0CF   	movff	?___flsub+2,_R0+2
  1867  002340  0060  F248  F0D0   	movff	?___flsub+3,_R0+3
  1868                           
  1869                           ;RoboticArm.c: 271: rad_calculation_manual();
  1870  002346  ECB8  F026         	call	_rad_calculation_manual	;wreg free
  1871                           
  1872                           ;RoboticArm.c: 272: steps_calculation();
  1873  00234A  EC62  F029         	call	_steps_calculation	;wreg free
  1874                           
  1875                           ;RoboticArm.c: 273: real_rad_calculation();
  1876  00234E  ECFB  F02D         	call	_real_rad_calculation	;wreg free
  1877                           
  1878                           ;RoboticArm.c: 275: R0--;
  1879  002352  0060  F334  F08F   	movff	_R0,___flsub@b
  1880  002358  0060  F338  F090   	movff	_R0+1,___flsub@b+1
  1881  00235E  0060  F33C  F091   	movff	_R0+2,___flsub@b+2
  1882  002364  0060  F340  F092   	movff	_R0+3,___flsub@b+3
  1883  00236A  0E00               	movlw	0
  1884  00236C  0100               	movlb	0	; () banked
  1885  00236E  6F93               	movwf	___flsub@a& (0+255),b
  1886  002370  0E00               	movlw	0
  1887  002372  6F94               	movwf	(___flsub@a+1)& (0+255),b
  1888  002374  0E80               	movlw	128
  1889  002376  6F95               	movwf	(___flsub@a+2)& (0+255),b
  1890  002378  0E3F               	movlw	63
  1891  00237A  6F96               	movwf	(___flsub@a+3)& (0+255),b
  1892  00237C  EC8F  F031         	call	___flsub	;wreg free
  1893  002380  0060  F23C  F0CD   	movff	?___flsub,_R0
  1894  002386  0060  F240  F0CE   	movff	?___flsub+1,_R0+1
  1895  00238C  0060  F244  F0CF   	movff	?___flsub+2,_R0+2
  1896  002392  0060  F248  F0D0   	movff	?___flsub+3,_R0+3
  1897                           
  1898                           ;RoboticArm.c: 276: next_rad_calculation_manual();
  1899  002398  EC0D  F028         	call	_next_rad_calculation_manual	;wreg free
  1900                           
  1901                           ;RoboticArm.c: 277: next_steps_calculation();
  1902  00239C  EC59  F02A         	call	_next_steps_calculation	;wreg free
  1903                           
  1904                           ;RoboticArm.c: 279: SEG_start_check ();
  1905  0023A0  EC83  F032         	call	_SEG_start_check	;wreg free
  1906                           
  1907                           ;RoboticArm.c: 280: elbow_shoulder_state = 2;
  1908  0023A4  0E02               	movlw	2
  1909  0023A6  0100               	movlb	0	; () banked
  1910  0023A8  6FB8               	movwf	main@elbow_shoulder_state& (0+255),b
  1911  0023AA                     l1019:
  1912                           
  1913                           ; BSR set to: 0
  1914                           ;RoboticArm.c: 281: }
  1915                           ;RoboticArm.c: 283: if(((RX_PORTA & 0b00010000)==0))
  1916                           
  1917                           ; BSR set to: 0
  1918  0023AA  B9FE               	btfsc	_RX_PORTA& (0+255),4,b
  1919  0023AC  D053               	goto	l1020
  1920                           
  1921                           ; BSR set to: 0
  1922                           ;RoboticArm.c: 284: {
  1923                           ;RoboticArm.c: 285: Z0++;
  1924  0023AE  0060  F324  F035   	movff	_Z0,___fladd@b
  1925  0023B4  0060  F328  F036   	movff	_Z0+1,___fladd@b+1
  1926  0023BA  0060  F32C  F037   	movff	_Z0+2,___fladd@b+2
  1927  0023C0  0060  F330  F038   	movff	_Z0+3,___fladd@b+3
  1928  0023C6  0E00               	movlw	0
  1929  0023C8  6E39               	movwf	___fladd@a,c
  1930  0023CA  0E00               	movlw	0
  1931  0023CC  6E3A               	movwf	___fladd@a+1,c
  1932  0023CE  0E80               	movlw	128
  1933  0023D0  6E3B               	movwf	___fladd@a+2,c
  1934  0023D2  0E3F               	movlw	63
  1935  0023D4  6E3C               	movwf	___fladd@a+3,c
  1936  0023D6  EC78  F020         	call	___fladd	;wreg free
  1937  0023DA  0060  F0D4  F0C9   	movff	?___fladd,_Z0
  1938  0023E0  0060  F0D8  F0CA   	movff	?___fladd+1,_Z0+1
  1939  0023E6  0060  F0DC  F0CB   	movff	?___fladd+2,_Z0+2
  1940  0023EC  0060  F0E0  F0CC   	movff	?___fladd+3,_Z0+3
  1941                           
  1942                           ;RoboticArm.c: 286: rad_calculation_manual();
  1943  0023F2  ECB8  F026         	call	_rad_calculation_manual	;wreg free
  1944                           
  1945                           ;RoboticArm.c: 287: steps_calculation();
  1946  0023F6  EC62  F029         	call	_steps_calculation	;wreg free
  1947                           
  1948                           ;RoboticArm.c: 288: real_rad_calculation();
  1949  0023FA  ECFB  F02D         	call	_real_rad_calculation	;wreg free
  1950                           
  1951                           ;RoboticArm.c: 290: Z0++;
  1952  0023FE  0060  F324  F035   	movff	_Z0,___fladd@b
  1953  002404  0060  F328  F036   	movff	_Z0+1,___fladd@b+1
  1954  00240A  0060  F32C  F037   	movff	_Z0+2,___fladd@b+2
  1955  002410  0060  F330  F038   	movff	_Z0+3,___fladd@b+3
  1956  002416  0E00               	movlw	0
  1957  002418  6E39               	movwf	___fladd@a,c
  1958  00241A  0E00               	movlw	0
  1959  00241C  6E3A               	movwf	___fladd@a+1,c
  1960  00241E  0E80               	movlw	128
  1961  002420  6E3B               	movwf	___fladd@a+2,c
  1962  002422  0E3F               	movlw	63
  1963  002424  6E3C               	movwf	___fladd@a+3,c
  1964  002426  EC78  F020         	call	___fladd	;wreg free
  1965  00242A  0060  F0D4  F0C9   	movff	?___fladd,_Z0
  1966  002430  0060  F0D8  F0CA   	movff	?___fladd+1,_Z0+1
  1967  002436  0060  F0DC  F0CB   	movff	?___fladd+2,_Z0+2
  1968  00243C  0060  F0E0  F0CC   	movff	?___fladd+3,_Z0+3
  1969                           
  1970                           ;RoboticArm.c: 291: next_rad_calculation_manual();
  1971  002442  EC0D  F028         	call	_next_rad_calculation_manual	;wreg free
  1972                           
  1973                           ;RoboticArm.c: 292: next_steps_calculation();
  1974  002446  EC59  F02A         	call	_next_steps_calculation	;wreg free
  1975                           
  1976                           ;RoboticArm.c: 294: SEG_start_check();
  1977  00244A  EC83  F032         	call	_SEG_start_check	;wreg free
  1978                           
  1979                           ;RoboticArm.c: 295: elbow_shoulder_state = 3;
  1980  00244E  0E03               	movlw	3
  1981  002450  0100               	movlb	0	; () banked
  1982  002452  6FB8               	movwf	main@elbow_shoulder_state& (0+255),b
  1983  002454                     l1020:
  1984                           
  1985                           ; BSR set to: 0
  1986                           ;RoboticArm.c: 296: }
  1987                           ;RoboticArm.c: 298: if(((RX_PORTA & 0b00000010)==0))
  1988                           
  1989                           ; BSR set to: 0
  1990  002454  B3FE               	btfsc	_RX_PORTA& (0+255),1,b
  1991  002456  EFF3  F016         	goto	l1067
  1992                           
  1993                           ; BSR set to: 0
  1994                           ;RoboticArm.c: 299: {
  1995                           ;RoboticArm.c: 300: Z0--;
  1996  00245A  0060  F324  F08F   	movff	_Z0,___flsub@b
  1997  002460  0060  F328  F090   	movff	_Z0+1,___flsub@b+1
  1998  002466  0060  F32C  F091   	movff	_Z0+2,___flsub@b+2
  1999  00246C  0060  F330  F092   	movff	_Z0+3,___flsub@b+3
  2000  002472  0E00               	movlw	0
  2001  002474  6F93               	movwf	___flsub@a& (0+255),b
  2002  002476  0E00               	movlw	0
  2003  002478  6F94               	movwf	(___flsub@a+1)& (0+255),b
  2004  00247A  0E80               	movlw	128
  2005  00247C  6F95               	movwf	(___flsub@a+2)& (0+255),b
  2006  00247E  0E3F               	movlw	63
  2007  002480  6F96               	movwf	(___flsub@a+3)& (0+255),b
  2008  002482  EC8F  F031         	call	___flsub	;wreg free
  2009  002486  0060  F23C  F0C9   	movff	?___flsub,_Z0
  2010  00248C  0060  F240  F0CA   	movff	?___flsub+1,_Z0+1
  2011  002492  0060  F244  F0CB   	movff	?___flsub+2,_Z0+2
  2012  002498  0060  F248  F0CC   	movff	?___flsub+3,_Z0+3
  2013                           
  2014                           ;RoboticArm.c: 301: rad_calculation_manual();
  2015  00249E  ECB8  F026         	call	_rad_calculation_manual	;wreg free
  2016                           
  2017                           ;RoboticArm.c: 302: steps_calculation();
  2018  0024A2  EC62  F029         	call	_steps_calculation	;wreg free
  2019                           
  2020                           ;RoboticArm.c: 303: real_rad_calculation();
  2021  0024A6  ECFB  F02D         	call	_real_rad_calculation	;wreg free
  2022                           
  2023                           ;RoboticArm.c: 305: Z0--;
  2024  0024AA  0060  F324  F08F   	movff	_Z0,___flsub@b
  2025  0024B0  0060  F328  F090   	movff	_Z0+1,___flsub@b+1
  2026  0024B6  0060  F32C  F091   	movff	_Z0+2,___flsub@b+2
  2027  0024BC  0060  F330  F092   	movff	_Z0+3,___flsub@b+3
  2028  0024C2  0E00               	movlw	0
  2029  0024C4  0100               	movlb	0	; () banked
  2030  0024C6  6F93               	movwf	___flsub@a& (0+255),b
  2031  0024C8  0E00               	movlw	0
  2032  0024CA  6F94               	movwf	(___flsub@a+1)& (0+255),b
  2033  0024CC  0E80               	movlw	128
  2034  0024CE  6F95               	movwf	(___flsub@a+2)& (0+255),b
  2035  0024D0  0E3F               	movlw	63
  2036  0024D2  6F96               	movwf	(___flsub@a+3)& (0+255),b
  2037  0024D4  EC8F  F031         	call	___flsub	;wreg free
  2038  0024D8  0060  F23C  F0C9   	movff	?___flsub,_Z0
  2039  0024DE  0060  F240  F0CA   	movff	?___flsub+1,_Z0+1
  2040  0024E4  0060  F244  F0CB   	movff	?___flsub+2,_Z0+2
  2041  0024EA  0060  F248  F0CC   	movff	?___flsub+3,_Z0+3
  2042                           
  2043                           ;RoboticArm.c: 306: next_rad_calculation_manual();
  2044  0024F0  EC0D  F028         	call	_next_rad_calculation_manual	;wreg free
  2045                           
  2046                           ;RoboticArm.c: 307: next_steps_calculation();
  2047  0024F4  EC59  F02A         	call	_next_steps_calculation	;wreg free
  2048                           
  2049                           ;RoboticArm.c: 309: SEG_start_check();
  2050  0024F8  EC83  F032         	call	_SEG_start_check	;wreg free
  2051                           
  2052                           ;RoboticArm.c: 310: elbow_shoulder_state = 4;
  2053  0024FC  0E04               	movlw	4
  2054  0024FE  D02E               	goto	L1
  2055  002500                     l1023:
  2056                           
  2057                           ; BSR set to: 0
  2058                           ;RoboticArm.c: 315: if((T1CONbits.ON==0) && (T3CONbits.ON==0) && (T5CONbits.ON==0))
  2059  002500  013F               	movlb	63	; () banked
  2060  002502  A1B2               	btfss	178,0,b	;volatile
  2061                           
  2062                           ; BSR set to: 63
  2063  002504  B1A6               	btfsc	166,0,b	;volatile
  2064  002506  EFF3  F016         	goto	l1067
  2065                           
  2066                           ; BSR set to: 63
  2067  00250A  B19A               	btfsc	154,0,b	;volatile
  2068  00250C  EFF3  F016         	goto	l1067
  2069                           
  2070                           ; BSR set to: 63
  2071                           ;RoboticArm.c: 316: {
  2072                           ;RoboticArm.c: 317: if(((RX_PORTB & 0b00000010)!=0))
  2073  002510  0100               	movlb	0	; () banked
  2074  002512  A3FD               	btfss	_RX_PORTB& (0+255),1,b
  2075  002514  D025               	goto	l1025
  2076                           
  2077                           ; BSR set to: 0
  2078                           ;RoboticArm.c: 318: {
  2079                           ;RoboticArm.c: 319: R0--;
  2080  002516  0060  F334  F08F   	movff	_R0,___flsub@b
  2081  00251C  0060  F338  F090   	movff	_R0+1,___flsub@b+1
  2082  002522  0060  F33C  F091   	movff	_R0+2,___flsub@b+2
  2083  002528  0060  F340  F092   	movff	_R0+3,___flsub@b+3
  2084  00252E  0E00               	movlw	0
  2085  002530  6F93               	movwf	___flsub@a& (0+255),b
  2086  002532  0E00               	movlw	0
  2087  002534  6F94               	movwf	(___flsub@a+1)& (0+255),b
  2088  002536  0E80               	movlw	128
  2089  002538  6F95               	movwf	(___flsub@a+2)& (0+255),b
  2090  00253A  0E3F               	movlw	63
  2091  00253C  6F96               	movwf	(___flsub@a+3)& (0+255),b
  2092  00253E  EC8F  F031         	call	___flsub	;wreg free
  2093  002542  0060  F23C  F0CD   	movff	?___flsub,_R0
  2094  002548  0060  F240  F0CE   	movff	?___flsub+1,_R0+1
  2095  00254E  0060  F244  F0CF   	movff	?___flsub+2,_R0+2
  2096  002554  0060  F248  F0D0   	movff	?___flsub+3,_R0+3
  2097  00255A  D065               	goto	l7016
  2098  00255C                     L1:
  2099  00255C  0100               	movlb	0	; () banked
  2100  00255E  D15D               	goto	L8
  2101  002560                     l1025:
  2102                           
  2103                           ; BSR set to: 0
  2104                           ;RoboticArm.c: 322: else
  2105                           ;RoboticArm.c: 323: {
  2106                           ;RoboticArm.c: 324: values_update();
  2107                           
  2108                           ; BSR set to: 0
  2109  002560  ECA4  F032         	call	_values_update	;wreg free
  2110                           
  2111                           ;RoboticArm.c: 325: SEG_start_check();
  2112  002564  EC83  F032         	call	_SEG_start_check	;wreg free
  2113                           
  2114                           ;RoboticArm.c: 326: real_rad_calculation();
  2115  002568  ECFB  F02D         	call	_real_rad_calculation	;wreg free
  2116                           
  2117                           ;RoboticArm.c: 327: R0++;
  2118  00256C  0060  F334  F035   	movff	_R0,___fladd@b
  2119  002572  0060  F338  F036   	movff	_R0+1,___fladd@b+1
  2120  002578  0060  F33C  F037   	movff	_R0+2,___fladd@b+2
  2121  00257E  0060  F340  F038   	movff	_R0+3,___fladd@b+3
  2122  002584  0E00               	movlw	0
  2123  002586  6E39               	movwf	___fladd@a,c
  2124  002588  0E00               	movlw	0
  2125  00258A  6E3A               	movwf	___fladd@a+1,c
  2126  00258C  0E80               	movlw	128
  2127  00258E  6E3B               	movwf	___fladd@a+2,c
  2128  002590  0E3F               	movlw	63
  2129  002592  6E3C               	movwf	___fladd@a+3,c
  2130  002594  EC78  F020         	call	___fladd	;wreg free
  2131  002598  0060  F0D4  F0CD   	movff	?___fladd,_R0
  2132  00259E  0060  F0D8  F0CE   	movff	?___fladd+1,_R0+1
  2133  0025A4  0060  F0DC  F0CF   	movff	?___fladd+2,_R0+2
  2134  0025AA  0060  F0E0  F0D0   	movff	?___fladd+3,_R0+3
  2135                           
  2136                           ;RoboticArm.c: 328: next_rad_calculation_manual();
  2137  0025B0  EC0D  F028         	call	_next_rad_calculation_manual	;wreg free
  2138                           
  2139                           ;RoboticArm.c: 329: next_steps_calculation();
  2140  0025B4  EC59  F02A         	call	_next_steps_calculation	;wreg free
  2141                           
  2142                           ;RoboticArm.c: 331: if(((RX_PORTA & 0b00010000)==0)) elbow_shoulder_state = 5;
  2143  0025B8  0100               	movlb	0	; () banked
  2144  0025BA  B9FE               	btfsc	_RX_PORTA& (0+255),4,b
  2145  0025BC  D002               	goto	l1027
  2146                           
  2147                           ; BSR set to: 0
  2148  0025BE  0E05               	movlw	5
  2149  0025C0  6FB8               	movwf	main@elbow_shoulder_state& (0+255),b
  2150  0025C2                     l1027:
  2151                           
  2152                           ; BSR set to: 0
  2153                           ;RoboticArm.c: 332: if(((RX_PORTA & 0b00000010)==0)) elbow_shoulder_state = 6;
  2154                           
  2155                           ; BSR set to: 0
  2156  0025C2  B3FE               	btfsc	_RX_PORTA& (0+255),1,b
  2157  0025C4  EFF3  F016         	goto	l1067
  2158                           
  2159                           ; BSR set to: 0
  2160  0025C8  0E06               	movlw	6
  2161  0025CA  D127               	goto	L8
  2162  0025CC                     l1029:
  2163                           
  2164                           ; BSR set to: 0
  2165                           ;RoboticArm.c: 338: if((T1CONbits.ON==0) && (T3CONbits.ON==0) && (T5CONbits.ON==0))
  2166  0025CC  013F               	movlb	63	; () banked
  2167  0025CE  A1B2               	btfss	178,0,b	;volatile
  2168                           
  2169                           ; BSR set to: 63
  2170  0025D0  B1A6               	btfsc	166,0,b	;volatile
  2171  0025D2  EFF3  F016         	goto	l1067
  2172                           
  2173                           ; BSR set to: 63
  2174  0025D6  B19A               	btfsc	154,0,b	;volatile
  2175  0025D8  EFF3  F016         	goto	l1067
  2176                           
  2177                           ; BSR set to: 63
  2178                           ;RoboticArm.c: 339: {
  2179                           ;RoboticArm.c: 340: if(((RX_PORTB & 0b00010000)!=0))
  2180  0025DC  0100               	movlb	0	; () banked
  2181  0025DE  A9FD               	btfss	_RX_PORTB& (0+255),4,b
  2182  0025E0  D024               	goto	l1031
  2183                           
  2184                           ; BSR set to: 0
  2185                           ;RoboticArm.c: 341: {
  2186                           ;RoboticArm.c: 342: R0++;
  2187  0025E2  0060  F334  F035   	movff	_R0,___fladd@b
  2188  0025E8  0060  F338  F036   	movff	_R0+1,___fladd@b+1
  2189  0025EE  0060  F33C  F037   	movff	_R0+2,___fladd@b+2
  2190  0025F4  0060  F340  F038   	movff	_R0+3,___fladd@b+3
  2191  0025FA  0E00               	movlw	0
  2192  0025FC  6E39               	movwf	___fladd@a,c
  2193  0025FE  0E00               	movlw	0
  2194  002600  6E3A               	movwf	___fladd@a+1,c
  2195  002602  0E80               	movlw	128
  2196  002604  6E3B               	movwf	___fladd@a+2,c
  2197  002606  0E3F               	movlw	63
  2198  002608  6E3C               	movwf	___fladd@a+3,c
  2199  00260A  EC78  F020         	call	___fladd	;wreg free
  2200  00260E  0060  F0D4  F0CD   	movff	?___fladd,_R0
  2201  002614  0060  F0D8  F0CE   	movff	?___fladd+1,_R0+1
  2202  00261A  0060  F0DC  F0CF   	movff	?___fladd+2,_R0+2
  2203  002620  0060  F0E0  F0D0   	movff	?___fladd+3,_R0+3
  2204  002626                     l7016:
  2205                           
  2206                           ;RoboticArm.c: 343: elbow_shoulder_state = 0;
  2207  002626  0E00               	movlw	0
  2208  002628  D799               	goto	L1
  2209  00262A                     l1031:
  2210                           
  2211                           ; BSR set to: 0
  2212                           ;RoboticArm.c: 345: else
  2213                           ;RoboticArm.c: 346: {
  2214                           ;RoboticArm.c: 347: values_update();
  2215                           
  2216                           ; BSR set to: 0
  2217  00262A  ECA4  F032         	call	_values_update	;wreg free
  2218                           
  2219                           ;RoboticArm.c: 348: SEG_start_check();
  2220  00262E  EC83  F032         	call	_SEG_start_check	;wreg free
  2221                           
  2222                           ;RoboticArm.c: 349: real_rad_calculation();
  2223  002632  ECFB  F02D         	call	_real_rad_calculation	;wreg free
  2224                           
  2225                           ;RoboticArm.c: 350: R0--;
  2226  002636  0060  F334  F08F   	movff	_R0,___flsub@b
  2227  00263C  0060  F338  F090   	movff	_R0+1,___flsub@b+1
  2228  002642  0060  F33C  F091   	movff	_R0+2,___flsub@b+2
  2229  002648  0060  F340  F092   	movff	_R0+3,___flsub@b+3
  2230  00264E  0E00               	movlw	0
  2231  002650  0100               	movlb	0	; () banked
  2232  002652  6F93               	movwf	___flsub@a& (0+255),b
  2233  002654  0E00               	movlw	0
  2234  002656  6F94               	movwf	(___flsub@a+1)& (0+255),b
  2235  002658  0E80               	movlw	128
  2236  00265A  6F95               	movwf	(___flsub@a+2)& (0+255),b
  2237  00265C  0E3F               	movlw	63
  2238  00265E  6F96               	movwf	(___flsub@a+3)& (0+255),b
  2239  002660  EC8F  F031         	call	___flsub	;wreg free
  2240  002664  0060  F23C  F0CD   	movff	?___flsub,_R0
  2241  00266A  0060  F240  F0CE   	movff	?___flsub+1,_R0+1
  2242  002670  0060  F244  F0CF   	movff	?___flsub+2,_R0+2
  2243  002676  0060  F248  F0D0   	movff	?___flsub+3,_R0+3
  2244                           
  2245                           ;RoboticArm.c: 351: next_rad_calculation_manual();
  2246  00267C  EC0D  F028         	call	_next_rad_calculation_manual	;wreg free
  2247                           
  2248                           ;RoboticArm.c: 352: next_steps_calculation();
  2249  002680  EC59  F02A         	call	_next_steps_calculation	;wreg free
  2250                           
  2251                           ;RoboticArm.c: 354: if(((RX_PORTA & 0b00010000)==0)) elbow_shoulder_state = 7;
  2252  002684  0100               	movlb	0	; () banked
  2253  002686  B9FE               	btfsc	_RX_PORTA& (0+255),4,b
  2254  002688  D002               	goto	l1033
  2255                           
  2256                           ; BSR set to: 0
  2257  00268A  0E07               	movlw	7
  2258  00268C  6FB8               	movwf	main@elbow_shoulder_state& (0+255),b
  2259  00268E                     l1033:
  2260                           
  2261                           ; BSR set to: 0
  2262                           ;RoboticArm.c: 355: if(((RX_PORTA & 0b00000010)==0)) elbow_shoulder_state = 8;
  2263                           
  2264                           ; BSR set to: 0
  2265  00268E  B3FE               	btfsc	_RX_PORTA& (0+255),1,b
  2266  002690  D3AA               	goto	l1067
  2267                           
  2268                           ; BSR set to: 0
  2269  002692  0E08               	movlw	8
  2270  002694  D0C2               	goto	L8
  2271  002696                     l1035:
  2272                           
  2273                           ; BSR set to: 0
  2274                           ;RoboticArm.c: 361: if((T1CONbits.ON==0) && (T3CONbits.ON==0) && (T5CONbits.ON==0))
  2275  002696  013F               	movlb	63	; () banked
  2276  002698  A1B2               	btfss	178,0,b	;volatile
  2277                           
  2278                           ; BSR set to: 63
  2279  00269A  B1A6               	btfsc	166,0,b	;volatile
  2280  00269C  D3A4               	goto	l1067
  2281                           
  2282                           ; BSR set to: 63
  2283  00269E  B19A               	btfsc	154,0,b	;volatile
  2284  0026A0  D3A2               	goto	l1067
  2285                           
  2286                           ; BSR set to: 63
  2287                           ;RoboticArm.c: 362: {
  2288                           ;RoboticArm.c: 363: if(((RX_PORTA & 0b00010000)!=0))
  2289  0026A2  0100               	movlb	0	; () banked
  2290  0026A4  A9FE               	btfss	_RX_PORTA& (0+255),4,b
  2291  0026A6  D023               	goto	l1037
  2292                           
  2293                           ; BSR set to: 0
  2294                           ;RoboticArm.c: 364: {
  2295                           ;RoboticArm.c: 365: Z0--;
  2296  0026A8  0060  F324  F08F   	movff	_Z0,___flsub@b
  2297  0026AE  0060  F328  F090   	movff	_Z0+1,___flsub@b+1
  2298  0026B4  0060  F32C  F091   	movff	_Z0+2,___flsub@b+2
  2299  0026BA  0060  F330  F092   	movff	_Z0+3,___flsub@b+3
  2300  0026C0  0E00               	movlw	0
  2301  0026C2  6F93               	movwf	___flsub@a& (0+255),b
  2302  0026C4  0E00               	movlw	0
  2303  0026C6  6F94               	movwf	(___flsub@a+1)& (0+255),b
  2304  0026C8  0E80               	movlw	128
  2305  0026CA  6F95               	movwf	(___flsub@a+2)& (0+255),b
  2306  0026CC  0E3F               	movlw	63
  2307  0026CE  6F96               	movwf	(___flsub@a+3)& (0+255),b
  2308  0026D0  EC8F  F031         	call	___flsub	;wreg free
  2309  0026D4  0060  F23C  F0C9   	movff	?___flsub,_Z0
  2310  0026DA  0060  F240  F0CA   	movff	?___flsub+1,_Z0+1
  2311  0026E0  0060  F244  F0CB   	movff	?___flsub+2,_Z0+2
  2312  0026E6  0060  F248  F0CC   	movff	?___flsub+3,_Z0+3
  2313  0026EC  D79C               	goto	l7016
  2314  0026EE                     l1037:
  2315                           
  2316                           ; BSR set to: 0
  2317                           ;RoboticArm.c: 368: else
  2318                           ;RoboticArm.c: 369: {
  2319                           ;RoboticArm.c: 370: values_update();
  2320                           
  2321                           ; BSR set to: 0
  2322  0026EE  ECA4  F032         	call	_values_update	;wreg free
  2323                           
  2324                           ;RoboticArm.c: 371: SEG_start_check();
  2325  0026F2  EC83  F032         	call	_SEG_start_check	;wreg free
  2326                           
  2327                           ;RoboticArm.c: 372: real_rad_calculation();
  2328  0026F6  ECFB  F02D         	call	_real_rad_calculation	;wreg free
  2329                           
  2330                           ;RoboticArm.c: 373: Z0++;
  2331  0026FA  0060  F324  F035   	movff	_Z0,___fladd@b
  2332  002700  0060  F328  F036   	movff	_Z0+1,___fladd@b+1
  2333  002706  0060  F32C  F037   	movff	_Z0+2,___fladd@b+2
  2334  00270C  0060  F330  F038   	movff	_Z0+3,___fladd@b+3
  2335  002712  0E00               	movlw	0
  2336  002714  6E39               	movwf	___fladd@a,c
  2337  002716  0E00               	movlw	0
  2338  002718  6E3A               	movwf	___fladd@a+1,c
  2339  00271A  0E80               	movlw	128
  2340  00271C  6E3B               	movwf	___fladd@a+2,c
  2341  00271E  0E3F               	movlw	63
  2342  002720  6E3C               	movwf	___fladd@a+3,c
  2343  002722  EC78  F020         	call	___fladd	;wreg free
  2344  002726  0060  F0D4  F0C9   	movff	?___fladd,_Z0
  2345  00272C  0060  F0D8  F0CA   	movff	?___fladd+1,_Z0+1
  2346  002732  0060  F0DC  F0CB   	movff	?___fladd+2,_Z0+2
  2347  002738  0060  F0E0  F0CC   	movff	?___fladd+3,_Z0+3
  2348                           
  2349                           ;RoboticArm.c: 374: next_rad_calculation_manual();
  2350  00273E  EC0D  F028         	call	_next_rad_calculation_manual	;wreg free
  2351                           
  2352                           ;RoboticArm.c: 375: next_steps_calculation();
  2353  002742  EC59  F02A         	call	_next_steps_calculation	;wreg free
  2354                           
  2355                           ;RoboticArm.c: 377: if(((RX_PORTB & 0b00000010)==0)) elbow_shoulder_state = 5;
  2356  002746  0100               	movlb	0	; () banked
  2357  002748  B3FD               	btfsc	_RX_PORTB& (0+255),1,b
  2358  00274A  D002               	goto	l1039
  2359                           
  2360                           ; BSR set to: 0
  2361  00274C  0E05               	movlw	5
  2362  00274E  6FB8               	movwf	main@elbow_shoulder_state& (0+255),b
  2363  002750                     l1039:
  2364                           
  2365                           ; BSR set to: 0
  2366                           ;RoboticArm.c: 378: if(((RX_PORTB & 0b00010000)==0)) elbow_shoulder_state = 7;
  2367                           
  2368                           ; BSR set to: 0
  2369  002750  B9FD               	btfsc	_RX_PORTB& (0+255),4,b
  2370  002752  D349               	goto	l1067
  2371                           
  2372                           ; BSR set to: 0
  2373  002754  0E07               	movlw	7
  2374  002756  D061               	goto	L8
  2375  002758                     l1041:
  2376                           
  2377                           ; BSR set to: 0
  2378                           ;RoboticArm.c: 384: if((T1CONbits.ON==0) && (T3CONbits.ON==0) && (T5CONbits.ON==0))
  2379  002758  013F               	movlb	63	; () banked
  2380  00275A  A1B2               	btfss	178,0,b	;volatile
  2381                           
  2382                           ; BSR set to: 63
  2383  00275C  B1A6               	btfsc	166,0,b	;volatile
  2384  00275E  D343               	goto	l1067
  2385                           
  2386                           ; BSR set to: 63
  2387  002760  B19A               	btfsc	154,0,b	;volatile
  2388  002762  D341               	goto	l1067
  2389                           
  2390                           ; BSR set to: 63
  2391                           ;RoboticArm.c: 385: {
  2392                           ;RoboticArm.c: 386: if(((RX_PORTA & 0b00000010)!=0))
  2393  002764  0100               	movlb	0	; () banked
  2394  002766  A3FE               	btfss	_RX_PORTA& (0+255),1,b
  2395  002768  D023               	goto	l1043
  2396                           
  2397                           ; BSR set to: 0
  2398                           ;RoboticArm.c: 387: {
  2399                           ;RoboticArm.c: 388: Z0++;
  2400  00276A  0060  F324  F035   	movff	_Z0,___fladd@b
  2401  002770  0060  F328  F036   	movff	_Z0+1,___fladd@b+1
  2402  002776  0060  F32C  F037   	movff	_Z0+2,___fladd@b+2
  2403  00277C  0060  F330  F038   	movff	_Z0+3,___fladd@b+3
  2404  002782  0E00               	movlw	0
  2405  002784  6E39               	movwf	___fladd@a,c
  2406  002786  0E00               	movlw	0
  2407  002788  6E3A               	movwf	___fladd@a+1,c
  2408  00278A  0E80               	movlw	128
  2409  00278C  6E3B               	movwf	___fladd@a+2,c
  2410  00278E  0E3F               	movlw	63
  2411  002790  6E3C               	movwf	___fladd@a+3,c
  2412  002792  EC78  F020         	call	___fladd	;wreg free
  2413  002796  0060  F0D4  F0C9   	movff	?___fladd,_Z0
  2414  00279C  0060  F0D8  F0CA   	movff	?___fladd+1,_Z0+1
  2415  0027A2  0060  F0DC  F0CB   	movff	?___fladd+2,_Z0+2
  2416  0027A8  0060  F0E0  F0CC   	movff	?___fladd+3,_Z0+3
  2417  0027AE  D73B               	goto	l7016
  2418  0027B0                     l1043:
  2419                           
  2420                           ; BSR set to: 0
  2421                           ;RoboticArm.c: 391: else
  2422                           ;RoboticArm.c: 392: {
  2423                           ;RoboticArm.c: 393: values_update();
  2424                           
  2425                           ; BSR set to: 0
  2426  0027B0  ECA4  F032         	call	_values_update	;wreg free
  2427                           
  2428                           ;RoboticArm.c: 394: SEG_start_check();
  2429  0027B4  EC83  F032         	call	_SEG_start_check	;wreg free
  2430                           
  2431                           ;RoboticArm.c: 395: real_rad_calculation();
  2432  0027B8  ECFB  F02D         	call	_real_rad_calculation	;wreg free
  2433                           
  2434                           ;RoboticArm.c: 396: Z0--;
  2435  0027BC  0060  F324  F08F   	movff	_Z0,___flsub@b
  2436  0027C2  0060  F328  F090   	movff	_Z0+1,___flsub@b+1
  2437  0027C8  0060  F32C  F091   	movff	_Z0+2,___flsub@b+2
  2438  0027CE  0060  F330  F092   	movff	_Z0+3,___flsub@b+3
  2439  0027D4  0E00               	movlw	0
  2440  0027D6  0100               	movlb	0	; () banked
  2441  0027D8  6F93               	movwf	___flsub@a& (0+255),b
  2442  0027DA  0E00               	movlw	0
  2443  0027DC  6F94               	movwf	(___flsub@a+1)& (0+255),b
  2444  0027DE  0E80               	movlw	128
  2445  0027E0  6F95               	movwf	(___flsub@a+2)& (0+255),b
  2446  0027E2  0E3F               	movlw	63
  2447  0027E4  6F96               	movwf	(___flsub@a+3)& (0+255),b
  2448  0027E6  EC8F  F031         	call	___flsub	;wreg free
  2449  0027EA  0060  F23C  F0C9   	movff	?___flsub,_Z0
  2450  0027F0  0060  F240  F0CA   	movff	?___flsub+1,_Z0+1
  2451  0027F6  0060  F244  F0CB   	movff	?___flsub+2,_Z0+2
  2452  0027FC  0060  F248  F0CC   	movff	?___flsub+3,_Z0+3
  2453                           
  2454                           ;RoboticArm.c: 397: next_rad_calculation_manual();
  2455  002802  EC0D  F028         	call	_next_rad_calculation_manual	;wreg free
  2456                           
  2457                           ;RoboticArm.c: 398: next_steps_calculation();
  2458  002806  EC59  F02A         	call	_next_steps_calculation	;wreg free
  2459                           
  2460                           ;RoboticArm.c: 400: if(((RX_PORTB & 0b00000010)==0)) elbow_shoulder_state = 6;
  2461  00280A  0100               	movlb	0	; () banked
  2462  00280C  B3FD               	btfsc	_RX_PORTB& (0+255),1,b
  2463  00280E  D002               	goto	l1045
  2464                           
  2465                           ; BSR set to: 0
  2466  002810  0E06               	movlw	6
  2467  002812  6FB8               	movwf	main@elbow_shoulder_state& (0+255),b
  2468  002814                     l1045:
  2469                           
  2470                           ; BSR set to: 0
  2471                           ;RoboticArm.c: 401: if(((RX_PORTB & 0b00010000)==0)) elbow_shoulder_state = 8;
  2472                           
  2473                           ; BSR set to: 0
  2474  002814  B9FD               	btfsc	_RX_PORTB& (0+255),4,b
  2475  002816  D2E7               	goto	l1067
  2476                           
  2477                           ; BSR set to: 0
  2478  002818  0E08               	movlw	8
  2479  00281A                     L8:
  2480  00281A  6FB8               	movwf	main@elbow_shoulder_state& (0+255),b
  2481                           
  2482                           ; BSR set to: 0
  2483                           ;RoboticArm.c: 402: }
  2484                           ;RoboticArm.c: 403: }
  2485                           ;RoboticArm.c: 404: break;
  2486                           
  2487                           ; BSR set to: 0
  2488                           
  2489                           ; BSR set to: 0
  2490  00281C  D2E4               	goto	l1067
  2491  00281E                     l1047:
  2492                           
  2493                           ; BSR set to: 0
  2494                           ;RoboticArm.c: 407: if((T1CONbits.ON==0) && (T3CONbits.ON==0) && (T5CONbits.ON==0))
  2495  00281E  013F               	movlb	63	; () banked
  2496  002820  A1B2               	btfss	178,0,b	;volatile
  2497                           
  2498                           ; BSR set to: 63
  2499  002822  B1A6               	btfsc	166,0,b	;volatile
  2500  002824  D2E0               	goto	l1067
  2501                           
  2502                           ; BSR set to: 63
  2503  002826  B19A               	btfsc	154,0,b	;volatile
  2504  002828  D2DE               	goto	l1067
  2505                           
  2506                           ; BSR set to: 63
  2507                           ;RoboticArm.c: 408: {
  2508                           ;RoboticArm.c: 409: if(((RX_PORTB & 0b00000010)!=0))
  2509  00282A  0100               	movlb	0	; () banked
  2510  00282C  A3FD               	btfss	_RX_PORTB& (0+255),1,b
  2511  00282E  D025               	goto	l1049
  2512                           
  2513                           ; BSR set to: 0
  2514                           ;RoboticArm.c: 410: {
  2515                           ;RoboticArm.c: 411: R0--;
  2516  002830  0060  F334  F08F   	movff	_R0,___flsub@b
  2517  002836  0060  F338  F090   	movff	_R0+1,___flsub@b+1
  2518  00283C  0060  F33C  F091   	movff	_R0+2,___flsub@b+2
  2519  002842  0060  F340  F092   	movff	_R0+3,___flsub@b+3
  2520  002848  0E00               	movlw	0
  2521  00284A  6F93               	movwf	___flsub@a& (0+255),b
  2522  00284C  0E00               	movlw	0
  2523  00284E  6F94               	movwf	(___flsub@a+1)& (0+255),b
  2524  002850  0E80               	movlw	128
  2525  002852  6F95               	movwf	(___flsub@a+2)& (0+255),b
  2526  002854  0E3F               	movlw	63
  2527  002856  6F96               	movwf	(___flsub@a+3)& (0+255),b
  2528  002858  EC8F  F031         	call	___flsub	;wreg free
  2529  00285C  0060  F23C  F0CD   	movff	?___flsub,_R0
  2530  002862  0060  F240  F0CE   	movff	?___flsub+1,_R0+1
  2531  002868  0060  F244  F0CF   	movff	?___flsub+2,_R0+2
  2532  00286E  0060  F248  F0D0   	movff	?___flsub+3,_R0+3
  2533                           
  2534                           ;RoboticArm.c: 412: elbow_shoulder_state = 3;
  2535  002874  0E03               	movlw	3
  2536  002876  0100               	movlb	0	; () banked
  2537  002878  6FB8               	movwf	main@elbow_shoulder_state& (0+255),b
  2538  00287A                     l1049:
  2539                           
  2540                           ; BSR set to: 0
  2541                           ;RoboticArm.c: 413: }
  2542                           ;RoboticArm.c: 415: if(((RX_PORTA & 0b00010000)!=0))
  2543                           
  2544                           ; BSR set to: 0
  2545  00287A  A9FE               	btfss	_RX_PORTA& (0+255),4,b
  2546  00287C  D025               	goto	l1050
  2547                           
  2548                           ; BSR set to: 0
  2549                           ;RoboticArm.c: 416: {
  2550                           ;RoboticArm.c: 417: Z0--;
  2551  00287E  0060  F324  F08F   	movff	_Z0,___flsub@b
  2552  002884  0060  F328  F090   	movff	_Z0+1,___flsub@b+1
  2553  00288A  0060  F32C  F091   	movff	_Z0+2,___flsub@b+2
  2554  002890  0060  F330  F092   	movff	_Z0+3,___flsub@b+3
  2555  002896  0E00               	movlw	0
  2556  002898  6F93               	movwf	___flsub@a& (0+255),b
  2557  00289A  0E00               	movlw	0
  2558  00289C  6F94               	movwf	(___flsub@a+1)& (0+255),b
  2559  00289E  0E80               	movlw	128
  2560  0028A0  6F95               	movwf	(___flsub@a+2)& (0+255),b
  2561  0028A2  0E3F               	movlw	63
  2562  0028A4  6F96               	movwf	(___flsub@a+3)& (0+255),b
  2563  0028A6  EC8F  F031         	call	___flsub	;wreg free
  2564  0028AA  0060  F23C  F0C9   	movff	?___flsub,_Z0
  2565  0028B0  0060  F240  F0CA   	movff	?___flsub+1,_Z0+1
  2566  0028B6  0060  F244  F0CB   	movff	?___flsub+2,_Z0+2
  2567  0028BC  0060  F248  F0CC   	movff	?___flsub+3,_Z0+3
  2568                           
  2569                           ;RoboticArm.c: 418: elbow_shoulder_state = 1;
  2570  0028C2  0E01               	movlw	1
  2571  0028C4  0100               	movlb	0	; () banked
  2572  0028C6  6FB8               	movwf	main@elbow_shoulder_state& (0+255),b
  2573  0028C8                     l1050:
  2574                           
  2575                           ; BSR set to: 0
  2576                           ;RoboticArm.c: 419: }
  2577                           ;RoboticArm.c: 421: if((((RX_PORTB & 0b00000010)==0))&&(((RX_PORTA & 0b00010000)==0)))
  2578                           
  2579                           ; BSR set to: 0
  2580  0028C8  A3FD               	btfss	_RX_PORTB& (0+255),1,b
  2581                           
  2582                           ; BSR set to: 0
  2583  0028CA  B9FE               	btfsc	_RX_PORTA& (0+255),4,b
  2584  0028CC  D28C               	goto	l1067
  2585                           
  2586                           ; BSR set to: 0
  2587                           ;RoboticArm.c: 422: {
  2588                           ;RoboticArm.c: 423: values_update();
  2589  0028CE  ECA4  F032         	call	_values_update	;wreg free
  2590                           
  2591                           ;RoboticArm.c: 424: SEG_start_check();
  2592  0028D2  EC83  F032         	call	_SEG_start_check	;wreg free
  2593                           
  2594                           ;RoboticArm.c: 425: real_rad_calculation();
  2595  0028D6  ECFB  F02D         	call	_real_rad_calculation	;wreg free
  2596                           
  2597                           ;RoboticArm.c: 426: R0++;
  2598  0028DA  0060  F334  F035   	movff	_R0,___fladd@b
  2599  0028E0  0060  F338  F036   	movff	_R0+1,___fladd@b+1
  2600  0028E6  0060  F33C  F037   	movff	_R0+2,___fladd@b+2
  2601  0028EC  0060  F340  F038   	movff	_R0+3,___fladd@b+3
  2602  0028F2  0E00               	movlw	0
  2603  0028F4  6E39               	movwf	___fladd@a,c
  2604  0028F6  0E00               	movlw	0
  2605  0028F8  6E3A               	movwf	___fladd@a+1,c
  2606  0028FA  0E80               	movlw	128
  2607  0028FC  6E3B               	movwf	___fladd@a+2,c
  2608  0028FE  0E3F               	movlw	63
  2609  002900  6E3C               	movwf	___fladd@a+3,c
  2610  002902  EC78  F020         	call	___fladd	;wreg free
  2611  002906  0060  F0D4  F0CD   	movff	?___fladd,_R0
  2612  00290C  0060  F0D8  F0CE   	movff	?___fladd+1,_R0+1
  2613  002912  0060  F0DC  F0CF   	movff	?___fladd+2,_R0+2
  2614  002918  0060  F0E0  F0D0   	movff	?___fladd+3,_R0+3
  2615                           
  2616                           ;RoboticArm.c: 427: Z0++;
  2617  00291E  0060  F324  F035   	movff	_Z0,___fladd@b
  2618  002924  0060  F328  F036   	movff	_Z0+1,___fladd@b+1
  2619  00292A  0060  F32C  F037   	movff	_Z0+2,___fladd@b+2
  2620  002930  0060  F330  F038   	movff	_Z0+3,___fladd@b+3
  2621  002936  0E00               	movlw	0
  2622  002938  6E39               	movwf	___fladd@a,c
  2623  00293A  0E00               	movlw	0
  2624  00293C  6E3A               	movwf	___fladd@a+1,c
  2625  00293E  0E80               	movlw	128
  2626  002940  6E3B               	movwf	___fladd@a+2,c
  2627  002942  0E3F               	movlw	63
  2628  002944  6E3C               	movwf	___fladd@a+3,c
  2629  002946  EC78  F020         	call	___fladd	;wreg free
  2630  00294A  0060  F0D4  F0C9   	movff	?___fladd,_Z0
  2631  002950  0060  F0D8  F0CA   	movff	?___fladd+1,_Z0+1
  2632  002956  0060  F0DC  F0CB   	movff	?___fladd+2,_Z0+2
  2633  00295C  0060  F0E0  F0CC   	movff	?___fladd+3,_Z0+3
  2634                           
  2635                           ;RoboticArm.c: 428: next_rad_calculation_manual();
  2636  002962  EC0D  F028         	call	_next_rad_calculation_manual	;wreg free
  2637                           
  2638                           ;RoboticArm.c: 429: next_steps_calculation();
  2639  002966  EC59  F02A         	call	_next_steps_calculation	;wreg free
  2640                           
  2641                           ;RoboticArm.c: 430: }
  2642                           ;RoboticArm.c: 431: }
  2643                           ;RoboticArm.c: 432: break;
  2644  00296A  D23D               	goto	l1067
  2645  00296C                     l1052:
  2646                           
  2647                           ; BSR set to: 0
  2648                           ;RoboticArm.c: 435: if((T1CONbits.ON==0) && (T3CONbits.ON==0) && (T5CONbits.ON==0))
  2649  00296C  013F               	movlb	63	; () banked
  2650  00296E  A1B2               	btfss	178,0,b	;volatile
  2651                           
  2652                           ; BSR set to: 63
  2653  002970  B1A6               	btfsc	166,0,b	;volatile
  2654  002972  D239               	goto	l1067
  2655                           
  2656                           ; BSR set to: 63
  2657  002974  B19A               	btfsc	154,0,b	;volatile
  2658  002976  D237               	goto	l1067
  2659                           
  2660                           ; BSR set to: 63
  2661                           ;RoboticArm.c: 436: {
  2662                           ;RoboticArm.c: 437: if(((RX_PORTB & 0b00000010)!=0))
  2663  002978  0100               	movlb	0	; () banked
  2664  00297A  A3FD               	btfss	_RX_PORTB& (0+255),1,b
  2665  00297C  D025               	goto	l1054
  2666                           
  2667                           ; BSR set to: 0
  2668                           ;RoboticArm.c: 438: {
  2669                           ;RoboticArm.c: 439: R0--;
  2670  00297E  0060  F334  F08F   	movff	_R0,___flsub@b
  2671  002984  0060  F338  F090   	movff	_R0+1,___flsub@b+1
  2672  00298A  0060  F33C  F091   	movff	_R0+2,___flsub@b+2
  2673  002990  0060  F340  F092   	movff	_R0+3,___flsub@b+3
  2674  002996  0E00               	movlw	0
  2675  002998  6F93               	movwf	___flsub@a& (0+255),b
  2676  00299A  0E00               	movlw	0
  2677  00299C  6F94               	movwf	(___flsub@a+1)& (0+255),b
  2678  00299E  0E80               	movlw	128
  2679  0029A0  6F95               	movwf	(___flsub@a+2)& (0+255),b
  2680  0029A2  0E3F               	movlw	63
  2681  0029A4  6F96               	movwf	(___flsub@a+3)& (0+255),b
  2682  0029A6  EC8F  F031         	call	___flsub	;wreg free
  2683  0029AA  0060  F23C  F0CD   	movff	?___flsub,_R0
  2684  0029B0  0060  F240  F0CE   	movff	?___flsub+1,_R0+1
  2685  0029B6  0060  F244  F0CF   	movff	?___flsub+2,_R0+2
  2686  0029BC  0060  F248  F0D0   	movff	?___flsub+3,_R0+3
  2687                           
  2688                           ;RoboticArm.c: 440: elbow_shoulder_state = 4;
  2689  0029C2  0E04               	movlw	4
  2690  0029C4  0100               	movlb	0	; () banked
  2691  0029C6  6FB8               	movwf	main@elbow_shoulder_state& (0+255),b
  2692  0029C8                     l1054:
  2693                           
  2694                           ; BSR set to: 0
  2695                           ;RoboticArm.c: 441: }
  2696                           ;RoboticArm.c: 443: if(((RX_PORTA & 0b00000010)!=0))
  2697                           
  2698                           ; BSR set to: 0
  2699  0029C8  A3FE               	btfss	_RX_PORTA& (0+255),1,b
  2700  0029CA  D025               	goto	l1055
  2701                           
  2702                           ; BSR set to: 0
  2703                           ;RoboticArm.c: 444: {
  2704                           ;RoboticArm.c: 445: Z0++;
  2705  0029CC  0060  F324  F035   	movff	_Z0,___fladd@b
  2706  0029D2  0060  F328  F036   	movff	_Z0+1,___fladd@b+1
  2707  0029D8  0060  F32C  F037   	movff	_Z0+2,___fladd@b+2
  2708  0029DE  0060  F330  F038   	movff	_Z0+3,___fladd@b+3
  2709  0029E4  0E00               	movlw	0
  2710  0029E6  6E39               	movwf	___fladd@a,c
  2711  0029E8  0E00               	movlw	0
  2712  0029EA  6E3A               	movwf	___fladd@a+1,c
  2713  0029EC  0E80               	movlw	128
  2714  0029EE  6E3B               	movwf	___fladd@a+2,c
  2715  0029F0  0E3F               	movlw	63
  2716  0029F2  6E3C               	movwf	___fladd@a+3,c
  2717  0029F4  EC78  F020         	call	___fladd	;wreg free
  2718  0029F8  0060  F0D4  F0C9   	movff	?___fladd,_Z0
  2719  0029FE  0060  F0D8  F0CA   	movff	?___fladd+1,_Z0+1
  2720  002A04  0060  F0DC  F0CB   	movff	?___fladd+2,_Z0+2
  2721  002A0A  0060  F0E0  F0CC   	movff	?___fladd+3,_Z0+3
  2722                           
  2723                           ;RoboticArm.c: 446: elbow_shoulder_state = 1;
  2724  002A10  0E01               	movlw	1
  2725  002A12  0100               	movlb	0	; () banked
  2726  002A14  6FB8               	movwf	main@elbow_shoulder_state& (0+255),b
  2727  002A16                     l1055:
  2728                           
  2729                           ; BSR set to: 0
  2730                           ;RoboticArm.c: 447: }
  2731                           ;RoboticArm.c: 449: if((((RX_PORTB & 0b00000010)==0))&&(((RX_PORTA & 0b00000010)==0)))
  2732                           
  2733                           ; BSR set to: 0
  2734  002A16  A3FD               	btfss	_RX_PORTB& (0+255),1,b
  2735                           
  2736                           ; BSR set to: 0
  2737  002A18  B3FE               	btfsc	_RX_PORTA& (0+255),1,b
  2738  002A1A  D1E5               	goto	l1067
  2739                           
  2740                           ; BSR set to: 0
  2741                           ;RoboticArm.c: 450: {
  2742                           ;RoboticArm.c: 451: values_update();
  2743  002A1C  ECA4  F032         	call	_values_update	;wreg free
  2744                           
  2745                           ;RoboticArm.c: 452: SEG_start_check();
  2746  002A20  EC83  F032         	call	_SEG_start_check	;wreg free
  2747                           
  2748                           ;RoboticArm.c: 453: real_rad_calculation();
  2749  002A24  ECFB  F02D         	call	_real_rad_calculation	;wreg free
  2750                           
  2751                           ;RoboticArm.c: 454: R0++;
  2752  002A28  0060  F334  F035   	movff	_R0,___fladd@b
  2753  002A2E  0060  F338  F036   	movff	_R0+1,___fladd@b+1
  2754  002A34  0060  F33C  F037   	movff	_R0+2,___fladd@b+2
  2755  002A3A  0060  F340  F038   	movff	_R0+3,___fladd@b+3
  2756  002A40  0E00               	movlw	0
  2757  002A42  6E39               	movwf	___fladd@a,c
  2758  002A44  0E00               	movlw	0
  2759  002A46  6E3A               	movwf	___fladd@a+1,c
  2760  002A48  0E80               	movlw	128
  2761  002A4A  6E3B               	movwf	___fladd@a+2,c
  2762  002A4C  0E3F               	movlw	63
  2763  002A4E  6E3C               	movwf	___fladd@a+3,c
  2764  002A50  EC78  F020         	call	___fladd	;wreg free
  2765  002A54  0060  F0D4  F0CD   	movff	?___fladd,_R0
  2766  002A5A  0060  F0D8  F0CE   	movff	?___fladd+1,_R0+1
  2767  002A60  0060  F0DC  F0CF   	movff	?___fladd+2,_R0+2
  2768  002A66  0060  F0E0  F0D0   	movff	?___fladd+3,_R0+3
  2769                           
  2770                           ;RoboticArm.c: 455: Z0--;
  2771  002A6C  0060  F324  F08F   	movff	_Z0,___flsub@b
  2772  002A72  0060  F328  F090   	movff	_Z0+1,___flsub@b+1
  2773  002A78  0060  F32C  F091   	movff	_Z0+2,___flsub@b+2
  2774  002A7E  0060  F330  F092   	movff	_Z0+3,___flsub@b+3
  2775  002A84  0E00               	movlw	0
  2776  002A86  0100               	movlb	0	; () banked
  2777  002A88  6F93               	movwf	___flsub@a& (0+255),b
  2778  002A8A  0E00               	movlw	0
  2779  002A8C  6F94               	movwf	(___flsub@a+1)& (0+255),b
  2780  002A8E  0E80               	movlw	128
  2781  002A90  6F95               	movwf	(___flsub@a+2)& (0+255),b
  2782  002A92  0E3F               	movlw	63
  2783  002A94  6F96               	movwf	(___flsub@a+3)& (0+255),b
  2784  002A96  EC8F  F031         	call	___flsub	;wreg free
  2785  002A9A  0060  F23C  F0C9   	movff	?___flsub,_Z0
  2786  002AA0  0060  F240  F0CA   	movff	?___flsub+1,_Z0+1
  2787  002AA6  0060  F244  F0CB   	movff	?___flsub+2,_Z0+2
  2788  002AAC  0060  F248  F0CC   	movff	?___flsub+3,_Z0+3
  2789                           
  2790                           ;RoboticArm.c: 456: next_rad_calculation_manual();
  2791  002AB2  EC0D  F028         	call	_next_rad_calculation_manual	;wreg free
  2792                           
  2793                           ;RoboticArm.c: 457: next_steps_calculation();
  2794  002AB6  EC59  F02A         	call	_next_steps_calculation	;wreg free
  2795                           
  2796                           ;RoboticArm.c: 458: }
  2797                           ;RoboticArm.c: 459: }
  2798                           ;RoboticArm.c: 460: break;
  2799  002ABA  D195               	goto	l1067
  2800  002ABC                     l1057:
  2801                           
  2802                           ; BSR set to: 0
  2803                           ;RoboticArm.c: 463: if((T1CONbits.ON==0) && (T3CONbits.ON==0) && (T5CONbits.ON==0))
  2804  002ABC  013F               	movlb	63	; () banked
  2805  002ABE  A1B2               	btfss	178,0,b	;volatile
  2806                           
  2807                           ; BSR set to: 63
  2808  002AC0  B1A6               	btfsc	166,0,b	;volatile
  2809  002AC2  D191               	goto	l1067
  2810                           
  2811                           ; BSR set to: 63
  2812  002AC4  B19A               	btfsc	154,0,b	;volatile
  2813  002AC6  D18F               	goto	l1067
  2814                           
  2815                           ; BSR set to: 63
  2816                           ;RoboticArm.c: 464: {
  2817                           ;RoboticArm.c: 465: if(((RX_PORTB & 0b00010000)!=0))
  2818  002AC8  0100               	movlb	0	; () banked
  2819  002ACA  A9FD               	btfss	_RX_PORTB& (0+255),4,b
  2820  002ACC  D025               	goto	l1059
  2821                           
  2822                           ; BSR set to: 0
  2823                           ;RoboticArm.c: 466: {
  2824                           ;RoboticArm.c: 467: R0++;
  2825  002ACE  0060  F334  F035   	movff	_R0,___fladd@b
  2826  002AD4  0060  F338  F036   	movff	_R0+1,___fladd@b+1
  2827  002ADA  0060  F33C  F037   	movff	_R0+2,___fladd@b+2
  2828  002AE0  0060  F340  F038   	movff	_R0+3,___fladd@b+3
  2829  002AE6  0E00               	movlw	0
  2830  002AE8  6E39               	movwf	___fladd@a,c
  2831  002AEA  0E00               	movlw	0
  2832  002AEC  6E3A               	movwf	___fladd@a+1,c
  2833  002AEE  0E80               	movlw	128
  2834  002AF0  6E3B               	movwf	___fladd@a+2,c
  2835  002AF2  0E3F               	movlw	63
  2836  002AF4  6E3C               	movwf	___fladd@a+3,c
  2837  002AF6  EC78  F020         	call	___fladd	;wreg free
  2838  002AFA  0060  F0D4  F0CD   	movff	?___fladd,_R0
  2839  002B00  0060  F0D8  F0CE   	movff	?___fladd+1,_R0+1
  2840  002B06  0060  F0DC  F0CF   	movff	?___fladd+2,_R0+2
  2841  002B0C  0060  F0E0  F0D0   	movff	?___fladd+3,_R0+3
  2842                           
  2843                           ;RoboticArm.c: 468: elbow_shoulder_state = 3;
  2844  002B12  0E03               	movlw	3
  2845  002B14  0100               	movlb	0	; () banked
  2846  002B16  6FB8               	movwf	main@elbow_shoulder_state& (0+255),b
  2847  002B18                     l1059:
  2848                           
  2849                           ; BSR set to: 0
  2850                           ;RoboticArm.c: 469: }
  2851                           ;RoboticArm.c: 471: if(((RX_PORTA & 0b00010000)!=0))
  2852                           
  2853                           ; BSR set to: 0
  2854  002B18  A9FE               	btfss	_RX_PORTA& (0+255),4,b
  2855  002B1A  D025               	goto	l1060
  2856                           
  2857                           ; BSR set to: 0
  2858                           ;RoboticArm.c: 472: {
  2859                           ;RoboticArm.c: 473: Z0--;
  2860  002B1C  0060  F324  F08F   	movff	_Z0,___flsub@b
  2861  002B22  0060  F328  F090   	movff	_Z0+1,___flsub@b+1
  2862  002B28  0060  F32C  F091   	movff	_Z0+2,___flsub@b+2
  2863  002B2E  0060  F330  F092   	movff	_Z0+3,___flsub@b+3
  2864  002B34  0E00               	movlw	0
  2865  002B36  6F93               	movwf	___flsub@a& (0+255),b
  2866  002B38  0E00               	movlw	0
  2867  002B3A  6F94               	movwf	(___flsub@a+1)& (0+255),b
  2868  002B3C  0E80               	movlw	128
  2869  002B3E  6F95               	movwf	(___flsub@a+2)& (0+255),b
  2870  002B40  0E3F               	movlw	63
  2871  002B42  6F96               	movwf	(___flsub@a+3)& (0+255),b
  2872  002B44  EC8F  F031         	call	___flsub	;wreg free
  2873  002B48  0060  F23C  F0C9   	movff	?___flsub,_Z0
  2874  002B4E  0060  F240  F0CA   	movff	?___flsub+1,_Z0+1
  2875  002B54  0060  F244  F0CB   	movff	?___flsub+2,_Z0+2
  2876  002B5A  0060  F248  F0CC   	movff	?___flsub+3,_Z0+3
  2877                           
  2878                           ;RoboticArm.c: 474: elbow_shoulder_state = 2;
  2879  002B60  0E02               	movlw	2
  2880  002B62  0100               	movlb	0	; () banked
  2881  002B64  6FB8               	movwf	main@elbow_shoulder_state& (0+255),b
  2882  002B66                     l1060:
  2883                           
  2884                           ; BSR set to: 0
  2885                           ;RoboticArm.c: 475: }
  2886                           ;RoboticArm.c: 477: if((((RX_PORTB & 0b00010000)==0))&&(((RX_PORTA & 0b00010000)==0)))
  2887                           
  2888                           ; BSR set to: 0
  2889  002B66  A9FD               	btfss	_RX_PORTB& (0+255),4,b
  2890                           
  2891                           ; BSR set to: 0
  2892  002B68  B9FE               	btfsc	_RX_PORTA& (0+255),4,b
  2893  002B6A  D13D               	goto	l1067
  2894                           
  2895                           ; BSR set to: 0
  2896                           ;RoboticArm.c: 478: {
  2897                           ;RoboticArm.c: 479: values_update();
  2898  002B6C  ECA4  F032         	call	_values_update	;wreg free
  2899                           
  2900                           ;RoboticArm.c: 480: SEG_start_check();
  2901  002B70  EC83  F032         	call	_SEG_start_check	;wreg free
  2902                           
  2903                           ;RoboticArm.c: 481: real_rad_calculation();
  2904  002B74  ECFB  F02D         	call	_real_rad_calculation	;wreg free
  2905                           
  2906                           ;RoboticArm.c: 482: R0--;
  2907  002B78  0060  F334  F08F   	movff	_R0,___flsub@b
  2908  002B7E  0060  F338  F090   	movff	_R0+1,___flsub@b+1
  2909  002B84  0060  F33C  F091   	movff	_R0+2,___flsub@b+2
  2910  002B8A  0060  F340  F092   	movff	_R0+3,___flsub@b+3
  2911  002B90  0E00               	movlw	0
  2912  002B92  0100               	movlb	0	; () banked
  2913  002B94  6F93               	movwf	___flsub@a& (0+255),b
  2914  002B96  0E00               	movlw	0
  2915  002B98  6F94               	movwf	(___flsub@a+1)& (0+255),b
  2916  002B9A  0E80               	movlw	128
  2917  002B9C  6F95               	movwf	(___flsub@a+2)& (0+255),b
  2918  002B9E  0E3F               	movlw	63
  2919  002BA0  6F96               	movwf	(___flsub@a+3)& (0+255),b
  2920  002BA2  EC8F  F031         	call	___flsub	;wreg free
  2921  002BA6  0060  F23C  F0CD   	movff	?___flsub,_R0
  2922  002BAC  0060  F240  F0CE   	movff	?___flsub+1,_R0+1
  2923  002BB2  0060  F244  F0CF   	movff	?___flsub+2,_R0+2
  2924  002BB8  0060  F248  F0D0   	movff	?___flsub+3,_R0+3
  2925                           
  2926                           ;RoboticArm.c: 483: Z0++;
  2927  002BBE  0060  F324  F035   	movff	_Z0,___fladd@b
  2928  002BC4  0060  F328  F036   	movff	_Z0+1,___fladd@b+1
  2929  002BCA  0060  F32C  F037   	movff	_Z0+2,___fladd@b+2
  2930  002BD0  0060  F330  F038   	movff	_Z0+3,___fladd@b+3
  2931  002BD6  0E00               	movlw	0
  2932  002BD8  6E39               	movwf	___fladd@a,c
  2933  002BDA  0E00               	movlw	0
  2934  002BDC  6E3A               	movwf	___fladd@a+1,c
  2935  002BDE  0E80               	movlw	128
  2936  002BE0  6E3B               	movwf	___fladd@a+2,c
  2937  002BE2  0E3F               	movlw	63
  2938  002BE4  6E3C               	movwf	___fladd@a+3,c
  2939  002BE6  EC78  F020         	call	___fladd	;wreg free
  2940  002BEA  0060  F0D4  F0C9   	movff	?___fladd,_Z0
  2941  002BF0  0060  F0D8  F0CA   	movff	?___fladd+1,_Z0+1
  2942  002BF6  0060  F0DC  F0CB   	movff	?___fladd+2,_Z0+2
  2943  002BFC  0060  F0E0  F0CC   	movff	?___fladd+3,_Z0+3
  2944                           
  2945                           ;RoboticArm.c: 484: next_rad_calculation_manual();
  2946  002C02  EC0D  F028         	call	_next_rad_calculation_manual	;wreg free
  2947                           
  2948                           ;RoboticArm.c: 485: next_steps_calculation();
  2949  002C06  EC59  F02A         	call	_next_steps_calculation	;wreg free
  2950                           
  2951                           ;RoboticArm.c: 486: }
  2952                           ;RoboticArm.c: 487: }
  2953                           ;RoboticArm.c: 488: break;
  2954  002C0A  D0ED               	goto	l1067
  2955  002C0C                     l1062:
  2956                           
  2957                           ; BSR set to: 0
  2958                           ;RoboticArm.c: 491: if((T1CONbits.ON==0) && (T3CONbits.ON==0) && (T5CONbits.ON==0))
  2959  002C0C  013F               	movlb	63	; () banked
  2960  002C0E  A1B2               	btfss	178,0,b	;volatile
  2961                           
  2962                           ; BSR set to: 63
  2963  002C10  B1A6               	btfsc	166,0,b	;volatile
  2964  002C12  D0E9               	goto	l1067
  2965                           
  2966                           ; BSR set to: 63
  2967  002C14  B19A               	btfsc	154,0,b	;volatile
  2968  002C16  D0E7               	goto	l1067
  2969                           
  2970                           ; BSR set to: 63
  2971                           ;RoboticArm.c: 492: {
  2972                           ;RoboticArm.c: 493: if(((RX_PORTB & 0b00010000)!=0))
  2973  002C18  0100               	movlb	0	; () banked
  2974  002C1A  A9FD               	btfss	_RX_PORTB& (0+255),4,b
  2975  002C1C  D025               	goto	l1064
  2976                           
  2977                           ; BSR set to: 0
  2978                           ;RoboticArm.c: 494: {
  2979                           ;RoboticArm.c: 495: R0++;
  2980  002C1E  0060  F334  F035   	movff	_R0,___fladd@b
  2981  002C24  0060  F338  F036   	movff	_R0+1,___fladd@b+1
  2982  002C2A  0060  F33C  F037   	movff	_R0+2,___fladd@b+2
  2983  002C30  0060  F340  F038   	movff	_R0+3,___fladd@b+3
  2984  002C36  0E00               	movlw	0
  2985  002C38  6E39               	movwf	___fladd@a,c
  2986  002C3A  0E00               	movlw	0
  2987  002C3C  6E3A               	movwf	___fladd@a+1,c
  2988  002C3E  0E80               	movlw	128
  2989  002C40  6E3B               	movwf	___fladd@a+2,c
  2990  002C42  0E3F               	movlw	63
  2991  002C44  6E3C               	movwf	___fladd@a+3,c
  2992  002C46  EC78  F020         	call	___fladd	;wreg free
  2993  002C4A  0060  F0D4  F0CD   	movff	?___fladd,_R0
  2994  002C50  0060  F0D8  F0CE   	movff	?___fladd+1,_R0+1
  2995  002C56  0060  F0DC  F0CF   	movff	?___fladd+2,_R0+2
  2996  002C5C  0060  F0E0  F0D0   	movff	?___fladd+3,_R0+3
  2997                           
  2998                           ;RoboticArm.c: 496: elbow_shoulder_state = 4;
  2999  002C62  0E04               	movlw	4
  3000  002C64  0100               	movlb	0	; () banked
  3001  002C66  6FB8               	movwf	main@elbow_shoulder_state& (0+255),b
  3002  002C68                     l1064:
  3003                           
  3004                           ; BSR set to: 0
  3005                           ;RoboticArm.c: 497: }
  3006                           ;RoboticArm.c: 499: if(((RX_PORTA & 0b00000010)!=0))
  3007                           
  3008                           ; BSR set to: 0
  3009  002C68  A3FE               	btfss	_RX_PORTA& (0+255),1,b
  3010  002C6A  D025               	goto	l1065
  3011                           
  3012                           ; BSR set to: 0
  3013                           ;RoboticArm.c: 500: {
  3014                           ;RoboticArm.c: 501: Z0++;
  3015  002C6C  0060  F324  F035   	movff	_Z0,___fladd@b
  3016  002C72  0060  F328  F036   	movff	_Z0+1,___fladd@b+1
  3017  002C78  0060  F32C  F037   	movff	_Z0+2,___fladd@b+2
  3018  002C7E  0060  F330  F038   	movff	_Z0+3,___fladd@b+3
  3019  002C84  0E00               	movlw	0
  3020  002C86  6E39               	movwf	___fladd@a,c
  3021  002C88  0E00               	movlw	0
  3022  002C8A  6E3A               	movwf	___fladd@a+1,c
  3023  002C8C  0E80               	movlw	128
  3024  002C8E  6E3B               	movwf	___fladd@a+2,c
  3025  002C90  0E3F               	movlw	63
  3026  002C92  6E3C               	movwf	___fladd@a+3,c
  3027  002C94  EC78  F020         	call	___fladd	;wreg free
  3028  002C98  0060  F0D4  F0C9   	movff	?___fladd,_Z0
  3029  002C9E  0060  F0D8  F0CA   	movff	?___fladd+1,_Z0+1
  3030  002CA4  0060  F0DC  F0CB   	movff	?___fladd+2,_Z0+2
  3031  002CAA  0060  F0E0  F0CC   	movff	?___fladd+3,_Z0+3
  3032                           
  3033                           ;RoboticArm.c: 502: elbow_shoulder_state = 2;
  3034  002CB0  0E02               	movlw	2
  3035  002CB2  0100               	movlb	0	; () banked
  3036  002CB4  6FB8               	movwf	main@elbow_shoulder_state& (0+255),b
  3037  002CB6                     l1065:
  3038                           
  3039                           ; BSR set to: 0
  3040                           ;RoboticArm.c: 503: }
  3041                           ;RoboticArm.c: 505: if((((RX_PORTB & 0b00010000)==0))&&(((RX_PORTA & 0b00000010)==0)))
  3042                           
  3043                           ; BSR set to: 0
  3044  002CB6  A9FD               	btfss	_RX_PORTB& (0+255),4,b
  3045                           
  3046                           ; BSR set to: 0
  3047  002CB8  B3FE               	btfsc	_RX_PORTA& (0+255),1,b
  3048  002CBA  D095               	goto	l1067
  3049                           
  3050                           ; BSR set to: 0
  3051                           ;RoboticArm.c: 506: {
  3052                           ;RoboticArm.c: 507: values_update();
  3053  002CBC  ECA4  F032         	call	_values_update	;wreg free
  3054                           
  3055                           ;RoboticArm.c: 508: SEG_start_check();
  3056  002CC0  EC83  F032         	call	_SEG_start_check	;wreg free
  3057                           
  3058                           ;RoboticArm.c: 509: real_rad_calculation();
  3059  002CC4  ECFB  F02D         	call	_real_rad_calculation	;wreg free
  3060                           
  3061                           ;RoboticArm.c: 510: R0--;
  3062  002CC8  0060  F334  F08F   	movff	_R0,___flsub@b
  3063  002CCE  0060  F338  F090   	movff	_R0+1,___flsub@b+1
  3064  002CD4  0060  F33C  F091   	movff	_R0+2,___flsub@b+2
  3065  002CDA  0060  F340  F092   	movff	_R0+3,___flsub@b+3
  3066  002CE0  0E00               	movlw	0
  3067  002CE2  0100               	movlb	0	; () banked
  3068  002CE4  6F93               	movwf	___flsub@a& (0+255),b
  3069  002CE6  0E00               	movlw	0
  3070  002CE8  6F94               	movwf	(___flsub@a+1)& (0+255),b
  3071  002CEA  0E80               	movlw	128
  3072  002CEC  6F95               	movwf	(___flsub@a+2)& (0+255),b
  3073  002CEE  0E3F               	movlw	63
  3074  002CF0  6F96               	movwf	(___flsub@a+3)& (0+255),b
  3075  002CF2  EC8F  F031         	call	___flsub	;wreg free
  3076  002CF6  0060  F23C  F0CD   	movff	?___flsub,_R0
  3077  002CFC  0060  F240  F0CE   	movff	?___flsub+1,_R0+1
  3078  002D02  0060  F244  F0CF   	movff	?___flsub+2,_R0+2
  3079  002D08  0060  F248  F0D0   	movff	?___flsub+3,_R0+3
  3080                           
  3081                           ;RoboticArm.c: 511: Z0--;
  3082  002D0E  0060  F324  F08F   	movff	_Z0,___flsub@b
  3083  002D14  0060  F328  F090   	movff	_Z0+1,___flsub@b+1
  3084  002D1A  0060  F32C  F091   	movff	_Z0+2,___flsub@b+2
  3085  002D20  0060  F330  F092   	movff	_Z0+3,___flsub@b+3
  3086  002D26  0E00               	movlw	0
  3087  002D28  0100               	movlb	0	; () banked
  3088  002D2A  6F93               	movwf	___flsub@a& (0+255),b
  3089  002D2C  0E00               	movlw	0
  3090  002D2E  6F94               	movwf	(___flsub@a+1)& (0+255),b
  3091  002D30  0E80               	movlw	128
  3092  002D32  6F95               	movwf	(___flsub@a+2)& (0+255),b
  3093  002D34  0E3F               	movlw	63
  3094  002D36  6F96               	movwf	(___flsub@a+3)& (0+255),b
  3095  002D38  EC8F  F031         	call	___flsub	;wreg free
  3096  002D3C  0060  F23C  F0C9   	movff	?___flsub,_Z0
  3097  002D42  0060  F240  F0CA   	movff	?___flsub+1,_Z0+1
  3098  002D48  0060  F244  F0CB   	movff	?___flsub+2,_Z0+2
  3099  002D4E  0060  F248  F0CC   	movff	?___flsub+3,_Z0+3
  3100                           
  3101                           ;RoboticArm.c: 512: next_rad_calculation_manual();
  3102  002D54  EC0D  F028         	call	_next_rad_calculation_manual	;wreg free
  3103                           
  3104                           ;RoboticArm.c: 513: next_steps_calculation();
  3105  002D58  EC59  F02A         	call	_next_steps_calculation	;wreg free
  3106                           
  3107                           ;RoboticArm.c: 517: }
  3108                           
  3109                           ;RoboticArm.c: 514: }
  3110                           ;RoboticArm.c: 515: }
  3111                           ;RoboticArm.c: 516: break;
  3112  002D5C  D044               	goto	l1067
  3113  002D5E                     l1016:
  3114  002D5E  0100               	movlb	0	; () banked
  3115  002D60  51B8               	movf	main@elbow_shoulder_state& (0+255),w,b
  3116                           
  3117                           ; Switch size 1, requested type "space"
  3118                           ; Number of cases is 9, Range of values is 0 to 8
  3119                           ; switch strategies available:
  3120                           ; Name         Instructions Cycles
  3121                           ; simple_byte           28    15 (average)
  3122                           ;	Chosen strategy is simple_byte
  3123  002D62  0A00               	xorlw	0	; case 0
  3124  002D64  B4D8               	btfsc	16344,2,c
  3125  002D66  EF27  F011         	goto	l1017
  3126  002D6A  0A01               	xorlw	1	; case 1
  3127  002D6C  B4D8               	btfsc	16344,2,c
  3128  002D6E  EF80  F012         	goto	l1023
  3129  002D72  0A03               	xorlw	3	; case 2
  3130  002D74  B4D8               	btfsc	16344,2,c
  3131  002D76  D42A               	goto	l1029
  3132  002D78  0A01               	xorlw	1	; case 3
  3133  002D7A  B4D8               	btfsc	16344,2,c
  3134  002D7C  D48C               	goto	l1035
  3135  002D7E  0A07               	xorlw	7	; case 4
  3136  002D80  B4D8               	btfsc	16344,2,c
  3137  002D82  D4EA               	goto	l1041
  3138  002D84  0A01               	xorlw	1	; case 5
  3139  002D86  B4D8               	btfsc	16344,2,c
  3140  002D88  D54A               	goto	l1047
  3141  002D8A  0A03               	xorlw	3	; case 6
  3142  002D8C  B4D8               	btfsc	16344,2,c
  3143  002D8E  D5EE               	goto	l1052
  3144  002D90  0A01               	xorlw	1	; case 7
  3145  002D92  B4D8               	btfsc	16344,2,c
  3146  002D94  D693               	goto	l1057
  3147  002D96  0A0F               	xorlw	15	; case 8
  3148  002D98  B4D8               	btfsc	16344,2,c
  3149  002D9A  D738               	goto	l1062
  3150                           
  3151                           ; BSR set to: 0
  3152                           ;RoboticArm.c: 521: switch (base_state)
  3153  002D9C  D024               	goto	l1067
  3154  002D9E                     
  3155                           ; BSR set to: 0
  3156                           ;RoboticArm.c: 525: base_motors_off();
  3157                           
  3158                           ; BSR set to: 0
  3159  002D9E  ECA2  F035         	call	_base_motors_off	;wreg free
  3160                           
  3161                           ;RoboticArm.c: 527: if (((RX_PORTB & 0b00001000)==0))
  3162  002DA2  0100               	movlb	0	; () banked
  3163  002DA4  B7FD               	btfsc	_RX_PORTB& (0+255),3,b
  3164  002DA6  D009               	goto	l1069
  3165                           
  3166                           ; BSR set to: 0
  3167                           ;RoboticArm.c: 528: {
  3168                           ;RoboticArm.c: 529: base_steps=1;
  3169  002DA8  0E00               	movlw	0
  3170  002DAA  6FE8               	movwf	(_base_steps+1)& (0+255),b
  3171  002DAC  0E01               	movlw	1
  3172  002DAE  6FE7               	movwf	_base_steps& (0+255),b
  3173                           
  3174                           ; BSR set to: 0
  3175                           ;RoboticArm.c: 530: T2CONbits.ON=1;
  3176  002DB0  013F               	movlb	63	; () banked
  3177  002DB2  8FAC               	bsf	172,7,b	;volatile
  3178                           
  3179                           ;RoboticArm.c: 531: base_state = 9;
  3180  002DB4  0E09               	movlw	9
  3181  002DB6  0100               	movlb	0	; () banked
  3182  002DB8  6FB5               	movwf	main@base_state& (0+255),b
  3183  002DBA                     l1069:
  3184                           
  3185                           ; BSR set to: 0
  3186                           ;RoboticArm.c: 532: }
  3187                           ;RoboticArm.c: 534: if (((RX_PORTB & 0b00000100)==0))
  3188                           
  3189                           ; BSR set to: 0
  3190  002DBA  B5FD               	btfsc	_RX_PORTB& (0+255),2,b
  3191  002DBC  D04F               	goto	l1076
  3192                           
  3193                           ; BSR set to: 0
  3194                           ;RoboticArm.c: 535: {
  3195                           ;RoboticArm.c: 536: base_steps=-1;
  3196  002DBE  69E7               	setf	_base_steps& (0+255),b
  3197  002DC0  69E8               	setf	(_base_steps+1)& (0+255),b
  3198                           
  3199                           ;RoboticArm.c: 537: T2CONbits.ON=1;
  3200  002DC2  013F               	movlb	63	; () banked
  3201  002DC4  8FAC               	bsf	172,7,b	;volatile
  3202                           
  3203                           ; BSR set to: 63
  3204                           ;RoboticArm.c: 539: base_state = 10;
  3205  002DC6  0E0A               	movlw	10
  3206  002DC8  D00B               	goto	L18
  3207  002DCA                     l1072:
  3208                           
  3209                           ; BSR set to: 0
  3210                           ;RoboticArm.c: 544: if (((RX_PORTB & 0b00001000)!=0))
  3211  002DCA  A7FD               	btfss	_RX_PORTB& (0+255),3,b
  3212  002DCC  D047               	goto	l1076
  3213                           
  3214                           ; BSR set to: 0
  3215                           ;RoboticArm.c: 545: {
  3216                           ;RoboticArm.c: 546: T2CONbits.ON=0;
  3217  002DCE  013F               	movlb	63	; () banked
  3218  002DD0  9FAC               	bcf	172,7,b	;volatile
  3219                           
  3220                           ; BSR set to: 63
  3221                           ;RoboticArm.c: 547: base_state = 0;
  3222  002DD2  0E00               	movlw	0
  3223  002DD4  D005               	goto	L18
  3224  002DD6                     l1074:
  3225                           
  3226                           ; BSR set to: 0
  3227                           ;RoboticArm.c: 552: if (((RX_PORTB & 0b00000100)!=0))
  3228  002DD6  A5FD               	btfss	_RX_PORTB& (0+255),2,b
  3229  002DD8  D041               	goto	l1076
  3230                           
  3231                           ; BSR set to: 0
  3232                           ;RoboticArm.c: 553: {
  3233                           ;RoboticArm.c: 554: T2CONbits.ON=0;
  3234  002DDA  013F               	movlb	63	; () banked
  3235  002DDC  9FAC               	bcf	172,7,b	;volatile
  3236                           
  3237                           ; BSR set to: 63
  3238                           ;RoboticArm.c: 555: base_state = 0;
  3239  002DDE  0E00               	movlw	0
  3240  002DE0                     L18:
  3241  002DE0  0100               	movlb	0	; () banked
  3242  002DE2  6FB5               	movwf	main@base_state& (0+255),b
  3243                           
  3244                           ; BSR set to: 0
  3245                           ;RoboticArm.c: 558: }
  3246                           
  3247                           ; BSR set to: 0
  3248                           ;RoboticArm.c: 556: }
  3249                           ;RoboticArm.c: 557: break;
  3250  002DE4  D03B               	goto	l1076
  3251  002DE6                     l1067:
  3252                           
  3253                           ; BSR set to: 0
  3254  002DE6  0100               	movlb	0	; () banked
  3255  002DE8  51B5               	movf	main@base_state& (0+255),w,b
  3256                           
  3257                           ; Switch size 1, requested type "space"
  3258                           ; Number of cases is 3, Range of values is 0 to 10
  3259                           ; switch strategies available:
  3260                           ; Name         Instructions Cycles
  3261                           ; simple_byte           10     6 (average)
  3262                           ;	Chosen strategy is simple_byte
  3263  002DEA  0A00               	xorlw	0	; case 0
  3264  002DEC  B4D8               	btfsc	16344,2,c
  3265  002DEE  D7D7               	goto	l1068
  3266  002DF0  0A09               	xorlw	9	; case 9
  3267  002DF2  B4D8               	btfsc	16344,2,c
  3268  002DF4  D7EA               	goto	l1072
  3269  002DF6  0A03               	xorlw	3	; case 10
  3270  002DF8  B4D8               	btfsc	16344,2,c
  3271  002DFA  D7ED               	goto	l1074
  3272                           
  3273                           ; BSR set to: 0
  3274                           ;RoboticArm.c: 564: switch (grip_state)
  3275  002DFC  D02F               	goto	l1076
  3276  002DFE                     l1077:
  3277                           
  3278                           ; BSR set to: 0
  3279                           ;RoboticArm.c: 568: if(((RX_PORTA & 0b00100000)==0))
  3280  002DFE  BBFE               	btfsc	_RX_PORTA& (0+255),5,b
  3281  002E00  D007               	goto	l1078
  3282                           
  3283                           ; BSR set to: 0
  3284                           ;RoboticArm.c: 569: {
  3285                           ;RoboticArm.c: 570: grip_steps++;
  3286  002E02  4BDD               	infsnz	_grip_steps& (0+255),f,b
  3287  002E04  2BDE               	incf	(_grip_steps+1)& (0+255),f,b
  3288                           
  3289                           ; BSR set to: 0
  3290                           ;RoboticArm.c: 571: G_start_check();
  3291  002E06  EC43  F035         	call	_G_start_check	;wreg free
  3292                           
  3293                           ;RoboticArm.c: 572: grip_state = 11;
  3294  002E0A  0E0B               	movlw	11
  3295  002E0C  0100               	movlb	0	; () banked
  3296  002E0E  6FB6               	movwf	main@grip_state& (0+255),b
  3297  002E10                     l1078:
  3298                           
  3299                           ; BSR set to: 0
  3300                           ;RoboticArm.c: 573: }
  3301                           ;RoboticArm.c: 575: if(((RX_PORTA & 0b00000001)==0))
  3302                           
  3303                           ; BSR set to: 0
  3304  002E10  B1FE               	btfsc	_RX_PORTA& (0+255),0,b
  3305  002E12  D08D               	goto	l1089
  3306                           
  3307                           ; BSR set to: 0
  3308                           ;RoboticArm.c: 576: {
  3309                           ;RoboticArm.c: 577: grip_steps--;
  3310  002E14  07DD               	decf	_grip_steps& (0+255),f,b
  3311  002E16  A0D8               	btfss	16344,0,c
  3312  002E18  07DE               	decf	(_grip_steps+1)& (0+255),f,b
  3313                           
  3314                           ; BSR set to: 0
  3315                           ;RoboticArm.c: 578: G_start_check();
  3316  002E1A  EC43  F035         	call	_G_start_check	;wreg free
  3317                           
  3318                           ;RoboticArm.c: 579: grip_state = 12;
  3319  002E1E  0E0C               	movlw	12
  3320  002E20  0100               	movlb	0	; () banked
  3321  002E22  D01A               	goto	L19
  3322  002E24                     l1081:
  3323                           
  3324                           ; BSR set to: 0
  3325                           ;RoboticArm.c: 584: if(T5CONbits.ON==0)
  3326  002E24  013F               	movlb	63	; () banked
  3327  002E26  B19A               	btfsc	154,0,b	;volatile
  3328  002E28  D082               	goto	l1089
  3329                           
  3330                           ; BSR set to: 63
  3331                           ;RoboticArm.c: 585: {
  3332                           ;RoboticArm.c: 586: if(((RX_PORTA & 0b00100000)==0))
  3333  002E2A  0100               	movlb	0	; () banked
  3334  002E2C  BBFE               	btfsc	_RX_PORTA& (0+255),5,b
  3335  002E2E  D013               	goto	l1087
  3336                           
  3337                           ; BSR set to: 0
  3338                           ;RoboticArm.c: 587: {
  3339                           ;RoboticArm.c: 588: G_start_check();
  3340  002E30  EC43  F035         	call	_G_start_check	;wreg free
  3341                           
  3342                           ;RoboticArm.c: 589: grip_steps++;
  3343  002E34  0100               	movlb	0	; () banked
  3344  002E36  4BDD               	infsnz	_grip_steps& (0+255),f,b
  3345  002E38  2BDE               	incf	(_grip_steps+1)& (0+255),f,b
  3346                           
  3347                           ;RoboticArm.c: 590: }
  3348  002E3A  D079               	goto	l1089
  3349  002E3C                     l1085:
  3350                           
  3351                           ; BSR set to: 0
  3352                           ;RoboticArm.c: 599: if(T5CONbits.ON==0)
  3353  002E3C  013F               	movlb	63	; () banked
  3354  002E3E  B19A               	btfsc	154,0,b	;volatile
  3355  002E40  D076               	goto	l1089
  3356                           
  3357                           ; BSR set to: 63
  3358                           ;RoboticArm.c: 600: {
  3359                           ;RoboticArm.c: 601: if(((RX_PORTA & 0b00000001)==0))
  3360  002E42  0100               	movlb	0	; () banked
  3361  002E44  B1FE               	btfsc	_RX_PORTA& (0+255),0,b
  3362  002E46  D007               	goto	l1087
  3363                           
  3364                           ; BSR set to: 0
  3365                           ;RoboticArm.c: 602: {
  3366                           ;RoboticArm.c: 603: G_start_check();
  3367  002E48  EC43  F035         	call	_G_start_check	;wreg free
  3368                           
  3369                           ;RoboticArm.c: 604: grip_steps--;
  3370  002E4C  0100               	movlb	0	; () banked
  3371  002E4E  07DD               	decf	_grip_steps& (0+255),f,b
  3372  002E50  A0D8               	btfss	16344,0,c
  3373  002E52  07DE               	decf	(_grip_steps+1)& (0+255),f,b
  3374                           
  3375                           ;RoboticArm.c: 605: }
  3376  002E54  D06C               	goto	l1089
  3377  002E56                     l1087:
  3378                           
  3379                           ; BSR set to: 0
  3380                           ;RoboticArm.c: 606: else
  3381                           ;RoboticArm.c: 607: {
  3382                           ;RoboticArm.c: 608: grip_state = 0;
  3383                           
  3384                           ; BSR set to: 0
  3385  002E56  0E00               	movlw	0
  3386  002E58                     L19:
  3387  002E58  6FB6               	movwf	main@grip_state& (0+255),b
  3388                           
  3389                           ; BSR set to: 0
  3390                           ;RoboticArm.c: 612: }
  3391                           
  3392                           ; BSR set to: 0
  3393                           ;RoboticArm.c: 609: }
  3394                           ;RoboticArm.c: 610: }
  3395                           ;RoboticArm.c: 611: break;
  3396                           
  3397                           ; BSR set to: 0
  3398  002E5A  D069               	goto	l1089
  3399  002E5C                     l1076:
  3400                           
  3401                           ; BSR set to: 0
  3402                           
  3403                           ; BSR set to: 0
  3404  002E5C  51B6               	movf	main@grip_state& (0+255),w,b
  3405                           
  3406                           ; Switch size 1, requested type "space"
  3407                           ; Number of cases is 3, Range of values is 0 to 12
  3408                           ; switch strategies available:
  3409                           ; Name         Instructions Cycles
  3410                           ; simple_byte           10     6 (average)
  3411                           ;	Chosen strategy is simple_byte
  3412  002E5E  0A00               	xorlw	0	; case 0
  3413  002E60  B4D8               	btfsc	16344,2,c
  3414  002E62  D7CD               	goto	l1077
  3415  002E64  0A0B               	xorlw	11	; case 11
  3416  002E66  B4D8               	btfsc	16344,2,c
  3417  002E68  D7DD               	goto	l1081
  3418  002E6A  0A07               	xorlw	7	; case 12
  3419  002E6C  B4D8               	btfsc	16344,2,c
  3420  002E6E  D7E6               	goto	l1085
  3421                           
  3422                           ; BSR set to: 0
  3423                           ;RoboticArm.c: 617: switch (pitch_roll_state)
  3424  002E70  D05E               	goto	l1089
  3425  002E72                     
  3426                           ; BSR set to: 0
  3427                           ;RoboticArm.c: 620: pitch_roll_motors_off();
  3428                           
  3429                           ; BSR set to: 0
  3430  002E72  EC73  F035         	call	_pitch_roll_motors_off	;wreg free
  3431                           
  3432                           ;RoboticArm.c: 622: if(((RX_PORTB & 0b00100000)==0))
  3433  002E76  0100               	movlb	0	; () banked
  3434  002E78  BBFD               	btfsc	_RX_PORTB& (0+255),5,b
  3435  002E7A  D00C               	goto	l1091
  3436                           
  3437                           ; BSR set to: 0
  3438                           ;RoboticArm.c: 623: {
  3439                           ;RoboticArm.c: 624: lwrist_steps= 1;
  3440  002E7C  0E00               	movlw	0
  3441  002E7E  6FEE               	movwf	(_lwrist_steps+1)& (0+255),b
  3442  002E80  0E01               	movlw	1
  3443  002E82  6FED               	movwf	_lwrist_steps& (0+255),b
  3444                           
  3445                           ; BSR set to: 0
  3446                           ;RoboticArm.c: 625: rwrist_steps=-1;
  3447  002E84  69E9               	setf	_rwrist_steps& (0+255),b
  3448  002E86  69EA               	setf	(_rwrist_steps+1)& (0+255),b
  3449                           
  3450                           ; BSR set to: 0
  3451                           ;RoboticArm.c: 626: T4CONbits.ON=1;
  3452  002E88  013F               	movlb	63	; () banked
  3453  002E8A  8FA0               	bsf	160,7,b	;volatile
  3454                           
  3455                           ; BSR set to: 63
  3456                           ;RoboticArm.c: 627: T6CONbits.ON=1;
  3457  002E8C  8F94               	bsf	148,7,b	;volatile
  3458                           
  3459                           ;RoboticArm.c: 628: pitch_roll_state = 13;
  3460  002E8E  0E0D               	movlw	13
  3461  002E90  0100               	movlb	0	; () banked
  3462  002E92  6FB7               	movwf	main@pitch_roll_state& (0+255),b
  3463  002E94                     l1091:
  3464                           
  3465                           ; BSR set to: 0
  3466                           ;RoboticArm.c: 629: }
  3467                           ;RoboticArm.c: 631: if(((RX_PORTB & 0b00000001)==0))
  3468                           
  3469                           ; BSR set to: 0
  3470  002E94  B1FD               	btfsc	_RX_PORTB& (0+255),0,b
  3471  002E96  D00C               	goto	l1092
  3472                           
  3473                           ; BSR set to: 0
  3474                           ;RoboticArm.c: 632: {
  3475                           ;RoboticArm.c: 633: lwrist_steps=-1;
  3476  002E98  69ED               	setf	_lwrist_steps& (0+255),b
  3477  002E9A  69EE               	setf	(_lwrist_steps+1)& (0+255),b
  3478                           
  3479                           ; BSR set to: 0
  3480                           ;RoboticArm.c: 634: rwrist_steps= 1;
  3481  002E9C  0E00               	movlw	0
  3482  002E9E  6FEA               	movwf	(_rwrist_steps+1)& (0+255),b
  3483  002EA0  0E01               	movlw	1
  3484  002EA2  6FE9               	movwf	_rwrist_steps& (0+255),b
  3485                           
  3486                           ; BSR set to: 0
  3487                           ;RoboticArm.c: 635: T4CONbits.ON=1;
  3488  002EA4  013F               	movlb	63	; () banked
  3489  002EA6  8FA0               	bsf	160,7,b	;volatile
  3490                           
  3491                           ; BSR set to: 63
  3492                           ;RoboticArm.c: 636: T6CONbits.ON=1;
  3493  002EA8  8F94               	bsf	148,7,b	;volatile
  3494                           
  3495                           ;RoboticArm.c: 637: pitch_roll_state = 14;
  3496  002EAA  0E0E               	movlw	14
  3497  002EAC  0100               	movlb	0	; () banked
  3498  002EAE  6FB7               	movwf	main@pitch_roll_state& (0+255),b
  3499  002EB0                     l1092:
  3500                           
  3501                           ; BSR set to: 0
  3502                           ;RoboticArm.c: 638: }
  3503                           ;RoboticArm.c: 640: if(((RX_PORTA & 0b00001000)==0))
  3504                           
  3505                           ; BSR set to: 0
  3506  002EB0  B7FE               	btfsc	_RX_PORTA& (0+255),3,b
  3507  002EB2  D00E               	goto	l1093
  3508                           
  3509                           ; BSR set to: 0
  3510                           ;RoboticArm.c: 641: {
  3511                           ;RoboticArm.c: 642: lwrist_steps= 1;
  3512  002EB4  0E00               	movlw	0
  3513  002EB6  6FEE               	movwf	(_lwrist_steps+1)& (0+255),b
  3514  002EB8  0E01               	movlw	1
  3515  002EBA  6FED               	movwf	_lwrist_steps& (0+255),b
  3516                           
  3517                           ;RoboticArm.c: 643: rwrist_steps= 1;
  3518  002EBC  0E00               	movlw	0
  3519  002EBE  6FEA               	movwf	(_rwrist_steps+1)& (0+255),b
  3520  002EC0  0E01               	movlw	1
  3521  002EC2  6FE9               	movwf	_rwrist_steps& (0+255),b
  3522                           
  3523                           ; BSR set to: 0
  3524                           ;RoboticArm.c: 644: T4CONbits.ON=1;
  3525  002EC4  013F               	movlb	63	; () banked
  3526  002EC6  8FA0               	bsf	160,7,b	;volatile
  3527                           
  3528                           ; BSR set to: 63
  3529                           ;RoboticArm.c: 645: T6CONbits.ON=1;
  3530  002EC8  8F94               	bsf	148,7,b	;volatile
  3531                           
  3532                           ;RoboticArm.c: 646: pitch_roll_state = 15;
  3533  002ECA  0E0F               	movlw	15
  3534  002ECC  0100               	movlb	0	; () banked
  3535  002ECE  6FB7               	movwf	main@pitch_roll_state& (0+255),b
  3536  002ED0                     l1093:
  3537                           
  3538                           ; BSR set to: 0
  3539                           ;RoboticArm.c: 647: }
  3540                           ;RoboticArm.c: 649: if(((RX_PORTA & 0b00000100)==0))
  3541                           
  3542                           ; BSR set to: 0
  3543  002ED0  B5FE               	btfsc	_RX_PORTA& (0+255),2,b
  3544  002ED2  EF1E  F011         	goto	u6980
  3545                           
  3546                           ; BSR set to: 0
  3547                           ;RoboticArm.c: 650: {
  3548                           ;RoboticArm.c: 651: lwrist_steps= -1;
  3549  002ED6  69ED               	setf	_lwrist_steps& (0+255),b
  3550  002ED8  69EE               	setf	(_lwrist_steps+1)& (0+255),b
  3551                           
  3552                           ;RoboticArm.c: 652: rwrist_steps= -1;
  3553  002EDA  69E9               	setf	_rwrist_steps& (0+255),b
  3554  002EDC  69EA               	setf	(_rwrist_steps+1)& (0+255),b
  3555                           
  3556                           ;RoboticArm.c: 653: T4CONbits.ON=1;
  3557  002EDE  013F               	movlb	63	; () banked
  3558  002EE0  8FA0               	bsf	160,7,b	;volatile
  3559                           
  3560                           ;RoboticArm.c: 654: T6CONbits.ON=1;
  3561  002EE2  8F94               	bsf	148,7,b	;volatile
  3562                           
  3563                           ; BSR set to: 63
  3564                           ;RoboticArm.c: 655: pitch_roll_state = 16;
  3565  002EE4  0E10               	movlw	16
  3566  002EE6  D01F               	goto	L22
  3567  002EE8                     l1096:
  3568                           
  3569                           ; BSR set to: 0
  3570                           ;RoboticArm.c: 660: if (((RX_PORTB & 0b00100000)!=0))
  3571  002EE8  ABFD               	btfss	_RX_PORTB& (0+255),5,b
  3572  002EEA  EF1E  F011         	goto	u6980
  3573                           
  3574                           ; BSR set to: 0
  3575                           ;RoboticArm.c: 661: {
  3576                           ;RoboticArm.c: 662: T4CONbits.ON=0;
  3577  002EEE  013F               	movlb	63	; () banked
  3578  002EF0  9FA0               	bcf	160,7,b	;volatile
  3579                           
  3580                           ;RoboticArm.c: 663: T6CONbits.ON=0;
  3581  002EF2  9F94               	bcf	148,7,b	;volatile
  3582                           
  3583                           ; BSR set to: 63
  3584                           ;RoboticArm.c: 664: pitch_roll_state = 0;
  3585  002EF4  0E00               	movlw	0
  3586  002EF6  D017               	goto	L22
  3587  002EF8                     l1098:
  3588                           
  3589                           ; BSR set to: 0
  3590                           ;RoboticArm.c: 669: if (((RX_PORTB & 0b00000001)!=0))
  3591  002EF8  A1FD               	btfss	_RX_PORTB& (0+255),0,b
  3592  002EFA  EF1E  F011         	goto	u6980
  3593                           
  3594                           ; BSR set to: 0
  3595                           ;RoboticArm.c: 670: {
  3596                           ;RoboticArm.c: 671: T4CONbits.ON=0;
  3597  002EFE  013F               	movlb	63	; () banked
  3598  002F00  9FA0               	bcf	160,7,b	;volatile
  3599                           
  3600                           ;RoboticArm.c: 672: T6CONbits.ON=0;
  3601  002F02  9F94               	bcf	148,7,b	;volatile
  3602                           
  3603                           ; BSR set to: 63
  3604                           ;RoboticArm.c: 673: pitch_roll_state = 0;
  3605  002F04  0E00               	movlw	0
  3606  002F06  D00F               	goto	L22
  3607  002F08                     l1100:
  3608                           
  3609                           ; BSR set to: 0
  3610                           ;RoboticArm.c: 678: if (((RX_PORTA & 0b00001000)!=0))
  3611  002F08  A7FE               	btfss	_RX_PORTA& (0+255),3,b
  3612  002F0A  EF1E  F011         	goto	u6980
  3613                           
  3614                           ; BSR set to: 0
  3615                           ;RoboticArm.c: 679: {
  3616                           ;RoboticArm.c: 680: T4CONbits.ON=0;
  3617  002F0E  013F               	movlb	63	; () banked
  3618  002F10  9FA0               	bcf	160,7,b	;volatile
  3619                           
  3620                           ;RoboticArm.c: 681: T6CONbits.ON=0;
  3621  002F12  9F94               	bcf	148,7,b	;volatile
  3622                           
  3623                           ; BSR set to: 63
  3624                           ;RoboticArm.c: 682: pitch_roll_state = 0;
  3625  002F14  0E00               	movlw	0
  3626  002F16  D007               	goto	L22
  3627  002F18                     l1102:
  3628                           
  3629                           ; BSR set to: 0
  3630                           ;RoboticArm.c: 687: if (((RX_PORTA & 0b00000100)!=0))
  3631  002F18  A5FE               	btfss	_RX_PORTA& (0+255),2,b
  3632  002F1A  EF1E  F011         	goto	u6980
  3633                           
  3634                           ; BSR set to: 0
  3635                           ;RoboticArm.c: 688: {
  3636                           ;RoboticArm.c: 689: T4CONbits.ON=0;
  3637  002F1E  013F               	movlb	63	; () banked
  3638  002F20  9FA0               	bcf	160,7,b	;volatile
  3639                           
  3640                           ;RoboticArm.c: 690: T6CONbits.ON=0;
  3641  002F22  9F94               	bcf	148,7,b	;volatile
  3642                           
  3643                           ; BSR set to: 63
  3644                           ;RoboticArm.c: 691: pitch_roll_state = 0;
  3645  002F24  0E00               	movlw	0
  3646  002F26                     L22:
  3647  002F26  0100               	movlb	0	; () banked
  3648  002F28  6FB7               	movwf	main@pitch_roll_state& (0+255),b
  3649                           
  3650                           ; BSR set to: 0
  3651                           ;RoboticArm.c: 694: }
  3652                           
  3653                           ; BSR set to: 0
  3654                           ;RoboticArm.c: 692: }
  3655                           ;RoboticArm.c: 693: break;
  3656  002F2A  EF1E  F011         	goto	u6980
  3657  002F2E                     l1089:
  3658                           
  3659                           ; BSR set to: 0
  3660  002F2E  0100               	movlb	0	; () banked
  3661  002F30  51B7               	movf	main@pitch_roll_state& (0+255),w,b
  3662                           
  3663                           ; Switch size 1, requested type "space"
  3664                           ; Number of cases is 5, Range of values is 0 to 16
  3665                           ; switch strategies available:
  3666                           ; Name         Instructions Cycles
  3667                           ; simple_byte           16     9 (average)
  3668                           ;	Chosen strategy is simple_byte
  3669  002F32  0A00               	xorlw	0	; case 0
  3670  002F34  B4D8               	btfsc	16344,2,c
  3671  002F36  D79D               	goto	l1090
  3672  002F38  0A0D               	xorlw	13	; case 13
  3673  002F3A  B4D8               	btfsc	16344,2,c
  3674  002F3C  D7D5               	goto	l1096
  3675  002F3E  0A03               	xorlw	3	; case 14
  3676  002F40  B4D8               	btfsc	16344,2,c
  3677  002F42  D7DA               	goto	l1098
  3678  002F44  0A01               	xorlw	1	; case 15
  3679  002F46  B4D8               	btfsc	16344,2,c
  3680  002F48  D7DF               	goto	l1100
  3681  002F4A  0A1F               	xorlw	31	; case 16
  3682  002F4C  B4D8               	btfsc	16344,2,c
  3683  002F4E  D7E4               	goto	l1102
  3684                           
  3685                           ; BSR set to: 0
  3686                           
  3687                           ; BSR set to: 0
  3688  002F50  EF1E  F011         	goto	u6980
  3689  002F54                     __end_of_main:
  3690                           	opt stack 0
  3691                           
  3692 ;; *************** function _values_update *****************
  3693 ;; Defined at:
  3694 ;;		line 120 in file "RoboticArm.c"
  3695 ;; Parameters:    Size  Location     Type
  3696 ;;		None
  3697 ;; Auto vars:     Size  Location     Type
  3698 ;;		None
  3699 ;; Return value:  Size  Location     Type
  3700 ;;                  1    wreg      void 
  3701 ;; Registers used:
  3702 ;;		None
  3703 ;; Tracked objects:
  3704 ;;		On entry : 0/0
  3705 ;;		On exit  : 0/0
  3706 ;;		Unchanged: 0/0
  3707 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
  3708 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  3709 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  3710 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  3711 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  3712 ;;Total ram usage:        0 bytes
  3713 ;; Hardware stack levels used:    1
  3714 ;; Hardware stack levels required when called:    6
  3715 ;; This function calls:
  3716 ;;		Nothing
  3717 ;; This function is called by:
  3718 ;;		_main
  3719 ;; This function uses a non-reentrant model
  3720 ;;
  3721                           
  3722                           	psect	text1
  3723  006548                     __ptext1:
  3724                           	opt stack 0
  3725  006548                     _values_update:
  3726                           	opt stack 24
  3727                           
  3728                           ;RoboticArm.c: 122: shoulder_rad= next_shoulder_rad;
  3729                           
  3730                           ; BSR set to: 0
  3731                           ;incstack = 0
  3732  006548  C134  F0C1         	movff	_next_shoulder_rad,_shoulder_rad
  3733  00654C  C135  F0C2         	movff	_next_shoulder_rad+1,_shoulder_rad+1
  3734  006550  C136  F0C3         	movff	_next_shoulder_rad+2,_shoulder_rad+2
  3735  006554  C137  F0C4         	movff	_next_shoulder_rad+3,_shoulder_rad+3
  3736                           
  3737                           ;RoboticArm.c: 123: elbow_rad = next_elbow_rad;
  3738  006558  C130  F144         	movff	_next_elbow_rad,_elbow_rad
  3739  00655C  C131  F145         	movff	_next_elbow_rad+1,_elbow_rad+1
  3740  006560  C132  F146         	movff	_next_elbow_rad+2,_elbow_rad+2
  3741  006564  C133  F147         	movff	_next_elbow_rad+3,_elbow_rad+3
  3742                           
  3743                           ;RoboticArm.c: 124: shoulder_steps = next_shoulder_steps;
  3744  006568  0060  F38C  F04D   	movff	_next_shoulder_steps,_shoulder_steps
  3745  00656E  0060  F390  F04E   	movff	_next_shoulder_steps+1,_shoulder_steps+1
  3746                           
  3747                           ;RoboticArm.c: 125: elbow_steps = next_elbow_steps;
  3748  006574  C0E1  F0E5         	movff	_next_elbow_steps,_elbow_steps
  3749  006578  C0E2  F0E6         	movff	_next_elbow_steps+1,_elbow_steps+1
  3750                           
  3751                           ;RoboticArm.c: 126: grip_steps = next_grip_steps;
  3752  00657C  C0DF  F0DD         	movff	_next_grip_steps,_grip_steps
  3753  006580  C0E0  F0DE         	movff	_next_grip_steps+1,_grip_steps+1
  3754  006584  0012               	return		;funcret
  3755  006586                     __end_of_values_update:
  3756                           	opt stack 0
  3757                           
  3758 ;; *************** function _steps_calculation *****************
  3759 ;; Defined at:
  3760 ;;		line 94 in file "RoboticArm.c"
  3761 ;; Parameters:    Size  Location     Type
  3762 ;;		None
  3763 ;; Auto vars:     Size  Location     Type
  3764 ;;		None
  3765 ;; Return value:  Size  Location     Type
  3766 ;;                  1    wreg      void 
  3767 ;; Registers used:
  3768 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3769 ;; Tracked objects:
  3770 ;;		On entry : 0/0
  3771 ;;		On exit  : 0/0
  3772 ;;		Unchanged: 0/0
  3773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
  3774 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  3775 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  3776 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  3777 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  3778 ;;Total ram usage:        8 bytes
  3779 ;; Hardware stack levels used:    1
  3780 ;; Hardware stack levels required when called:    9
  3781 ;; This function calls:
  3782 ;;		___fladd
  3783 ;;		___flmul
  3784 ;;		___flneg
  3785 ;;		___fltol
  3786 ;;		_round
  3787 ;; This function is called by:
  3788 ;;		_main
  3789 ;; This function uses a non-reentrant model
  3790 ;;
  3791                           
  3792                           	psect	text2
  3793  0052C4                     __ptext2:
  3794                           	opt stack 0
  3795  0052C4                     _steps_calculation:
  3796                           	opt stack 21
  3797                           
  3798                           ;RoboticArm.c: 96: shoulder_steps = round((shoulder_rad - real_shoulder_rad) * 1125.0);
  3799                           
  3800                           ;incstack = 0
  3801  0052C4  0E00               	movlw	0
  3802  0052C6  0100               	movlb	0	; () banked
  3803  0052C8  6F68               	movwf	___flmul@a& (0+255),b
  3804  0052CA  0EA0               	movlw	160
  3805  0052CC  6F69               	movwf	(___flmul@a+1)& (0+255),b
  3806  0052CE  0E8C               	movlw	140
  3807  0052D0  6F6A               	movwf	(___flmul@a+2)& (0+255),b
  3808  0052D2  0E44               	movlw	68
  3809  0052D4  6F6B               	movwf	(___flmul@a+3)& (0+255),b
  3810  0052D6  0060  F304  F039   	movff	_shoulder_rad,___fladd@a
  3811  0052DC  0060  F308  F03A   	movff	_shoulder_rad+1,___fladd@a+1
  3812  0052E2  0060  F30C  F03B   	movff	_shoulder_rad+2,___fladd@a+2
  3813  0052E8  0060  F310  F03C   	movff	_shoulder_rad+3,___fladd@a+3
  3814  0052EE  0060  F2F4  F01C   	movff	_real_shoulder_rad,___flneg@f1
  3815  0052F4  0060  F2F8  F01D   	movff	_real_shoulder_rad+1,___flneg@f1+1
  3816  0052FA  0060  F2FC  F01E   	movff	_real_shoulder_rad+2,___flneg@f1+2
  3817  005300  0060  F300  F01F   	movff	_real_shoulder_rad+3,___flneg@f1+3
  3818  005306  ECFE  F032         	call	___flneg	;wreg free
  3819  00530A  0060  F070  F035   	movff	?___flneg,___fladd@b
  3820  005310  0060  F074  F036   	movff	?___flneg+1,___fladd@b+1
  3821  005316  0060  F078  F037   	movff	?___flneg+2,___fladd@b+2
  3822  00531C  0060  F07C  F038   	movff	?___flneg+3,___fladd@b+3
  3823  005322  EC78  F020         	call	___fladd	;wreg free
  3824  005326  0060  F0D4  F064   	movff	?___fladd,___flmul@b
  3825  00532C  0060  F0D8  F065   	movff	?___fladd+1,___flmul@b+1
  3826  005332  0060  F0DC  F066   	movff	?___fladd+2,___flmul@b+2
  3827  005338  0060  F0E0  F067   	movff	?___fladd+3,___flmul@b+3
  3828  00533E  EC9F  F01E         	call	___flmul	;wreg free
  3829  005342  0060  F190  F097   	movff	?___flmul,_steps_calculation$2452
  3830  005348  0060  F194  F098   	movff	?___flmul+1,_steps_calculation$2452+1
  3831  00534E  0060  F198  F099   	movff	?___flmul+2,_steps_calculation$2452+2
  3832  005354  0060  F19C  F09A   	movff	?___flmul+3,_steps_calculation$2452+3
  3833                           
  3834                           ;RoboticArm.c: 96: shoulder_steps = round((shoulder_rad - real_shoulder_rad) * 1125.0);
  3835  00535A  0060  F25C  F08F   	movff	_steps_calculation$2452,round@x
  3836  005360  0060  F260  F090   	movff	_steps_calculation$2452+1,round@x+1
  3837  005366  0060  F264  F091   	movff	_steps_calculation$2452+2,round@x+2
  3838  00536C  0060  F268  F092   	movff	_steps_calculation$2452+3,round@x+3
  3839  005372  EC22  F02F         	call	_round	;wreg free
  3840  005376  0060  F23C  F09B   	movff	?_round,_steps_calculation$2453
  3841  00537C  0060  F240  F09C   	movff	?_round+1,_steps_calculation$2453+1
  3842  005382  0060  F244  F09D   	movff	?_round+2,_steps_calculation$2453+2
  3843  005388  0060  F248  F09E   	movff	?_round+3,_steps_calculation$2453+3
  3844                           
  3845                           ;RoboticArm.c: 96: shoulder_steps = round((shoulder_rad - real_shoulder_rad) * 1125.0);
  3846  00538E  0060  F26C  F07D   	movff	_steps_calculation$2453,___fltol@f1
  3847  005394  0060  F270  F07E   	movff	_steps_calculation$2453+1,___fltol@f1+1
  3848  00539A  0060  F274  F07F   	movff	_steps_calculation$2453+2,___fltol@f1+2
  3849  0053A0  0060  F278  F080   	movff	_steps_calculation$2453+3,___fltol@f1+3
  3850  0053A6  ECA5  F02F         	call	___fltol	;wreg free
  3851  0053AA  0060  F1F4  F04D   	movff	?___fltol,_shoulder_steps
  3852  0053B0  0060  F1F8  F04E   	movff	?___fltol+1,_shoulder_steps+1
  3853                           
  3854                           ;RoboticArm.c: 97: elbow_steps = round((elbow_rad - real_elbow_rad) * 672.0);
  3855  0053B6  0E00               	movlw	0
  3856  0053B8  0100               	movlb	0	; () banked
  3857  0053BA  6F68               	movwf	___flmul@a& (0+255),b
  3858  0053BC  0E00               	movlw	0
  3859  0053BE  6F69               	movwf	(___flmul@a+1)& (0+255),b
  3860  0053C0  0E28               	movlw	40
  3861  0053C2  6F6A               	movwf	(___flmul@a+2)& (0+255),b
  3862  0053C4  0E44               	movlw	68
  3863  0053C6  6F6B               	movwf	(___flmul@a+3)& (0+255),b
  3864  0053C8  0060  F510  F039   	movff	_elbow_rad,___fladd@a
  3865  0053CE  0060  F514  F03A   	movff	_elbow_rad+1,___fladd@a+1
  3866  0053D4  0060  F518  F03B   	movff	_elbow_rad+2,___fladd@a+2
  3867  0053DA  0060  F51C  F03C   	movff	_elbow_rad+3,___fladd@a+3
  3868  0053E0  0060  F2E4  F01C   	movff	_real_elbow_rad,___flneg@f1
  3869  0053E6  0060  F2E8  F01D   	movff	_real_elbow_rad+1,___flneg@f1+1
  3870  0053EC  0060  F2EC  F01E   	movff	_real_elbow_rad+2,___flneg@f1+2
  3871  0053F2  0060  F2F0  F01F   	movff	_real_elbow_rad+3,___flneg@f1+3
  3872  0053F8  ECFE  F032         	call	___flneg	;wreg free
  3873  0053FC  0060  F070  F035   	movff	?___flneg,___fladd@b
  3874  005402  0060  F074  F036   	movff	?___flneg+1,___fladd@b+1
  3875  005408  0060  F078  F037   	movff	?___flneg+2,___fladd@b+2
  3876  00540E  0060  F07C  F038   	movff	?___flneg+3,___fladd@b+3
  3877  005414  EC78  F020         	call	___fladd	;wreg free
  3878  005418  0060  F0D4  F064   	movff	?___fladd,___flmul@b
  3879  00541E  0060  F0D8  F065   	movff	?___fladd+1,___flmul@b+1
  3880  005424  0060  F0DC  F066   	movff	?___fladd+2,___flmul@b+2
  3881  00542A  0060  F0E0  F067   	movff	?___fladd+3,___flmul@b+3
  3882  005430  EC9F  F01E         	call	___flmul	;wreg free
  3883  005434  0060  F190  F097   	movff	?___flmul,_steps_calculation$2452
  3884  00543A  0060  F194  F098   	movff	?___flmul+1,_steps_calculation$2452+1
  3885  005440  0060  F198  F099   	movff	?___flmul+2,_steps_calculation$2452+2
  3886  005446  0060  F19C  F09A   	movff	?___flmul+3,_steps_calculation$2452+3
  3887                           
  3888                           ;RoboticArm.c: 97: elbow_steps = round((elbow_rad - real_elbow_rad) * 672.0);
  3889  00544C  0060  F25C  F08F   	movff	_steps_calculation$2452,round@x
  3890  005452  0060  F260  F090   	movff	_steps_calculation$2452+1,round@x+1
  3891  005458  0060  F264  F091   	movff	_steps_calculation$2452+2,round@x+2
  3892  00545E  0060  F268  F092   	movff	_steps_calculation$2452+3,round@x+3
  3893  005464  EC22  F02F         	call	_round	;wreg free
  3894  005468  0060  F23C  F09B   	movff	?_round,_steps_calculation$2453
  3895  00546E  0060  F240  F09C   	movff	?_round+1,_steps_calculation$2453+1
  3896  005474  0060  F244  F09D   	movff	?_round+2,_steps_calculation$2453+2
  3897  00547A  0060  F248  F09E   	movff	?_round+3,_steps_calculation$2453+3
  3898                           
  3899                           ;RoboticArm.c: 97: elbow_steps = round((elbow_rad - real_elbow_rad) * 672.0);
  3900  005480  0060  F26C  F07D   	movff	_steps_calculation$2453,___fltol@f1
  3901  005486  0060  F270  F07E   	movff	_steps_calculation$2453+1,___fltol@f1+1
  3902  00548C  0060  F274  F07F   	movff	_steps_calculation$2453+2,___fltol@f1+2
  3903  005492  0060  F278  F080   	movff	_steps_calculation$2453+3,___fltol@f1+3
  3904  005498  ECA5  F02F         	call	___fltol	;wreg free
  3905  00549C  0060  F1F4  F0E5   	movff	?___fltol,_elbow_steps
  3906  0054A2  0060  F1F8  F0E6   	movff	?___fltol+1,_elbow_steps+1
  3907                           
  3908                           ;RoboticArm.c: 98: grip_steps = elbow_steps;
  3909  0054A8  C0E5  F0DD         	movff	_elbow_steps,_grip_steps
  3910  0054AC  C0E6  F0DE         	movff	_elbow_steps+1,_grip_steps+1
  3911  0054B0  0012               	return		;funcret
  3912  0054B2                     __end_of_steps_calculation:
  3913                           	opt stack 0
  3914                           
  3915 ;; *************** function _real_rad_calculation *****************
  3916 ;; Defined at:
  3917 ;;		line 108 in file "RoboticArm.c"
  3918 ;; Parameters:    Size  Location     Type
  3919 ;;		None
  3920 ;; Auto vars:     Size  Location     Type
  3921 ;;		None
  3922 ;; Return value:  Size  Location     Type
  3923 ;;                  1    wreg      void 
  3924 ;; Registers used:
  3925 ;;		wreg, status,2, status,0, cstack
  3926 ;; Tracked objects:
  3927 ;;		On entry : 0/0
  3928 ;;		On exit  : 0/0
  3929 ;;		Unchanged: 0/0
  3930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
  3931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  3932 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  3933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  3934 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  3935 ;;Total ram usage:        0 bytes
  3936 ;; Hardware stack levels used:    1
  3937 ;; Hardware stack levels required when called:    7
  3938 ;; This function calls:
  3939 ;;		___fladd
  3940 ;;		___fldiv
  3941 ;;		___xxtofl
  3942 ;; This function is called by:
  3943 ;;		_main
  3944 ;; This function uses a non-reentrant model
  3945 ;;
  3946                           
  3947                           	psect	text3
  3948  005BF6                     __ptext3:
  3949                           	opt stack 0
  3950  005BF6                     _real_rad_calculation:
  3951                           	opt stack 23
  3952                           
  3953                           ;RoboticArm.c: 110: real_shoulder_rad += ((float)shoulder_steps / 1125.0);
  3954                           
  3955                           ;incstack = 0
  3956  005BF6  0060  F2F4  F035   	movff	_real_shoulder_rad,___fladd@b
  3957  005BFC  0060  F2F8  F036   	movff	_real_shoulder_rad+1,___fladd@b+1
  3958  005C02  0060  F2FC  F037   	movff	_real_shoulder_rad+2,___fladd@b+2
  3959  005C08  0060  F300  F038   	movff	_real_shoulder_rad+3,___fladd@b+3
  3960  005C0E  0E00               	movlw	0
  3961  005C10  6E20               	movwf	___fldiv@a,c
  3962  005C12  0EA0               	movlw	160
  3963  005C14  6E21               	movwf	___fldiv@a+1,c
  3964  005C16  0E8C               	movlw	140
  3965  005C18  6E22               	movwf	___fldiv@a+2,c
  3966  005C1A  0E44               	movlw	68
  3967  005C1C  6E23               	movwf	___fldiv@a+3,c
  3968  005C1E  0060  F134  F00E   	movff	_shoulder_steps,___xxtofl@val
  3969  005C24  0060  F138  F00F   	movff	_shoulder_steps+1,___xxtofl@val+1
  3970  005C2A  0E00               	movlw	0
  3971  005C2C  BE0F               	btfsc	___xxtofl@val+1,7,c
  3972  005C2E  0EFF               	movlw	-1
  3973  005C30  6E10               	movwf	___xxtofl@val+2,c
  3974  005C32  6E11               	movwf	___xxtofl@val+3,c
  3975  005C34  0E01               	movlw	1
  3976  005C36  EC50  F02B         	call	___xxtofl
  3977  005C3A  0060  F038  F01C   	movff	?___xxtofl,___fldiv@b
  3978  005C40  0060  F03C  F01D   	movff	?___xxtofl+1,___fldiv@b+1
  3979  005C46  0060  F040  F01E   	movff	?___xxtofl+2,___fldiv@b+2
  3980  005C4C  0060  F044  F01F   	movff	?___xxtofl+3,___fldiv@b+3
  3981  005C52  EC45  F025         	call	___fldiv	;wreg free
  3982  005C56  0060  F070  F039   	movff	?___fldiv,___fladd@a
  3983  005C5C  0060  F074  F03A   	movff	?___fldiv+1,___fladd@a+1
  3984  005C62  0060  F078  F03B   	movff	?___fldiv+2,___fladd@a+2
  3985  005C68  0060  F07C  F03C   	movff	?___fldiv+3,___fladd@a+3
  3986  005C6E  EC78  F020         	call	___fladd	;wreg free
  3987  005C72  0060  F0D4  F0BD   	movff	?___fladd,_real_shoulder_rad
  3988  005C78  0060  F0D8  F0BE   	movff	?___fladd+1,_real_shoulder_rad+1
  3989  005C7E  0060  F0DC  F0BF   	movff	?___fladd+2,_real_shoulder_rad+2
  3990  005C84  0060  F0E0  F0C0   	movff	?___fladd+3,_real_shoulder_rad+3
  3991                           
  3992                           ;RoboticArm.c: 111: real_elbow_rad += ((float)elbow_steps / 672.0);
  3993  005C8A  0060  F2E4  F035   	movff	_real_elbow_rad,___fladd@b
  3994  005C90  0060  F2E8  F036   	movff	_real_elbow_rad+1,___fladd@b+1
  3995  005C96  0060  F2EC  F037   	movff	_real_elbow_rad+2,___fladd@b+2
  3996  005C9C  0060  F2F0  F038   	movff	_real_elbow_rad+3,___fladd@b+3
  3997  005CA2  0E00               	movlw	0
  3998  005CA4  6E20               	movwf	___fldiv@a,c
  3999  005CA6  0E00               	movlw	0
  4000  005CA8  6E21               	movwf	___fldiv@a+1,c
  4001  005CAA  0E28               	movlw	40
  4002  005CAC  6E22               	movwf	___fldiv@a+2,c
  4003  005CAE  0E44               	movlw	68
  4004  005CB0  6E23               	movwf	___fldiv@a+3,c
  4005  005CB2  0060  F394  F00E   	movff	_elbow_steps,___xxtofl@val
  4006  005CB8  0060  F398  F00F   	movff	_elbow_steps+1,___xxtofl@val+1
  4007  005CBE  0E00               	movlw	0
  4008  005CC0  BE0F               	btfsc	___xxtofl@val+1,7,c
  4009  005CC2  0EFF               	movlw	-1
  4010  005CC4  6E10               	movwf	___xxtofl@val+2,c
  4011  005CC6  6E11               	movwf	___xxtofl@val+3,c
  4012  005CC8  0E01               	movlw	1
  4013  005CCA  EC50  F02B         	call	___xxtofl
  4014  005CCE  0060  F038  F01C   	movff	?___xxtofl,___fldiv@b
  4015  005CD4  0060  F03C  F01D   	movff	?___xxtofl+1,___fldiv@b+1
  4016  005CDA  0060  F040  F01E   	movff	?___xxtofl+2,___fldiv@b+2
  4017  005CE0  0060  F044  F01F   	movff	?___xxtofl+3,___fldiv@b+3
  4018  005CE6  EC45  F025         	call	___fldiv	;wreg free
  4019  005CEA  0060  F070  F039   	movff	?___fldiv,___fladd@a
  4020  005CF0  0060  F074  F03A   	movff	?___fldiv+1,___fladd@a+1
  4021  005CF6  0060  F078  F03B   	movff	?___fldiv+2,___fladd@a+2
  4022  005CFC  0060  F07C  F03C   	movff	?___fldiv+3,___fladd@a+3
  4023  005D02  EC78  F020         	call	___fladd	;wreg free
  4024  005D06  0060  F0D4  F0B9   	movff	?___fladd,_real_elbow_rad
  4025  005D0C  0060  F0D8  F0BA   	movff	?___fladd+1,_real_elbow_rad+1
  4026  005D12  0060  F0DC  F0BB   	movff	?___fladd+2,_real_elbow_rad+2
  4027  005D18  0060  F0E0  F0BC   	movff	?___fladd+3,_real_elbow_rad+3
  4028  005D1E  0012               	return		;funcret
  4029  005D20                     __end_of_real_rad_calculation:
  4030                           	opt stack 0
  4031                           
  4032 ;; *************** function _rad_copy *****************
  4033 ;; Defined at:
  4034 ;;		line 114 in file "RoboticArm.c"
  4035 ;; Parameters:    Size  Location     Type
  4036 ;;		None
  4037 ;; Auto vars:     Size  Location     Type
  4038 ;;		None
  4039 ;; Return value:  Size  Location     Type
  4040 ;;                  1    wreg      void 
  4041 ;; Registers used:
  4042 ;;		None
  4043 ;; Tracked objects:
  4044 ;;		On entry : 0/0
  4045 ;;		On exit  : 0/0
  4046 ;;		Unchanged: 0/0
  4047 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
  4048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  4049 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  4050 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  4051 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  4052 ;;Total ram usage:        0 bytes
  4053 ;; Hardware stack levels used:    1
  4054 ;; Hardware stack levels required when called:    6
  4055 ;; This function calls:
  4056 ;;		Nothing
  4057 ;; This function is called by:
  4058 ;;		_main
  4059 ;; This function uses a non-reentrant model
  4060 ;;
  4061                           
  4062                           	psect	text4
  4063  006980                     __ptext4:
  4064                           	opt stack 0
  4065  006980                     _rad_copy:
  4066                           	opt stack 24
  4067                           
  4068                           ;RoboticArm.c: 116: real_shoulder_rad= shoulder_rad;
  4069                           
  4070                           ;incstack = 0
  4071  006980  C0C1  F0BD         	movff	_shoulder_rad,_real_shoulder_rad
  4072  006984  C0C2  F0BE         	movff	_shoulder_rad+1,_real_shoulder_rad+1
  4073  006988  C0C3  F0BF         	movff	_shoulder_rad+2,_real_shoulder_rad+2
  4074  00698C  C0C4  F0C0         	movff	_shoulder_rad+3,_real_shoulder_rad+3
  4075                           
  4076                           ;RoboticArm.c: 117: real_elbow_rad = elbow_rad;
  4077  006990  C144  F0B9         	movff	_elbow_rad,_real_elbow_rad
  4078  006994  C145  F0BA         	movff	_elbow_rad+1,_real_elbow_rad+1
  4079  006998  C146  F0BB         	movff	_elbow_rad+2,_real_elbow_rad+2
  4080  00699C  C147  F0BC         	movff	_elbow_rad+3,_real_elbow_rad+3
  4081  0069A0  0012               	return		;funcret
  4082  0069A2                     __end_of_rad_copy:
  4083                           	opt stack 0
  4084                           
  4085 ;; *************** function _rad_calculation_manual *****************
  4086 ;; Defined at:
  4087 ;;		line 74 in file "RoboticArm.c"
  4088 ;; Parameters:    Size  Location     Type
  4089 ;;		None
  4090 ;; Auto vars:     Size  Location     Type
  4091 ;;		None
  4092 ;; Return value:  Size  Location     Type
  4093 ;;                  1    wreg      void 
  4094 ;; Registers used:
  4095 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4096 ;; Tracked objects:
  4097 ;;		On entry : 0/0
  4098 ;;		On exit  : 0/0
  4099 ;;		Unchanged: 0/0
  4100 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
  4101 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  4102 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  4103 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  4104 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  4105 ;;Total ram usage:        4 bytes
  4106 ;; Hardware stack levels used:    1
  4107 ;; Hardware stack levels required when called:    9
  4108 ;; This function calls:
  4109 ;;		___fladd
  4110 ;;		___fldiv
  4111 ;;		___flmul
  4112 ;;		___flneg
  4113 ;;		_atan
  4114 ;;		_sqrt
  4115 ;; This function is called by:
  4116 ;;		_main
  4117 ;; This function uses a non-reentrant model
  4118 ;;
  4119                           
  4120                           	psect	text5
  4121  004D70                     __ptext5:
  4122                           	opt stack 0
  4123  004D70                     _rad_calculation_manual:
  4124                           	opt stack 21
  4125                           
  4126                           ;RoboticArm.c: 76: beta = atan(Z0/R0);
  4127                           
  4128                           ;incstack = 0
  4129  004D70  0060  F324  F01C   	movff	_Z0,___fldiv@b
  4130  004D76  0060  F328  F01D   	movff	_Z0+1,___fldiv@b+1
  4131  004D7C  0060  F32C  F01E   	movff	_Z0+2,___fldiv@b+2
  4132  004D82  0060  F330  F01F   	movff	_Z0+3,___fldiv@b+3
  4133  004D88  0060  F334  F020   	movff	_R0,___fldiv@a
  4134  004D8E  0060  F338  F021   	movff	_R0+1,___fldiv@a+1
  4135  004D94  0060  F33C  F022   	movff	_R0+2,___fldiv@a+2
  4136  004D9A  0060  F340  F023   	movff	_R0+3,___fldiv@a+3
  4137  004DA0  EC45  F025         	call	___fldiv	;wreg free
  4138  004DA4  0060  F070  F0AF   	movff	?___fldiv,_rad_calculation_manual$2450
  4139  004DAA  0060  F074  F0B0   	movff	?___fldiv+1,_rad_calculation_manual$2450+1
  4140  004DB0  0060  F078  F0B1   	movff	?___fldiv+2,_rad_calculation_manual$2450+2
  4141  004DB6  0060  F07C  F0B2   	movff	?___fldiv+3,_rad_calculation_manual$2450+3
  4142                           
  4143                           ;RoboticArm.c: 76: beta = atan(Z0/R0);
  4144  004DBC  0060  F2BC  F09A   	movff	_rad_calculation_manual$2450,atan@f
  4145  004DC2  0060  F2C0  F09B   	movff	_rad_calculation_manual$2450+1,atan@f+1
  4146  004DC8  0060  F2C4  F09C   	movff	_rad_calculation_manual$2450+2,atan@f+2
  4147  004DCE  0060  F2C8  F09D   	movff	_rad_calculation_manual$2450+3,atan@f+3
  4148  004DD4  ECCE  F023         	call	_atan	;wreg free
  4149  004DD8  0060  F268  F0C5   	movff	?_atan,_beta
  4150  004DDE  0060  F26C  F0C6   	movff	?_atan+1,_beta+1
  4151  004DE4  0060  F270  F0C7   	movff	?_atan+2,_beta+2
  4152  004DEA  0060  F274  F0C8   	movff	?_atan+3,_beta+3
  4153                           
  4154                           ;RoboticArm.c: 77: alfa = (R0*R0+Z0*Z0);
  4155  004DF0  0060  F334  F068   	movff	_R0,___flmul@a
  4156  004DF6  0060  F338  F069   	movff	_R0+1,___flmul@a+1
  4157  004DFC  0060  F33C  F06A   	movff	_R0+2,___flmul@a+2
  4158  004E02  0060  F340  F06B   	movff	_R0+3,___flmul@a+3
  4159  004E08  0060  F334  F064   	movff	_R0,___flmul@b
  4160  004E0E  0060  F338  F065   	movff	_R0+1,___flmul@b+1
  4161  004E14  0060  F33C  F066   	movff	_R0+2,___flmul@b+2
  4162  004E1A  0060  F340  F067   	movff	_R0+3,___flmul@b+3
  4163  004E20  EC9F  F01E         	call	___flmul	;wreg free
  4164  004E24  0060  F190  F035   	movff	?___flmul,___fladd@b
  4165  004E2A  0060  F194  F036   	movff	?___flmul+1,___fladd@b+1
  4166  004E30  0060  F198  F037   	movff	?___flmul+2,___fladd@b+2
  4167  004E36  0060  F19C  F038   	movff	?___flmul+3,___fladd@b+3
  4168  004E3C  0060  F324  F068   	movff	_Z0,___flmul@a
  4169  004E42  0060  F328  F069   	movff	_Z0+1,___flmul@a+1
  4170  004E48  0060  F32C  F06A   	movff	_Z0+2,___flmul@a+2
  4171  004E4E  0060  F330  F06B   	movff	_Z0+3,___flmul@a+3
  4172  004E54  0060  F324  F064   	movff	_Z0,___flmul@b
  4173  004E5A  0060  F328  F065   	movff	_Z0+1,___flmul@b+1
  4174  004E60  0060  F32C  F066   	movff	_Z0+2,___flmul@b+2
  4175  004E66  0060  F330  F067   	movff	_Z0+3,___flmul@b+3
  4176  004E6C  EC9F  F01E         	call	___flmul	;wreg free
  4177  004E70  0060  F190  F039   	movff	?___flmul,___fladd@a
  4178  004E76  0060  F194  F03A   	movff	?___flmul+1,___fladd@a+1
  4179  004E7C  0060  F198  F03B   	movff	?___flmul+2,___fladd@a+2
  4180  004E82  0060  F19C  F03C   	movff	?___flmul+3,___fladd@a+3
  4181  004E88  EC78  F020         	call	___fladd	;wreg free
  4182  004E8C  0060  F0D4  F0F5   	movff	?___fladd,_alfa
  4183  004E92  0060  F0D8  F0F6   	movff	?___fladd+1,_alfa+1
  4184  004E98  0060  F0DC  F0F7   	movff	?___fladd+2,_alfa+2
  4185  004E9E  0060  F0E0  F0F8   	movff	?___fladd+3,_alfa+3
  4186                           
  4187                           ;RoboticArm.c: 78: alfa = (4*177.8*177.8)/alfa-1;
  4188  004EA4  0060  F3D4  F020   	movff	_alfa,___fldiv@a
  4189  004EAA  0060  F3D8  F021   	movff	_alfa+1,___fldiv@a+1
  4190  004EB0  0060  F3DC  F022   	movff	_alfa+2,___fldiv@a+2
  4191  004EB6  0060  F3E0  F023   	movff	_alfa+3,___fldiv@a+3
  4192  004EBC  0EAE               	movlw	174
  4193  004EBE  6E1C               	movwf	___fldiv@b,c
  4194  004EC0  0EF9               	movlw	249
  4195  004EC2  6E1D               	movwf	___fldiv@b+1,c
  4196  004EC4  0EF6               	movlw	246
  4197  004EC6  6E1E               	movwf	___fldiv@b+2,c
  4198  004EC8  0E47               	movlw	71
  4199  004ECA  6E1F               	movwf	___fldiv@b+3,c
  4200  004ECC  EC45  F025         	call	___fldiv	;wreg free
  4201  004ED0  0060  F070  F035   	movff	?___fldiv,___fladd@b
  4202  004ED6  0060  F074  F036   	movff	?___fldiv+1,___fladd@b+1
  4203  004EDC  0060  F078  F037   	movff	?___fldiv+2,___fladd@b+2
  4204  004EE2  0060  F07C  F038   	movff	?___fldiv+3,___fladd@b+3
  4205  004EE8  0E00               	movlw	0
  4206  004EEA  6E39               	movwf	___fladd@a,c
  4207  004EEC  0E00               	movlw	0
  4208  004EEE  6E3A               	movwf	___fladd@a+1,c
  4209  004EF0  0E80               	movlw	128
  4210  004EF2  6E3B               	movwf	___fladd@a+2,c
  4211  004EF4  0EBF               	movlw	191
  4212  004EF6  6E3C               	movwf	___fladd@a+3,c
  4213  004EF8  EC78  F020         	call	___fladd	;wreg free
  4214  004EFC  0060  F0D4  F0F5   	movff	?___fladd,_alfa
  4215  004F02  0060  F0D8  F0F6   	movff	?___fladd+1,_alfa+1
  4216  004F08  0060  F0DC  F0F7   	movff	?___fladd+2,_alfa+2
  4217  004F0E  0060  F0E0  F0F8   	movff	?___fladd+3,_alfa+3
  4218                           
  4219                           ;RoboticArm.c: 79: alfa = atan(sqrt(alfa));
  4220  004F14  0060  F3D4  F07D   	movff	_alfa,sqrt@a
  4221  004F1A  0060  F3D8  F07E   	movff	_alfa+1,sqrt@a+1
  4222  004F20  0060  F3DC  F07F   	movff	_alfa+2,sqrt@a+2
  4223  004F26  0060  F3E0  F080   	movff	_alfa+3,sqrt@a+3
  4224  004F2C  EC38  F022         	call	_sqrt	;wreg free
  4225  004F30  0060  F1F4  F09A   	movff	?_sqrt,atan@f
  4226  004F36  0060  F1F8  F09B   	movff	?_sqrt+1,atan@f+1
  4227  004F3C  0060  F1FC  F09C   	movff	?_sqrt+2,atan@f+2
  4228  004F42  0060  F200  F09D   	movff	?_sqrt+3,atan@f+3
  4229  004F48  ECCE  F023         	call	_atan	;wreg free
  4230  004F4C  0060  F268  F0F5   	movff	?_atan,_alfa
  4231  004F52  0060  F26C  F0F6   	movff	?_atan+1,_alfa+1
  4232  004F58  0060  F270  F0F7   	movff	?_atan+2,_alfa+2
  4233  004F5E  0060  F274  F0F8   	movff	?_atan+3,_alfa+3
  4234                           
  4235                           ;RoboticArm.c: 80: shoulder_rad = alfa+beta;
  4236  004F64  0060  F3D4  F035   	movff	_alfa,___fladd@b
  4237  004F6A  0060  F3D8  F036   	movff	_alfa+1,___fladd@b+1
  4238  004F70  0060  F3DC  F037   	movff	_alfa+2,___fladd@b+2
  4239  004F76  0060  F3E0  F038   	movff	_alfa+3,___fladd@b+3
  4240  004F7C  0060  F314  F039   	movff	_beta,___fladd@a
  4241  004F82  0060  F318  F03A   	movff	_beta+1,___fladd@a+1
  4242  004F88  0060  F31C  F03B   	movff	_beta+2,___fladd@a+2
  4243  004F8E  0060  F320  F03C   	movff	_beta+3,___fladd@a+3
  4244  004F94  EC78  F020         	call	___fladd	;wreg free
  4245  004F98  0060  F0D4  F0C1   	movff	?___fladd,_shoulder_rad
  4246  004F9E  0060  F0D8  F0C2   	movff	?___fladd+1,_shoulder_rad+1
  4247  004FA4  0060  F0DC  F0C3   	movff	?___fladd+2,_shoulder_rad+2
  4248  004FAA  0060  F0E0  F0C4   	movff	?___fladd+3,_shoulder_rad+3
  4249                           
  4250                           ;RoboticArm.c: 81: elbow_rad = beta-alfa;
  4251  004FB0  0060  F3D4  F01C   	movff	_alfa,___flneg@f1
  4252  004FB6  0060  F3D8  F01D   	movff	_alfa+1,___flneg@f1+1
  4253  004FBC  0060  F3DC  F01E   	movff	_alfa+2,___flneg@f1+2
  4254  004FC2  0060  F3E0  F01F   	movff	_alfa+3,___flneg@f1+3
  4255  004FC8  ECFE  F032         	call	___flneg	;wreg free
  4256  004FCC  0060  F070  F035   	movff	?___flneg,___fladd@b
  4257  004FD2  0060  F074  F036   	movff	?___flneg+1,___fladd@b+1
  4258  004FD8  0060  F078  F037   	movff	?___flneg+2,___fladd@b+2
  4259  004FDE  0060  F07C  F038   	movff	?___flneg+3,___fladd@b+3
  4260  004FE4  0060  F314  F039   	movff	_beta,___fladd@a
  4261  004FEA  0060  F318  F03A   	movff	_beta+1,___fladd@a+1
  4262  004FF0  0060  F31C  F03B   	movff	_beta+2,___fladd@a+2
  4263  004FF6  0060  F320  F03C   	movff	_beta+3,___fladd@a+3
  4264  004FFC  EC78  F020         	call	___fladd	;wreg free
  4265  005000  0060  F0D4  F144   	movff	?___fladd,_elbow_rad
  4266  005006  0060  F0D8  F145   	movff	?___fladd+1,_elbow_rad+1
  4267  00500C  0060  F0DC  F146   	movff	?___fladd+2,_elbow_rad+2
  4268  005012  0060  F0E0  F147   	movff	?___fladd+3,_elbow_rad+3
  4269  005018  0012               	return		;funcret
  4270  00501A                     __end_of_rad_calculation_manual:
  4271                           	opt stack 0
  4272                           
  4273 ;; *************** function _rad_calculation_auto *****************
  4274 ;; Defined at:
  4275 ;;		line 55 in file "RoboticArm.c"
  4276 ;; Parameters:    Size  Location     Type
  4277 ;;		None
  4278 ;; Auto vars:     Size  Location     Type
  4279 ;;		None
  4280 ;; Return value:  Size  Location     Type
  4281 ;;                  1    wreg      void 
  4282 ;; Registers used:
  4283 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4284 ;; Tracked objects:
  4285 ;;		On entry : 0/0
  4286 ;;		On exit  : 0/0
  4287 ;;		Unchanged: 0/0
  4288 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
  4289 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  4290 ;;      Locals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  4291 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  4292 ;;      Totals:         0       0      16       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  4293 ;;Total ram usage:       16 bytes
  4294 ;; Hardware stack levels used:    1
  4295 ;; Hardware stack levels required when called:   10
  4296 ;; This function calls:
  4297 ;;		___fladd
  4298 ;;		___fldiv
  4299 ;;		___flmul
  4300 ;;		___flneg
  4301 ;;		_atan
  4302 ;;		_cos
  4303 ;;		_sin
  4304 ;;		_sqrt
  4305 ;; This function is called by:
  4306 ;;		_main
  4307 ;; This function uses a non-reentrant model
  4308 ;;
  4309                           
  4310                           	psect	text6
  4311  002F54                     __ptext6:
  4312                           	opt stack 0
  4313  002F54                     _rad_calculation_auto:
  4314                           	opt stack 20
  4315                           
  4316                           ;RoboticArm.c: 57: base_rad = atan(Y_c/X_c);
  4317                           
  4318                           ;incstack = 0
  4319  002F54  0060  F354  F01C   	movff	_Y_c,___fldiv@b
  4320  002F5A  0060  F358  F01D   	movff	_Y_c+1,___fldiv@b+1
  4321  002F60  0060  F35C  F01E   	movff	_Y_c+2,___fldiv@b+2
  4322  002F66  0060  F360  F01F   	movff	_Y_c+3,___fldiv@b+3
  4323  002F6C  0060  F364  F020   	movff	_X_c,___fldiv@a
  4324  002F72  0060  F368  F021   	movff	_X_c+1,___fldiv@a+1
  4325  002F78  0060  F36C  F022   	movff	_X_c+2,___fldiv@a+2
  4326  002F7E  0060  F370  F023   	movff	_X_c+3,___fldiv@a+3
  4327  002F84  EC45  F025         	call	___fldiv	;wreg free
  4328  002F88  0060  F070  F16A   	movff	?___fldiv,_rad_calculation_auto$2446
  4329  002F8E  0060  F074  F16B   	movff	?___fldiv+1,_rad_calculation_auto$2446+1
  4330  002F94  0060  F078  F16C   	movff	?___fldiv+2,_rad_calculation_auto$2446+2
  4331  002F9A  0060  F07C  F16D   	movff	?___fldiv+3,_rad_calculation_auto$2446+3
  4332                           
  4333                           ;RoboticArm.c: 57: base_rad = atan(Y_c/X_c);
  4334  002FA0  0060  F5A8  F09A   	movff	_rad_calculation_auto$2446,atan@f
  4335  002FA6  0060  F5AC  F09B   	movff	_rad_calculation_auto$2446+1,atan@f+1
  4336  002FAC  0060  F5B0  F09C   	movff	_rad_calculation_auto$2446+2,atan@f+2
  4337  002FB2  0060  F5B4  F09D   	movff	_rad_calculation_auto$2446+3,atan@f+3
  4338  002FB8  ECCE  F023         	call	_atan	;wreg free
  4339  002FBC  0060  F268  F148   	movff	?_atan,_base_rad
  4340  002FC2  0060  F26C  F149   	movff	?_atan+1,_base_rad+1
  4341  002FC8  0060  F270  F14A   	movff	?_atan+2,_base_rad+2
  4342  002FCE  0060  F274  F14B   	movff	?_atan+3,_base_rad+3
  4343                           
  4344                           ;RoboticArm.c: 59: RR = sqrt(X_c*X_c+Y_c*Y_c);
  4345  002FD4  0060  F364  F068   	movff	_X_c,___flmul@a
  4346  002FDA  0060  F368  F069   	movff	_X_c+1,___flmul@a+1
  4347  002FE0  0060  F36C  F06A   	movff	_X_c+2,___flmul@a+2
  4348  002FE6  0060  F370  F06B   	movff	_X_c+3,___flmul@a+3
  4349  002FEC  0060  F364  F064   	movff	_X_c,___flmul@b
  4350  002FF2  0060  F368  F065   	movff	_X_c+1,___flmul@b+1
  4351  002FF8  0060  F36C  F066   	movff	_X_c+2,___flmul@b+2
  4352  002FFE  0060  F370  F067   	movff	_X_c+3,___flmul@b+3
  4353  003004  EC9F  F01E         	call	___flmul	;wreg free
  4354  003008  0060  F190  F035   	movff	?___flmul,___fladd@b
  4355  00300E  0060  F194  F036   	movff	?___flmul+1,___fladd@b+1
  4356  003014  0060  F198  F037   	movff	?___flmul+2,___fladd@b+2
  4357  00301A  0060  F19C  F038   	movff	?___flmul+3,___fladd@b+3
  4358  003020  0060  F354  F068   	movff	_Y_c,___flmul@a
  4359  003026  0060  F358  F069   	movff	_Y_c+1,___flmul@a+1
  4360  00302C  0060  F35C  F06A   	movff	_Y_c+2,___flmul@a+2
  4361  003032  0060  F360  F06B   	movff	_Y_c+3,___flmul@a+3
  4362  003038  0060  F354  F064   	movff	_Y_c,___flmul@b
  4363  00303E  0060  F358  F065   	movff	_Y_c+1,___flmul@b+1
  4364  003044  0060  F35C  F066   	movff	_Y_c+2,___flmul@b+2
  4365  00304A  0060  F360  F067   	movff	_Y_c+3,___flmul@b+3
  4366  003050  EC9F  F01E         	call	___flmul	;wreg free
  4367  003054  0060  F190  F039   	movff	?___flmul,___fladd@a
  4368  00305A  0060  F194  F03A   	movff	?___flmul+1,___fladd@a+1
  4369  003060  0060  F198  F03B   	movff	?___flmul+2,___fladd@a+2
  4370  003066  0060  F19C  F03C   	movff	?___flmul+3,___fladd@a+3
  4371  00306C  EC78  F020         	call	___fladd	;wreg free
  4372  003070  0060  F0D4  F07D   	movff	?___fladd,sqrt@a
  4373  003076  0060  F0D8  F07E   	movff	?___fladd+1,sqrt@a+1
  4374  00307C  0060  F0DC  F07F   	movff	?___fladd+2,sqrt@a+2
  4375  003082  0060  F0E0  F080   	movff	?___fladd+3,sqrt@a+3
  4376  003088  EC38  F022         	call	_sqrt	;wreg free
  4377  00308C  0060  F1F4  F14C   	movff	?_sqrt,_RR
  4378  003092  0060  F1F8  F14D   	movff	?_sqrt+1,_RR+1
  4379  003098  0060  F1FC  F14E   	movff	?_sqrt+2,_RR+2
  4380  00309E  0060  F200  F14F   	movff	?_sqrt+3,_RR+3
  4381                           
  4382                           ;RoboticArm.c: 61: R0 = RR-86.52*cos(Pitch);
  4383  0030A4  0060  F344  F0A8   	movff	_Pitch,cos@f
  4384  0030AA  0060  F348  F0A9   	movff	_Pitch+1,cos@f+1
  4385  0030B0  0060  F34C  F0AA   	movff	_Pitch+2,cos@f+2
  4386  0030B6  0060  F350  F0AB   	movff	_Pitch+3,cos@f+3
  4387  0030BC  EC90  F02E         	call	_cos	;wreg free
  4388  0030C0  0060  F2A0  F15E   	movff	?_cos,_rad_calculation_auto$2447
  4389  0030C6  0060  F2A4  F15F   	movff	?_cos+1,_rad_calculation_auto$2447+1
  4390  0030CC  0060  F2A8  F160   	movff	?_cos+2,_rad_calculation_auto$2447+2
  4391  0030D2  0060  F2AC  F161   	movff	?_cos+3,_rad_calculation_auto$2447+3
  4392                           
  4393                           ;RoboticArm.c: 61: R0 = RR-86.52*cos(Pitch);
  4394  0030D8  0E3D               	movlw	61
  4395  0030DA  0100               	movlb	0	; () banked
  4396  0030DC  6F68               	movwf	___flmul@a& (0+255),b
  4397  0030DE  0E0A               	movlw	10
  4398  0030E0  6F69               	movwf	(___flmul@a+1)& (0+255),b
  4399  0030E2  0EAD               	movlw	173
  4400  0030E4  6F6A               	movwf	(___flmul@a+2)& (0+255),b
  4401  0030E6  0E42               	movlw	66
  4402  0030E8  6F6B               	movwf	(___flmul@a+3)& (0+255),b
  4403  0030EA  0060  F578  F064   	movff	_rad_calculation_auto$2447,___flmul@b
  4404  0030F0  0060  F57C  F065   	movff	_rad_calculation_auto$2447+1,___flmul@b+1
  4405  0030F6  0060  F580  F066   	movff	_rad_calculation_auto$2447+2,___flmul@b+2
  4406  0030FC  0060  F584  F067   	movff	_rad_calculation_auto$2447+3,___flmul@b+3
  4407  003102  EC9F  F01E         	call	___flmul	;wreg free
  4408  003106  0060  F190  F01C   	movff	?___flmul,___flneg@f1
  4409  00310C  0060  F194  F01D   	movff	?___flmul+1,___flneg@f1+1
  4410  003112  0060  F198  F01E   	movff	?___flmul+2,___flneg@f1+2
  4411  003118  0060  F19C  F01F   	movff	?___flmul+3,___flneg@f1+3
  4412  00311E  ECFE  F032         	call	___flneg	;wreg free
  4413  003122  0060  F070  F035   	movff	?___flneg,___fladd@b
  4414  003128  0060  F074  F036   	movff	?___flneg+1,___fladd@b+1
  4415  00312E  0060  F078  F037   	movff	?___flneg+2,___fladd@b+2
  4416  003134  0060  F07C  F038   	movff	?___flneg+3,___fladd@b+3
  4417  00313A  0060  F530  F039   	movff	_RR,___fladd@a
  4418  003140  0060  F534  F03A   	movff	_RR+1,___fladd@a+1
  4419  003146  0060  F538  F03B   	movff	_RR+2,___fladd@a+2
  4420  00314C  0060  F53C  F03C   	movff	_RR+3,___fladd@a+3
  4421  003152  EC78  F020         	call	___fladd	;wreg free
  4422  003156  0060  F0D4  F0CD   	movff	?___fladd,_R0
  4423  00315C  0060  F0D8  F0CE   	movff	?___fladd+1,_R0+1
  4424  003162  0060  F0DC  F0CF   	movff	?___fladd+2,_R0+2
  4425  003168  0060  F0E0  F0D0   	movff	?___fladd+3,_R0+3
  4426                           
  4427                           ;RoboticArm.c: 62: Z0 = Z_c-86.52*sin(Pitch)-196.67;
  4428  00316E  0060  F344  F097   	movff	_Pitch,sin@f
  4429  003174  0060  F348  F098   	movff	_Pitch+1,sin@f+1
  4430  00317A  0060  F34C  F099   	movff	_Pitch+2,sin@f+2
  4431  003180  0060  F350  F09A   	movff	_Pitch+3,sin@f+3
  4432  003186  ECA1  F01C         	call	_sin	;wreg free
  4433  00318A  0060  F25C  F162   	movff	?_sin,_rad_calculation_auto$2448
  4434  003190  0060  F260  F163   	movff	?_sin+1,_rad_calculation_auto$2448+1
  4435  003196  0060  F264  F164   	movff	?_sin+2,_rad_calculation_auto$2448+2
  4436  00319C  0060  F268  F165   	movff	?_sin+3,_rad_calculation_auto$2448+3
  4437                           
  4438                           ;RoboticArm.c: 62: Z0 = Z_c-86.52*sin(Pitch)-196.67;
  4439  0031A2  0E85               	movlw	133
  4440  0031A4  6E39               	movwf	___fladd@a,c
  4441  0031A6  0EAB               	movlw	171
  4442  0031A8  6E3A               	movwf	___fladd@a+1,c
  4443  0031AA  0E44               	movlw	68
  4444  0031AC  6E3B               	movwf	___fladd@a+2,c
  4445  0031AE  0E43               	movlw	67
  4446  0031B0  6E3C               	movwf	___fladd@a+3,c
  4447  0031B2  0E3D               	movlw	61
  4448  0031B4  0100               	movlb	0	; () banked
  4449  0031B6  6F68               	movwf	___flmul@a& (0+255),b
  4450  0031B8  0E0A               	movlw	10
  4451  0031BA  6F69               	movwf	(___flmul@a+1)& (0+255),b
  4452  0031BC  0EAD               	movlw	173
  4453  0031BE  6F6A               	movwf	(___flmul@a+2)& (0+255),b
  4454  0031C0  0E42               	movlw	66
  4455  0031C2  6F6B               	movwf	(___flmul@a+3)& (0+255),b
  4456  0031C4  0060  F588  F064   	movff	_rad_calculation_auto$2448,___flmul@b
  4457  0031CA  0060  F58C  F065   	movff	_rad_calculation_auto$2448+1,___flmul@b+1
  4458  0031D0  0060  F590  F066   	movff	_rad_calculation_auto$2448+2,___flmul@b+2
  4459  0031D6  0060  F594  F067   	movff	_rad_calculation_auto$2448+3,___flmul@b+3
  4460  0031DC  EC9F  F01E         	call	___flmul	;wreg free
  4461  0031E0  0060  F190  F035   	movff	?___flmul,___fladd@b
  4462  0031E6  0060  F194  F036   	movff	?___flmul+1,___fladd@b+1
  4463  0031EC  0060  F198  F037   	movff	?___flmul+2,___fladd@b+2
  4464  0031F2  0060  F19C  F038   	movff	?___flmul+3,___fladd@b+3
  4465  0031F8  EC78  F020         	call	___fladd	;wreg free
  4466  0031FC  0060  F0D4  F01C   	movff	?___fladd,___flneg@f1
  4467  003202  0060  F0D8  F01D   	movff	?___fladd+1,___flneg@f1+1
  4468  003208  0060  F0DC  F01E   	movff	?___fladd+2,___flneg@f1+2
  4469  00320E  0060  F0E0  F01F   	movff	?___fladd+3,___flneg@f1+3
  4470  003214  ECFE  F032         	call	___flneg	;wreg free
  4471  003218  0060  F070  F166   	movff	?___flneg,_rad_calculation_auto$2449
  4472  00321E  0060  F074  F167   	movff	?___flneg+1,_rad_calculation_auto$2449+1
  4473  003224  0060  F078  F168   	movff	?___flneg+2,_rad_calculation_auto$2449+2
  4474  00322A  0060  F07C  F169   	movff	?___flneg+3,_rad_calculation_auto$2449+3
  4475                           
  4476                           ;RoboticArm.c: 62: Z0 = Z_c-86.52*sin(Pitch)-196.67;
  4477  003230  0060  F598  F035   	movff	_rad_calculation_auto$2449,___fladd@b
  4478  003236  0060  F59C  F036   	movff	_rad_calculation_auto$2449+1,___fladd@b+1
  4479  00323C  0060  F5A0  F037   	movff	_rad_calculation_auto$2449+2,___fladd@b+2
  4480  003242  0060  F5A4  F038   	movff	_rad_calculation_auto$2449+3,___fladd@b+3
  4481  003248  0060  F550  F039   	movff	_Z_c,___fladd@a
  4482  00324E  0060  F554  F03A   	movff	_Z_c+1,___fladd@a+1
  4483  003254  0060  F558  F03B   	movff	_Z_c+2,___fladd@a+2
  4484  00325A  0060  F55C  F03C   	movff	_Z_c+3,___fladd@a+3
  4485  003260  EC78  F020         	call	___fladd	;wreg free
  4486  003264  0060  F0D4  F0C9   	movff	?___fladd,_Z0
  4487  00326A  0060  F0D8  F0CA   	movff	?___fladd+1,_Z0+1
  4488  003270  0060  F0DC  F0CB   	movff	?___fladd+2,_Z0+2
  4489  003276  0060  F0E0  F0CC   	movff	?___fladd+3,_Z0+3
  4490                           
  4491                           ;RoboticArm.c: 63: beta = atan(Z0/R0);
  4492  00327C  0060  F324  F01C   	movff	_Z0,___fldiv@b
  4493  003282  0060  F328  F01D   	movff	_Z0+1,___fldiv@b+1
  4494  003288  0060  F32C  F01E   	movff	_Z0+2,___fldiv@b+2
  4495  00328E  0060  F330  F01F   	movff	_Z0+3,___fldiv@b+3
  4496  003294  0060  F334  F020   	movff	_R0,___fldiv@a
  4497  00329A  0060  F338  F021   	movff	_R0+1,___fldiv@a+1
  4498  0032A0  0060  F33C  F022   	movff	_R0+2,___fldiv@a+2
  4499  0032A6  0060  F340  F023   	movff	_R0+3,___fldiv@a+3
  4500  0032AC  EC45  F025         	call	___fldiv	;wreg free
  4501  0032B0  0060  F070  F16A   	movff	?___fldiv,_rad_calculation_auto$2446
  4502  0032B6  0060  F074  F16B   	movff	?___fldiv+1,_rad_calculation_auto$2446+1
  4503  0032BC  0060  F078  F16C   	movff	?___fldiv+2,_rad_calculation_auto$2446+2
  4504  0032C2  0060  F07C  F16D   	movff	?___fldiv+3,_rad_calculation_auto$2446+3
  4505                           
  4506                           ;RoboticArm.c: 63: beta = atan(Z0/R0);
  4507  0032C8  0060  F5A8  F09A   	movff	_rad_calculation_auto$2446,atan@f
  4508  0032CE  0060  F5AC  F09B   	movff	_rad_calculation_auto$2446+1,atan@f+1
  4509  0032D4  0060  F5B0  F09C   	movff	_rad_calculation_auto$2446+2,atan@f+2
  4510  0032DA  0060  F5B4  F09D   	movff	_rad_calculation_auto$2446+3,atan@f+3
  4511  0032E0  ECCE  F023         	call	_atan	;wreg free
  4512  0032E4  0060  F268  F0C5   	movff	?_atan,_beta
  4513  0032EA  0060  F26C  F0C6   	movff	?_atan+1,_beta+1
  4514  0032F0  0060  F270  F0C7   	movff	?_atan+2,_beta+2
  4515  0032F6  0060  F274  F0C8   	movff	?_atan+3,_beta+3
  4516                           
  4517                           ;RoboticArm.c: 65: alfa = (R0*R0+Z0*Z0);
  4518  0032FC  0060  F334  F068   	movff	_R0,___flmul@a
  4519  003302  0060  F338  F069   	movff	_R0+1,___flmul@a+1
  4520  003308  0060  F33C  F06A   	movff	_R0+2,___flmul@a+2
  4521  00330E  0060  F340  F06B   	movff	_R0+3,___flmul@a+3
  4522  003314  0060  F334  F064   	movff	_R0,___flmul@b
  4523  00331A  0060  F338  F065   	movff	_R0+1,___flmul@b+1
  4524  003320  0060  F33C  F066   	movff	_R0+2,___flmul@b+2
  4525  003326  0060  F340  F067   	movff	_R0+3,___flmul@b+3
  4526  00332C  EC9F  F01E         	call	___flmul	;wreg free
  4527  003330  0060  F190  F035   	movff	?___flmul,___fladd@b
  4528  003336  0060  F194  F036   	movff	?___flmul+1,___fladd@b+1
  4529  00333C  0060  F198  F037   	movff	?___flmul+2,___fladd@b+2
  4530  003342  0060  F19C  F038   	movff	?___flmul+3,___fladd@b+3
  4531  003348  0060  F324  F068   	movff	_Z0,___flmul@a
  4532  00334E  0060  F328  F069   	movff	_Z0+1,___flmul@a+1
  4533  003354  0060  F32C  F06A   	movff	_Z0+2,___flmul@a+2
  4534  00335A  0060  F330  F06B   	movff	_Z0+3,___flmul@a+3
  4535  003360  0060  F324  F064   	movff	_Z0,___flmul@b
  4536  003366  0060  F328  F065   	movff	_Z0+1,___flmul@b+1
  4537  00336C  0060  F32C  F066   	movff	_Z0+2,___flmul@b+2
  4538  003372  0060  F330  F067   	movff	_Z0+3,___flmul@b+3
  4539  003378  EC9F  F01E         	call	___flmul	;wreg free
  4540  00337C  0060  F190  F039   	movff	?___flmul,___fladd@a
  4541  003382  0060  F194  F03A   	movff	?___flmul+1,___fladd@a+1
  4542  003388  0060  F198  F03B   	movff	?___flmul+2,___fladd@a+2
  4543  00338E  0060  F19C  F03C   	movff	?___flmul+3,___fladd@a+3
  4544  003394  EC78  F020         	call	___fladd	;wreg free
  4545  003398  0060  F0D4  F0F5   	movff	?___fladd,_alfa
  4546  00339E  0060  F0D8  F0F6   	movff	?___fladd+1,_alfa+1
  4547  0033A4  0060  F0DC  F0F7   	movff	?___fladd+2,_alfa+2
  4548  0033AA  0060  F0E0  F0F8   	movff	?___fladd+3,_alfa+3
  4549                           
  4550                           ;RoboticArm.c: 66: alfa = (4*177.8*177.8)/alfa-1;
  4551  0033B0  0060  F3D4  F020   	movff	_alfa,___fldiv@a
  4552  0033B6  0060  F3D8  F021   	movff	_alfa+1,___fldiv@a+1
  4553  0033BC  0060  F3DC  F022   	movff	_alfa+2,___fldiv@a+2
  4554  0033C2  0060  F3E0  F023   	movff	_alfa+3,___fldiv@a+3
  4555  0033C8  0EAE               	movlw	174
  4556  0033CA  6E1C               	movwf	___fldiv@b,c
  4557  0033CC  0EF9               	movlw	249
  4558  0033CE  6E1D               	movwf	___fldiv@b+1,c
  4559  0033D0  0EF6               	movlw	246
  4560  0033D2  6E1E               	movwf	___fldiv@b+2,c
  4561  0033D4  0E47               	movlw	71
  4562  0033D6  6E1F               	movwf	___fldiv@b+3,c
  4563  0033D8  EC45  F025         	call	___fldiv	;wreg free
  4564  0033DC  0060  F070  F035   	movff	?___fldiv,___fladd@b
  4565  0033E2  0060  F074  F036   	movff	?___fldiv+1,___fladd@b+1
  4566  0033E8  0060  F078  F037   	movff	?___fldiv+2,___fladd@b+2
  4567  0033EE  0060  F07C  F038   	movff	?___fldiv+3,___fladd@b+3
  4568  0033F4  0E00               	movlw	0
  4569  0033F6  6E39               	movwf	___fladd@a,c
  4570  0033F8  0E00               	movlw	0
  4571  0033FA  6E3A               	movwf	___fladd@a+1,c
  4572  0033FC  0E80               	movlw	128
  4573  0033FE  6E3B               	movwf	___fladd@a+2,c
  4574  003400  0EBF               	movlw	191
  4575  003402  6E3C               	movwf	___fladd@a+3,c
  4576  003404  EC78  F020         	call	___fladd	;wreg free
  4577  003408  0060  F0D4  F0F5   	movff	?___fladd,_alfa
  4578  00340E  0060  F0D8  F0F6   	movff	?___fladd+1,_alfa+1
  4579  003414  0060  F0DC  F0F7   	movff	?___fladd+2,_alfa+2
  4580  00341A  0060  F0E0  F0F8   	movff	?___fladd+3,_alfa+3
  4581                           
  4582                           ;RoboticArm.c: 67: alfa = atan(sqrt(alfa));
  4583  003420  0060  F3D4  F07D   	movff	_alfa,sqrt@a
  4584  003426  0060  F3D8  F07E   	movff	_alfa+1,sqrt@a+1
  4585  00342C  0060  F3DC  F07F   	movff	_alfa+2,sqrt@a+2
  4586  003432  0060  F3E0  F080   	movff	_alfa+3,sqrt@a+3
  4587  003438  EC38  F022         	call	_sqrt	;wreg free
  4588  00343C  0060  F1F4  F09A   	movff	?_sqrt,atan@f
  4589  003442  0060  F1F8  F09B   	movff	?_sqrt+1,atan@f+1
  4590  003448  0060  F1FC  F09C   	movff	?_sqrt+2,atan@f+2
  4591  00344E  0060  F200  F09D   	movff	?_sqrt+3,atan@f+3
  4592  003454  ECCE  F023         	call	_atan	;wreg free
  4593  003458  0060  F268  F0F5   	movff	?_atan,_alfa
  4594  00345E  0060  F26C  F0F6   	movff	?_atan+1,_alfa+1
  4595  003464  0060  F270  F0F7   	movff	?_atan+2,_alfa+2
  4596  00346A  0060  F274  F0F8   	movff	?_atan+3,_alfa+3
  4597                           
  4598                           ;RoboticArm.c: 69: shoulder_rad = alfa+beta;
  4599  003470  0060  F3D4  F035   	movff	_alfa,___fladd@b
  4600  003476  0060  F3D8  F036   	movff	_alfa+1,___fladd@b+1
  4601  00347C  0060  F3DC  F037   	movff	_alfa+2,___fladd@b+2
  4602  003482  0060  F3E0  F038   	movff	_alfa+3,___fladd@b+3
  4603  003488  0060  F314  F039   	movff	_beta,___fladd@a
  4604  00348E  0060  F318  F03A   	movff	_beta+1,___fladd@a+1
  4605  003494  0060  F31C  F03B   	movff	_beta+2,___fladd@a+2
  4606  00349A  0060  F320  F03C   	movff	_beta+3,___fladd@a+3
  4607  0034A0  EC78  F020         	call	___fladd	;wreg free
  4608  0034A4  0060  F0D4  F0C1   	movff	?___fladd,_shoulder_rad
  4609  0034AA  0060  F0D8  F0C2   	movff	?___fladd+1,_shoulder_rad+1
  4610  0034B0  0060  F0DC  F0C3   	movff	?___fladd+2,_shoulder_rad+2
  4611  0034B6  0060  F0E0  F0C4   	movff	?___fladd+3,_shoulder_rad+3
  4612                           
  4613                           ;RoboticArm.c: 70: elbow_rad = beta-alfa;
  4614  0034BC  0060  F3D4  F01C   	movff	_alfa,___flneg@f1
  4615  0034C2  0060  F3D8  F01D   	movff	_alfa+1,___flneg@f1+1
  4616  0034C8  0060  F3DC  F01E   	movff	_alfa+2,___flneg@f1+2
  4617  0034CE  0060  F3E0  F01F   	movff	_alfa+3,___flneg@f1+3
  4618  0034D4  ECFE  F032         	call	___flneg	;wreg free
  4619  0034D8  0060  F070  F035   	movff	?___flneg,___fladd@b
  4620  0034DE  0060  F074  F036   	movff	?___flneg+1,___fladd@b+1
  4621  0034E4  0060  F078  F037   	movff	?___flneg+2,___fladd@b+2
  4622  0034EA  0060  F07C  F038   	movff	?___flneg+3,___fladd@b+3
  4623  0034F0  0060  F314  F039   	movff	_beta,___fladd@a
  4624  0034F6  0060  F318  F03A   	movff	_beta+1,___fladd@a+1
  4625  0034FC  0060  F31C  F03B   	movff	_beta+2,___fladd@a+2
  4626  003502  0060  F320  F03C   	movff	_beta+3,___fladd@a+3
  4627  003508  EC78  F020         	call	___fladd	;wreg free
  4628  00350C  0060  F0D4  F144   	movff	?___fladd,_elbow_rad
  4629  003512  0060  F0D8  F145   	movff	?___fladd+1,_elbow_rad+1
  4630  003518  0060  F0DC  F146   	movff	?___fladd+2,_elbow_rad+2
  4631  00351E  0060  F0E0  F147   	movff	?___fladd+3,_elbow_rad+3
  4632  003524  0012               	return		;funcret
  4633  003526                     __end_of_rad_calculation_auto:
  4634                           	opt stack 0
  4635                           
  4636 ;; *************** function _cos *****************
  4637 ;; Defined at:
  4638 ;;		line 13 in file "D:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\cos.c"
  4639 ;; Parameters:    Size  Location     Type
  4640 ;;  f               4   72[BANK0 ] void 
  4641 ;; Auto vars:     Size  Location     Type
  4642 ;;		None
  4643 ;; Return value:  Size  Location     Type
  4644 ;;                  4   72[BANK0 ] void 
  4645 ;; Registers used:
  4646 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4647 ;; Tracked objects:
  4648 ;;		On entry : 0/0
  4649 ;;		On exit  : 0/0
  4650 ;;		Unchanged: 0/0
  4651 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
  4652 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  4653 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  4654 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  4655 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  4656 ;;Total ram usage:        8 bytes
  4657 ;; Hardware stack levels used:    1
  4658 ;; Hardware stack levels required when called:    9
  4659 ;; This function calls:
  4660 ;;		___fladd
  4661 ;;		___flge
  4662 ;;		_sin
  4663 ;; This function is called by:
  4664 ;;		_rad_calculation_auto
  4665 ;; This function uses a non-reentrant model
  4666 ;;
  4667                           
  4668                           	psect	text7
  4669  005D20                     __ptext7:
  4670                           	opt stack 0
  4671  005D20                     _cos:
  4672                           	opt stack 20
  4673                           
  4674                           ;incstack = 0
  4675  005D20  0EDB               	movlw	219
  4676  005D22  6E0E               	movwf	___flge@ff1,c
  4677  005D24  0E0F               	movlw	15
  4678  005D26  6E0F               	movwf	___flge@ff1+1,c
  4679  005D28  0E49               	movlw	73
  4680  005D2A  6E10               	movwf	___flge@ff1+2,c
  4681  005D2C  0E40               	movlw	64
  4682  005D2E  6E11               	movwf	___flge@ff1+3,c
  4683  005D30  0060  F2A0  F012   	movff	cos@f,___flge@ff2
  4684  005D36  0060  F2A4  F013   	movff	cos@f+1,___flge@ff2+1
  4685  005D3C  0060  F2A8  F014   	movff	cos@f+2,___flge@ff2+2
  4686  005D42  0060  F2AC  F015   	movff	cos@f+3,___flge@ff2+3
  4687  005D48  EC63  F02D         	call	___flge	;wreg free
  4688  005D4C  B0D8               	btfsc	16344,0,c
  4689  005D4E  D03D               	goto	l1326
  4690  005D50  0060  F2A0  F035   	movff	cos@f,___fladd@b
  4691  005D56  0060  F2A4  F036   	movff	cos@f+1,___fladd@b+1
  4692  005D5C  0060  F2A8  F037   	movff	cos@f+2,___fladd@b+2
  4693  005D62  0060  F2AC  F038   	movff	cos@f+3,___fladd@b+3
  4694  005D68  0EE4               	movlw	228
  4695  005D6A  6E39               	movwf	___fladd@a,c
  4696  005D6C  0ECB               	movlw	203
  4697  005D6E  6E3A               	movwf	___fladd@a+1,c
  4698  005D70  0E96               	movlw	150
  4699  005D72  6E3B               	movwf	___fladd@a+2,c
  4700  005D74  0EC0               	movlw	192
  4701  005D76  6E3C               	movwf	___fladd@a+3,c
  4702  005D78  EC78  F020         	call	___fladd	;wreg free
  4703  005D7C  0060  F0D4  F0AC   	movff	?___fladd,_cos$2456
  4704  005D82  0060  F0D8  F0AD   	movff	?___fladd+1,_cos$2456+1
  4705  005D88  0060  F0DC  F0AE   	movff	?___fladd+2,_cos$2456+2
  4706  005D8E  0060  F0E0  F0AF   	movff	?___fladd+3,_cos$2456+3
  4707  005D94  0060  F2B0  F097   	movff	_cos$2456,sin@f
  4708  005D9A  0060  F2B4  F098   	movff	_cos$2456+1,sin@f+1
  4709  005DA0  0060  F2B8  F099   	movff	_cos$2456+2,sin@f+2
  4710  005DA6  0060  F2BC  F09A   	movff	_cos$2456+3,sin@f+3
  4711  005DAC  ECA1  F01C         	call	_sin	;wreg free
  4712  005DB0  0060  F25C  F0A8   	movff	?_sin,?_cos
  4713  005DB6  0060  F260  F0A9   	movff	?_sin+1,?_cos+1
  4714  005DBC  0060  F264  F0AA   	movff	?_sin+2,?_cos+2
  4715  005DC2  0060  F268  F0AB   	movff	?_sin+3,?_cos+3
  4716  005DC8  0012               	return	
  4717  005DCA                     l1326:
  4718  005DCA  0060  F2A0  F035   	movff	cos@f,___fladd@b
  4719  005DD0  0060  F2A4  F036   	movff	cos@f+1,___fladd@b+1
  4720  005DD6  0060  F2A8  F037   	movff	cos@f+2,___fladd@b+2
  4721  005DDC  0060  F2AC  F038   	movff	cos@f+3,___fladd@b+3
  4722  005DE2  0EDB               	movlw	219
  4723  005DE4  6E39               	movwf	___fladd@a,c
  4724  005DE6  0E0F               	movlw	15
  4725  005DE8  6E3A               	movwf	___fladd@a+1,c
  4726  005DEA  0EC9               	movlw	201
  4727  005DEC  6E3B               	movwf	___fladd@a+2,c
  4728  005DEE  0E3F               	movlw	63
  4729  005DF0  6E3C               	movwf	___fladd@a+3,c
  4730  005DF2  EC78  F020         	call	___fladd	;wreg free
  4731  005DF6  0060  F0D4  F0AC   	movff	?___fladd,_cos$2456
  4732  005DFC  0060  F0D8  F0AD   	movff	?___fladd+1,_cos$2456+1
  4733  005E02  0060  F0DC  F0AE   	movff	?___fladd+2,_cos$2456+2
  4734  005E08  0060  F0E0  F0AF   	movff	?___fladd+3,_cos$2456+3
  4735  005E0E  0060  F2B0  F097   	movff	_cos$2456,sin@f
  4736  005E14  0060  F2B4  F098   	movff	_cos$2456+1,sin@f+1
  4737  005E1A  0060  F2B8  F099   	movff	_cos$2456+2,sin@f+2
  4738  005E20  0060  F2BC  F09A   	movff	_cos$2456+3,sin@f+3
  4739  005E26  ECA1  F01C         	call	_sin	;wreg free
  4740  005E2A  0060  F25C  F0A8   	movff	?_sin,?_cos
  4741  005E30  0060  F260  F0A9   	movff	?_sin+1,?_cos+1
  4742  005E36  0060  F264  F0AA   	movff	?_sin+2,?_cos+2
  4743  005E3C  0060  F268  F0AB   	movff	?_sin+3,?_cos+3
  4744  005E42  0012               	return	
  4745  005E44                     __end_of_cos:
  4746                           	opt stack 0
  4747                           
  4748 ;; *************** function _sin *****************
  4749 ;; Defined at:
  4750 ;;		line 13 in file "D:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sin.c"
  4751 ;; Parameters:    Size  Location     Type
  4752 ;;  f               4   55[BANK0 ] void 
  4753 ;; Auto vars:     Size  Location     Type
  4754 ;;  x2              4   67[BANK0 ] void 
  4755 ;;  y               4   59[BANK0 ] void 
  4756 ;;  sgn             1   71[BANK0 ] unsigned char 
  4757 ;; Return value:  Size  Location     Type
  4758 ;;                  4   55[BANK0 ] unsigned char 
  4759 ;; Registers used:
  4760 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4761 ;; Tracked objects:
  4762 ;;		On entry : 0/0
  4763 ;;		On exit  : 0/0
  4764 ;;		Unchanged: 0/0
  4765 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
  4766 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  4767 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  4768 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  4769 ;;      Totals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  4770 ;;Total ram usage:       17 bytes
  4771 ;; Hardware stack levels used:    1
  4772 ;; Hardware stack levels required when called:    8
  4773 ;; This function calls:
  4774 ;;		___fladd
  4775 ;;		___fldiv
  4776 ;;		___flge
  4777 ;;		___flmul
  4778 ;;		___flneg
  4779 ;;		___flsub
  4780 ;;		_eval_poly
  4781 ;;		_floor
  4782 ;; This function is called by:
  4783 ;;		_rad_calculation_auto
  4784 ;;		_cos
  4785 ;; This function uses a non-reentrant model
  4786 ;;
  4787                           
  4788                           	psect	text8
  4789  003942                     __ptext8:
  4790                           	opt stack 0
  4791  003942                     _sin:
  4792                           	opt stack 21
  4793                           
  4794                           ;incstack = 0
  4795  003942  0E00               	movlw	0
  4796  003944  0100               	movlb	0	; () banked
  4797  003946  6FA7               	movwf	sin@sgn& (0+255),b
  4798                           
  4799                           ; BSR set to: 0
  4800  003948  AF9A               	btfss	(sin@f+3)& (0+255),7,b
  4801  00394A  D01D               	goto	l1581
  4802                           
  4803                           ; BSR set to: 0
  4804  00394C  0060  F25C  F01C   	movff	sin@f,___flneg@f1
  4805  003952  0060  F260  F01D   	movff	sin@f+1,___flneg@f1+1
  4806  003958  0060  F264  F01E   	movff	sin@f+2,___flneg@f1+2
  4807  00395E  0060  F268  F01F   	movff	sin@f+3,___flneg@f1+3
  4808  003964  ECFE  F032         	call	___flneg	;wreg free
  4809  003968  0060  F070  F097   	movff	?___flneg,sin@f
  4810  00396E  0060  F074  F098   	movff	?___flneg+1,sin@f+1
  4811  003974  0060  F078  F099   	movff	?___flneg+2,sin@f+2
  4812  00397A  0060  F07C  F09A   	movff	?___flneg+3,sin@f+3
  4813  003980  0E01               	movlw	1
  4814  003982  0100               	movlb	0	; () banked
  4815  003984  6FA7               	movwf	sin@sgn& (0+255),b
  4816  003986                     l1581:
  4817                           
  4818                           ; BSR set to: 0
  4819                           
  4820                           ; BSR set to: 0
  4821  003986  0060  F25C  F064   	movff	sin@f,___flmul@b
  4822  00398C  0060  F260  F065   	movff	sin@f+1,___flmul@b+1
  4823  003992  0060  F264  F066   	movff	sin@f+2,___flmul@b+2
  4824  003998  0060  F268  F067   	movff	sin@f+3,___flmul@b+3
  4825  00399E  0E83               	movlw	131
  4826  0039A0  6F68               	movwf	___flmul@a& (0+255),b
  4827  0039A2  0EF9               	movlw	249
  4828  0039A4  6F69               	movwf	(___flmul@a+1)& (0+255),b
  4829  0039A6  0E22               	movlw	34
  4830  0039A8  6F6A               	movwf	(___flmul@a+2)& (0+255),b
  4831  0039AA  0E3E               	movlw	62
  4832  0039AC  6F6B               	movwf	(___flmul@a+3)& (0+255),b
  4833  0039AE  EC9F  F01E         	call	___flmul	;wreg free
  4834  0039B2  0060  F190  F097   	movff	?___flmul,sin@f
  4835  0039B8  0060  F194  F098   	movff	?___flmul+1,sin@f+1
  4836  0039BE  0060  F198  F099   	movff	?___flmul+2,sin@f+2
  4837  0039C4  0060  F19C  F09A   	movff	?___flmul+3,sin@f+3
  4838  0039CA  0060  F25C  F08F   	movff	sin@f,___flsub@b
  4839  0039D0  0060  F260  F090   	movff	sin@f+1,___flsub@b+1
  4840  0039D6  0060  F264  F091   	movff	sin@f+2,___flsub@b+2
  4841  0039DC  0060  F268  F092   	movff	sin@f+3,___flsub@b+3
  4842  0039E2  0060  F25C  F085   	movff	sin@f,floor@x
  4843  0039E8  0060  F260  F086   	movff	sin@f+1,floor@x+1
  4844  0039EE  0060  F264  F087   	movff	sin@f+2,floor@x+2
  4845  0039F4  0060  F268  F088   	movff	sin@f+3,floor@x+3
  4846  0039FA  EC0A  F02C         	call	_floor	;wreg free
  4847  0039FE  0060  F214  F093   	movff	?_floor,___flsub@a
  4848  003A04  0060  F218  F094   	movff	?_floor+1,___flsub@a+1
  4849  003A0A  0060  F21C  F095   	movff	?_floor+2,___flsub@a+2
  4850  003A10  0060  F220  F096   	movff	?_floor+3,___flsub@a+3
  4851  003A16  EC8F  F031         	call	___flsub	;wreg free
  4852  003A1A  0060  F23C  F097   	movff	?___flsub,sin@f
  4853  003A20  0060  F240  F098   	movff	?___flsub+1,sin@f+1
  4854  003A26  0060  F244  F099   	movff	?___flsub+2,sin@f+2
  4855  003A2C  0060  F248  F09A   	movff	?___flsub+3,sin@f+3
  4856  003A32  0060  F25C  F064   	movff	sin@f,___flmul@b
  4857  003A38  0060  F260  F065   	movff	sin@f+1,___flmul@b+1
  4858  003A3E  0060  F264  F066   	movff	sin@f+2,___flmul@b+2
  4859  003A44  0060  F268  F067   	movff	sin@f+3,___flmul@b+3
  4860  003A4A  0E00               	movlw	0
  4861  003A4C  0100               	movlb	0	; () banked
  4862  003A4E  6F68               	movwf	___flmul@a& (0+255),b
  4863  003A50  0E00               	movlw	0
  4864  003A52  6F69               	movwf	(___flmul@a+1)& (0+255),b
  4865  003A54  0E80               	movlw	128
  4866  003A56  6F6A               	movwf	(___flmul@a+2)& (0+255),b
  4867  003A58  0E40               	movlw	64
  4868  003A5A  6F6B               	movwf	(___flmul@a+3)& (0+255),b
  4869  003A5C  EC9F  F01E         	call	___flmul	;wreg free
  4870  003A60  0060  F190  F097   	movff	?___flmul,sin@f
  4871  003A66  0060  F194  F098   	movff	?___flmul+1,sin@f+1
  4872  003A6C  0060  F198  F099   	movff	?___flmul+2,sin@f+2
  4873  003A72  0060  F19C  F09A   	movff	?___flmul+3,sin@f+3
  4874  003A78  0E00               	movlw	0
  4875  003A7A  6E0E               	movwf	___flge@ff1,c
  4876  003A7C  0E00               	movlw	0
  4877  003A7E  6E0F               	movwf	___flge@ff1+1,c
  4878  003A80  0E00               	movlw	0
  4879  003A82  6E10               	movwf	___flge@ff1+2,c
  4880  003A84  0E40               	movlw	64
  4881  003A86  6E11               	movwf	___flge@ff1+3,c
  4882  003A88  0060  F25C  F012   	movff	sin@f,___flge@ff2
  4883  003A8E  0060  F260  F013   	movff	sin@f+1,___flge@ff2+1
  4884  003A94  0060  F264  F014   	movff	sin@f+2,___flge@ff2+2
  4885  003A9A  0060  F268  F015   	movff	sin@f+3,___flge@ff2+3
  4886  003AA0  EC63  F02D         	call	___flge	;wreg free
  4887  003AA4  B0D8               	btfsc	16344,0,c
  4888  003AA6  D02B               	goto	l1582
  4889  003AA8  0060  F25C  F08F   	movff	sin@f,___flsub@b
  4890  003AAE  0060  F260  F090   	movff	sin@f+1,___flsub@b+1
  4891  003AB4  0060  F264  F091   	movff	sin@f+2,___flsub@b+2
  4892  003ABA  0060  F268  F092   	movff	sin@f+3,___flsub@b+3
  4893  003AC0  0E00               	movlw	0
  4894  003AC2  0100               	movlb	0	; () banked
  4895  003AC4  6F93               	movwf	___flsub@a& (0+255),b
  4896  003AC6  0E00               	movlw	0
  4897  003AC8  6F94               	movwf	(___flsub@a+1)& (0+255),b
  4898  003ACA  0E00               	movlw	0
  4899  003ACC  6F95               	movwf	(___flsub@a+2)& (0+255),b
  4900  003ACE  0E40               	movlw	64
  4901  003AD0  6F96               	movwf	(___flsub@a+3)& (0+255),b
  4902  003AD2  EC8F  F031         	call	___flsub	;wreg free
  4903  003AD6  0060  F23C  F097   	movff	?___flsub,sin@f
  4904  003ADC  0060  F240  F098   	movff	?___flsub+1,sin@f+1
  4905  003AE2  0060  F244  F099   	movff	?___flsub+2,sin@f+2
  4906  003AE8  0060  F248  F09A   	movff	?___flsub+3,sin@f+3
  4907  003AEE  0100               	movlb	0	; () banked
  4908  003AF0  51A7               	movf	sin@sgn& (0+255),w,b
  4909  003AF2  A4D8               	btfss	16344,2,c
  4910  003AF4  D002               	goto	u6700
  4911  003AF6  0E01               	movlw	1
  4912  003AF8  D001               	goto	u6710
  4913  003AFA                     u6700:
  4914  003AFA  0E00               	movlw	0
  4915  003AFC                     u6710:
  4916  003AFC  6FA7               	movwf	sin@sgn& (0+255),b
  4917  003AFE                     l1582:
  4918                           
  4919                           ; BSR set to: 0
  4920  003AFE  0E00               	movlw	0
  4921  003B00  6E0E               	movwf	___flge@ff1,c
  4922  003B02  0E00               	movlw	0
  4923  003B04  6E0F               	movwf	___flge@ff1+1,c
  4924  003B06  0E80               	movlw	128
  4925  003B08  6E10               	movwf	___flge@ff1+2,c
  4926  003B0A  0E3F               	movlw	63
  4927  003B0C  6E11               	movwf	___flge@ff1+3,c
  4928  003B0E  0060  F25C  F012   	movff	sin@f,___flge@ff2
  4929  003B14  0060  F260  F013   	movff	sin@f+1,___flge@ff2+1
  4930  003B1A  0060  F264  F014   	movff	sin@f+2,___flge@ff2+2
  4931  003B20  0060  F268  F015   	movff	sin@f+3,___flge@ff2+3
  4932  003B26  EC63  F02D         	call	___flge	;wreg free
  4933  003B2A  B0D8               	btfsc	16344,0,c
  4934  003B2C  D030               	goto	l1583
  4935  003B2E  0060  F25C  F01C   	movff	sin@f,___flneg@f1
  4936  003B34  0060  F260  F01D   	movff	sin@f+1,___flneg@f1+1
  4937  003B3A  0060  F264  F01E   	movff	sin@f+2,___flneg@f1+2
  4938  003B40  0060  F268  F01F   	movff	sin@f+3,___flneg@f1+3
  4939  003B46  ECFE  F032         	call	___flneg	;wreg free
  4940  003B4A  0060  F070  F035   	movff	?___flneg,___fladd@b
  4941  003B50  0060  F074  F036   	movff	?___flneg+1,___fladd@b+1
  4942  003B56  0060  F078  F037   	movff	?___flneg+2,___fladd@b+2
  4943  003B5C  0060  F07C  F038   	movff	?___flneg+3,___fladd@b+3
  4944  003B62  0E00               	movlw	0
  4945  003B64  6E39               	movwf	___fladd@a,c
  4946  003B66  0E00               	movlw	0
  4947  003B68  6E3A               	movwf	___fladd@a+1,c
  4948  003B6A  0E00               	movlw	0
  4949  003B6C  6E3B               	movwf	___fladd@a+2,c
  4950  003B6E  0E40               	movlw	64
  4951  003B70  6E3C               	movwf	___fladd@a+3,c
  4952  003B72  EC78  F020         	call	___fladd	;wreg free
  4953  003B76  0060  F0D4  F097   	movff	?___fladd,sin@f
  4954  003B7C  0060  F0D8  F098   	movff	?___fladd+1,sin@f+1
  4955  003B82  0060  F0DC  F099   	movff	?___fladd+2,sin@f+2
  4956  003B88  0060  F0E0  F09A   	movff	?___fladd+3,sin@f+3
  4957  003B8E                     l1583:
  4958  003B8E  0060  F25C  F064   	movff	sin@f,___flmul@b
  4959  003B94  0060  F260  F065   	movff	sin@f+1,___flmul@b+1
  4960  003B9A  0060  F264  F066   	movff	sin@f+2,___flmul@b+2
  4961  003BA0  0060  F268  F067   	movff	sin@f+3,___flmul@b+3
  4962  003BA6  0060  F25C  F068   	movff	sin@f,___flmul@a
  4963  003BAC  0060  F260  F069   	movff	sin@f+1,___flmul@a+1
  4964  003BB2  0060  F264  F06A   	movff	sin@f+2,___flmul@a+2
  4965  003BB8  0060  F268  F06B   	movff	sin@f+3,___flmul@a+3
  4966  003BBE  EC9F  F01E         	call	___flmul	;wreg free
  4967  003BC2  0060  F190  F0A3   	movff	?___flmul,sin@x2
  4968  003BC8  0060  F194  F0A4   	movff	?___flmul+1,sin@x2+1
  4969  003BCE  0060  F198  F0A5   	movff	?___flmul+2,sin@x2+2
  4970  003BD4  0060  F19C  F0A6   	movff	?___flmul+3,sin@x2+3
  4971  003BDA  0060  F28C  F07D   	movff	sin@x2,eval_poly@x
  4972  003BE0  0060  F290  F07E   	movff	sin@x2+1,eval_poly@x+1
  4973  003BE6  0060  F294  F07F   	movff	sin@x2+2,eval_poly@x+2
  4974  003BEC  0060  F298  F080   	movff	sin@x2+3,eval_poly@x+3
  4975  003BF2  0EB8               	movlw	low sin@coeff_b
  4976  003BF4  0100               	movlb	0	; () banked
  4977  003BF6  6F81               	movwf	eval_poly@d& (0+255),b
  4978  003BF8  0E20               	movlw	high sin@coeff_b
  4979  003BFA  6F82               	movwf	(eval_poly@d+1)& (0+255),b
  4980  003BFC  0E00               	movlw	0
  4981  003BFE  6F84               	movwf	(eval_poly@n+1)& (0+255),b
  4982  003C00  0E03               	movlw	3
  4983  003C02  6F83               	movwf	eval_poly@n& (0+255),b
  4984  003C04  ECBB  F02C         	call	_eval_poly	;wreg free
  4985  003C08  0060  F1F4  F09B   	movff	?_eval_poly,sin@y
  4986  003C0E  0060  F1F8  F09C   	movff	?_eval_poly+1,sin@y+1
  4987  003C14  0060  F1FC  F09D   	movff	?_eval_poly+2,sin@y+2
  4988  003C1A  0060  F200  F09E   	movff	?_eval_poly+3,sin@y+3
  4989  003C20  0060  F26C  F020   	movff	sin@y,___fldiv@a
  4990  003C26  0060  F270  F021   	movff	sin@y+1,___fldiv@a+1
  4991  003C2C  0060  F274  F022   	movff	sin@y+2,___fldiv@a+2
  4992  003C32  0060  F278  F023   	movff	sin@y+3,___fldiv@a+3
  4993  003C38  0E00               	movlw	0
  4994  003C3A  0100               	movlb	0	; () banked
  4995  003C3C  6F84               	movwf	(eval_poly@n+1)& (0+255),b
  4996  003C3E  0E04               	movlw	4
  4997  003C40  6F83               	movwf	eval_poly@n& (0+255),b
  4998  003C42  0E90               	movlw	low sin@coeff_a
  4999  003C44  6F81               	movwf	eval_poly@d& (0+255),b
  5000  003C46  0E20               	movlw	high sin@coeff_a
  5001  003C48  6F82               	movwf	(eval_poly@d+1)& (0+255),b
  5002  003C4A  0060  F28C  F07D   	movff	sin@x2,eval_poly@x
  5003  003C50  0060  F290  F07E   	movff	sin@x2+1,eval_poly@x+1
  5004  003C56  0060  F294  F07F   	movff	sin@x2+2,eval_poly@x+2
  5005  003C5C  0060  F298  F080   	movff	sin@x2+3,eval_poly@x+3
  5006  003C62  ECBB  F02C         	call	_eval_poly	;wreg free
  5007  003C66  0060  F1F4  F01C   	movff	?_eval_poly,___fldiv@b
  5008  003C6C  0060  F1F8  F01D   	movff	?_eval_poly+1,___fldiv@b+1
  5009  003C72  0060  F1FC  F01E   	movff	?_eval_poly+2,___fldiv@b+2
  5010  003C78  0060  F200  F01F   	movff	?_eval_poly+3,___fldiv@b+3
  5011  003C7E  EC45  F025         	call	___fldiv	;wreg free
  5012  003C82  0060  F070  F09F   	movff	?___fldiv,_sin$2457
  5013  003C88  0060  F074  F0A0   	movff	?___fldiv+1,_sin$2457+1
  5014  003C8E  0060  F078  F0A1   	movff	?___fldiv+2,_sin$2457+2
  5015  003C94  0060  F07C  F0A2   	movff	?___fldiv+3,_sin$2457+3
  5016  003C9A  0060  F25C  F064   	movff	sin@f,___flmul@b
  5017  003CA0  0060  F260  F065   	movff	sin@f+1,___flmul@b+1
  5018  003CA6  0060  F264  F066   	movff	sin@f+2,___flmul@b+2
  5019  003CAC  0060  F268  F067   	movff	sin@f+3,___flmul@b+3
  5020  003CB2  0060  F27C  F068   	movff	_sin$2457,___flmul@a
  5021  003CB8  0060  F280  F069   	movff	_sin$2457+1,___flmul@a+1
  5022  003CBE  0060  F284  F06A   	movff	_sin$2457+2,___flmul@a+2
  5023  003CC4  0060  F288  F06B   	movff	_sin$2457+3,___flmul@a+3
  5024  003CCA  EC9F  F01E         	call	___flmul	;wreg free
  5025  003CCE  0060  F190  F097   	movff	?___flmul,sin@f
  5026  003CD4  0060  F194  F098   	movff	?___flmul+1,sin@f+1
  5027  003CDA  0060  F198  F099   	movff	?___flmul+2,sin@f+2
  5028  003CE0  0060  F19C  F09A   	movff	?___flmul+3,sin@f+3
  5029  003CE6  0100               	movlb	0	; () banked
  5030  003CE8  51A7               	movf	sin@sgn& (0+255),w,b
  5031  003CEA  B4D8               	btfsc	16344,2,c
  5032  003CEC  D01B               	goto	l1584
  5033                           
  5034                           ; BSR set to: 0
  5035  003CEE  0060  F25C  F01C   	movff	sin@f,___flneg@f1
  5036  003CF4  0060  F260  F01D   	movff	sin@f+1,___flneg@f1+1
  5037  003CFA  0060  F264  F01E   	movff	sin@f+2,___flneg@f1+2
  5038  003D00  0060  F268  F01F   	movff	sin@f+3,___flneg@f1+3
  5039  003D06  ECFE  F032         	call	___flneg	;wreg free
  5040  003D0A  0060  F070  F097   	movff	?___flneg,?_sin
  5041  003D10  0060  F074  F098   	movff	?___flneg+1,?_sin+1
  5042  003D16  0060  F078  F099   	movff	?___flneg+2,?_sin+2
  5043  003D1C  0060  F07C  F09A   	movff	?___flneg+3,?_sin+3
  5044  003D22  0012               	return	
  5045  003D24                     l1584:
  5046                           
  5047                           ; BSR set to: 0
  5048  003D24  0060  F25C  F097   	movff	sin@f,?_sin
  5049  003D2A  0060  F260  F098   	movff	sin@f+1,?_sin+1
  5050  003D30  0060  F264  F099   	movff	sin@f+2,?_sin+2
  5051  003D36  0060  F268  F09A   	movff	sin@f+3,?_sin+3
  5052  003D3C  0012               	return		;funcret
  5053  003D3E                     __end_of_sin:
  5054                           	opt stack 0
  5055                           
  5056 ;; *************** function _floor *****************
  5057 ;; Defined at:
  5058 ;;		line 13 in file "D:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\floor.c"
  5059 ;; Parameters:    Size  Location     Type
  5060 ;;  x               4   37[BANK0 ] unsigned char 
  5061 ;; Auto vars:     Size  Location     Type
  5062 ;;  i               4   41[BANK0 ] unsigned char 
  5063 ;;  expon           2   45[BANK0 ] int 
  5064 ;; Return value:  Size  Location     Type
  5065 ;;                  4   37[BANK0 ] int 
  5066 ;; Registers used:
  5067 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5068 ;; Tracked objects:
  5069 ;;		On entry : 0/0
  5070 ;;		On exit  : 0/0
  5071 ;;		Unchanged: 0/0
  5072 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
  5073 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  5074 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  5075 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  5076 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  5077 ;;Total ram usage:       10 bytes
  5078 ;; Hardware stack levels used:    1
  5079 ;; Hardware stack levels required when called:    7
  5080 ;; This function calls:
  5081 ;;		___fladd
  5082 ;;		___flge
  5083 ;;		___fltol
  5084 ;;		___xxtofl
  5085 ;;		_frexp
  5086 ;; This function is called by:
  5087 ;;		_sin
  5088 ;; This function uses a non-reentrant model
  5089 ;;
  5090                           
  5091                           	psect	text9
  5092  005814                     __ptext9:
  5093                           	opt stack 0
  5094  005814                     _floor:
  5095                           	opt stack 21
  5096                           
  5097                           ;incstack = 0
  5098  005814  0060  F214  F00E   	movff	floor@x,frexp@value
  5099  00581A  0060  F218  F00F   	movff	floor@x+1,frexp@value+1
  5100  005820  0060  F21C  F010   	movff	floor@x+2,frexp@value+2
  5101  005826  0060  F220  F011   	movff	floor@x+3,frexp@value+3
  5102  00582C  0E8D               	movlw	low floor@expon
  5103  00582E  6E12               	movwf	frexp@eptr,c
  5104  005830  0E00               	movlw	high floor@expon
  5105  005832  6E13               	movwf	frexp@eptr+1,c
  5106  005834  ECD6  F030         	call	_frexp	;wreg free
  5107  005838  0100               	movlb	0	; () banked
  5108  00583A  AF8E               	btfss	(floor@expon+1)& (0+255),7,b
  5109  00583C  D014               	goto	l1758
  5110                           
  5111                           ; BSR set to: 0
  5112  00583E  AF88               	btfss	(floor@x+3)& (0+255),7,b
  5113  005840  D009               	goto	l1759
  5114                           
  5115                           ; BSR set to: 0
  5116  005842  0E00               	movlw	0
  5117  005844  6F85               	movwf	?_floor& (0+255),b
  5118  005846  0E00               	movlw	0
  5119  005848  6F86               	movwf	(?_floor+1)& (0+255),b
  5120  00584A  0E80               	movlw	128
  5121  00584C  6F87               	movwf	(?_floor+2)& (0+255),b
  5122  00584E  0EBF               	movlw	191
  5123  005850  6F88               	movwf	(?_floor+3)& (0+255),b
  5124                           
  5125                           ; BSR set to: 0
  5126  005852  0012               	return	
  5127  005854                     l1759:
  5128                           
  5129                           ; BSR set to: 0
  5130                           
  5131                           ; BSR set to: 0
  5132  005854  0E00               	movlw	0
  5133  005856  6F85               	movwf	?_floor& (0+255),b
  5134  005858  0E00               	movlw	0
  5135  00585A  6F86               	movwf	(?_floor+1)& (0+255),b
  5136  00585C  0E00               	movlw	0
  5137  00585E  6F87               	movwf	(?_floor+2)& (0+255),b
  5138  005860  0E00               	movlw	0
  5139  005862  6F88               	movwf	(?_floor+3)& (0+255),b
  5140                           
  5141                           ; BSR set to: 0
  5142  005864  0012               	return	
  5143  005866                     l1758:
  5144                           
  5145                           ; BSR set to: 0
  5146                           
  5147                           ; BSR set to: 0
  5148  005866  518E               	movf	(floor@expon+1)& (0+255),w,b
  5149  005868  E104               	bnz	u6660
  5150  00586A  0E1D               	movlw	29
  5151  00586C  5D8D               	subwf	floor@expon& (0+255),w,b
  5152  00586E  A0D8               	btfss	16344,0,c
  5153  005870  D00D               	goto	l1761
  5154  005872                     u6660:
  5155                           
  5156                           ; BSR set to: 0
  5157  005872  0060  F214  F085   	movff	floor@x,?_floor
  5158  005878  0060  F218  F086   	movff	floor@x+1,?_floor+1
  5159  00587E  0060  F21C  F087   	movff	floor@x+2,?_floor+2
  5160  005884  0060  F220  F088   	movff	floor@x+3,?_floor+3
  5161  00588A  0012               	return	
  5162  00588C                     l1761:
  5163                           
  5164                           ; BSR set to: 0
  5165                           
  5166                           ; BSR set to: 0
  5167  00588C  0060  F214  F07D   	movff	floor@x,___fltol@f1
  5168  005892  0060  F218  F07E   	movff	floor@x+1,___fltol@f1+1
  5169  005898  0060  F21C  F07F   	movff	floor@x+2,___fltol@f1+2
  5170  00589E  0060  F220  F080   	movff	floor@x+3,___fltol@f1+3
  5171  0058A4  ECA5  F02F         	call	___fltol	;wreg free
  5172  0058A8  0060  F1F4  F00E   	movff	?___fltol,___xxtofl@val
  5173  0058AE  0060  F1F8  F00F   	movff	?___fltol+1,___xxtofl@val+1
  5174  0058B4  0060  F1FC  F010   	movff	?___fltol+2,___xxtofl@val+2
  5175  0058BA  0060  F200  F011   	movff	?___fltol+3,___xxtofl@val+3
  5176  0058C0  0E01               	movlw	1
  5177  0058C2  EC50  F02B         	call	___xxtofl
  5178  0058C6  0060  F038  F089   	movff	?___xxtofl,floor@i
  5179  0058CC  0060  F03C  F08A   	movff	?___xxtofl+1,floor@i+1
  5180  0058D2  0060  F040  F08B   	movff	?___xxtofl+2,floor@i+2
  5181  0058D8  0060  F044  F08C   	movff	?___xxtofl+3,floor@i+3
  5182  0058DE  0060  F214  F00E   	movff	floor@x,___flge@ff1
  5183  0058E4  0060  F218  F00F   	movff	floor@x+1,___flge@ff1+1
  5184  0058EA  0060  F21C  F010   	movff	floor@x+2,___flge@ff1+2
  5185  0058F0  0060  F220  F011   	movff	floor@x+3,___flge@ff1+3
  5186  0058F6  0060  F224  F012   	movff	floor@i,___flge@ff2
  5187  0058FC  0060  F228  F013   	movff	floor@i+1,___flge@ff2+1
  5188  005902  0060  F22C  F014   	movff	floor@i+2,___flge@ff2+2
  5189  005908  0060  F230  F015   	movff	floor@i+3,___flge@ff2+3
  5190  00590E  EC63  F02D         	call	___flge	;wreg free
  5191  005912  B0D8               	btfsc	16344,0,c
  5192  005914  D023               	goto	l1762
  5193  005916  0060  F224  F035   	movff	floor@i,___fladd@b
  5194  00591C  0060  F228  F036   	movff	floor@i+1,___fladd@b+1
  5195  005922  0060  F22C  F037   	movff	floor@i+2,___fladd@b+2
  5196  005928  0060  F230  F038   	movff	floor@i+3,___fladd@b+3
  5197  00592E  0E00               	movlw	0
  5198  005930  6E39               	movwf	___fladd@a,c
  5199  005932  0E00               	movlw	0
  5200  005934  6E3A               	movwf	___fladd@a+1,c
  5201  005936  0E80               	movlw	128
  5202  005938  6E3B               	movwf	___fladd@a+2,c
  5203  00593A  0EBF               	movlw	191
  5204  00593C  6E3C               	movwf	___fladd@a+3,c
  5205  00593E  EC78  F020         	call	___fladd	;wreg free
  5206  005942  0060  F0D4  F085   	movff	?___fladd,?_floor
  5207  005948  0060  F0D8  F086   	movff	?___fladd+1,?_floor+1
  5208  00594E  0060  F0DC  F087   	movff	?___fladd+2,?_floor+2
  5209  005954  0060  F0E0  F088   	movff	?___fladd+3,?_floor+3
  5210  00595A  0012               	return	
  5211  00595C                     l1762:
  5212  00595C  0060  F224  F085   	movff	floor@i,?_floor
  5213  005962  0060  F228  F086   	movff	floor@i+1,?_floor+1
  5214  005968  0060  F22C  F087   	movff	floor@i+2,?_floor+2
  5215  00596E  0060  F230  F088   	movff	floor@i+3,?_floor+3
  5216  005974  0012               	return		;funcret
  5217  005976                     __end_of_floor:
  5218                           	opt stack 0
  5219                           
  5220 ;; *************** function ___flsub *****************
  5221 ;; Defined at:
  5222 ;;		line 245 in file "D:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcadd.c"
  5223 ;; Parameters:    Size  Location     Type
  5224 ;;  b               4   47[BANK0 ] int 
  5225 ;;  a               4   51[BANK0 ] int 
  5226 ;; Auto vars:     Size  Location     Type
  5227 ;;		None
  5228 ;; Return value:  Size  Location     Type
  5229 ;;                  4   47[BANK0 ] int 
  5230 ;; Registers used:
  5231 ;;		wreg, status,2, status,0, cstack
  5232 ;; Tracked objects:
  5233 ;;		On entry : 0/0
  5234 ;;		On exit  : 0/0
  5235 ;;		Unchanged: 0/0
  5236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
  5237 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  5238 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  5239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  5240 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  5241 ;;Total ram usage:        8 bytes
  5242 ;; Hardware stack levels used:    1
  5243 ;; Hardware stack levels required when called:    7
  5244 ;; This function calls:
  5245 ;;		___fladd
  5246 ;; This function is called by:
  5247 ;;		_main
  5248 ;;		_sin
  5249 ;; This function uses a non-reentrant model
  5250 ;;
  5251                           
  5252                           	psect	text10
  5253  00631E                     __ptext10:
  5254                           	opt stack 0
  5255  00631E                     ___flsub:
  5256                           	opt stack 21
  5257                           
  5258                           ;incstack = 0
  5259  00631E  0E00               	movlw	0
  5260  006320  0100               	movlb	0	; () banked
  5261  006322  1B93               	xorwf	___flsub@a& (0+255),f,b
  5262  006324  0E00               	movlw	0
  5263  006326  1B94               	xorwf	(___flsub@a+1)& (0+255),f,b
  5264  006328  0E00               	movlw	0
  5265  00632A  1B95               	xorwf	(___flsub@a+2)& (0+255),f,b
  5266  00632C  0E80               	movlw	128
  5267  00632E  1B96               	xorwf	(___flsub@a+3)& (0+255),f,b
  5268                           
  5269                           ; BSR set to: 0
  5270  006330  0060  F23C  F035   	movff	___flsub@b,___fladd@b
  5271  006336  0060  F240  F036   	movff	___flsub@b+1,___fladd@b+1
  5272  00633C  0060  F244  F037   	movff	___flsub@b+2,___fladd@b+2
  5273  006342  0060  F248  F038   	movff	___flsub@b+3,___fladd@b+3
  5274  006348  0060  F24C  F039   	movff	___flsub@a,___fladd@a
  5275  00634E  0060  F250  F03A   	movff	___flsub@a+1,___fladd@a+1
  5276  006354  0060  F254  F03B   	movff	___flsub@a+2,___fladd@a+2
  5277  00635A  0060  F258  F03C   	movff	___flsub@a+3,___fladd@a+3
  5278  006360  EC78  F020         	call	___fladd	;wreg free
  5279  006364  0060  F0D4  F08F   	movff	?___fladd,?___flsub
  5280  00636A  0060  F0D8  F090   	movff	?___fladd+1,?___flsub+1
  5281  006370  0060  F0DC  F091   	movff	?___fladd+2,?___flsub+2
  5282  006376  0060  F0E0  F092   	movff	?___fladd+3,?___flsub+3
  5283  00637C  0012               	return	
  5284  00637E                     __end_of___flsub:
  5285                           	opt stack 0
  5286                           
  5287 ;; *************** function _pitch_roll_motors_off *****************
  5288 ;; Defined at:
  5289 ;;		line 47 in file "RoboticArm.c"
  5290 ;; Parameters:    Size  Location     Type
  5291 ;;		None
  5292 ;; Auto vars:     Size  Location     Type
  5293 ;;		None
  5294 ;; Return value:  Size  Location     Type
  5295 ;;                  1    wreg      void 
  5296 ;; Registers used:
  5297 ;;		None
  5298 ;; Tracked objects:
  5299 ;;		On entry : 0/0
  5300 ;;		On exit  : 0/0
  5301 ;;		Unchanged: 0/0
  5302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
  5303 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  5304 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  5305 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  5306 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  5307 ;;Total ram usage:        0 bytes
  5308 ;; Hardware stack levels used:    1
  5309 ;; Hardware stack levels required when called:    6
  5310 ;; This function calls:
  5311 ;;		Nothing
  5312 ;; This function is called by:
  5313 ;;		_main
  5314 ;; This function uses a non-reentrant model
  5315 ;;
  5316                           
  5317                           	psect	text11
  5318  006AE6                     __ptext11:
  5319                           	opt stack 0
  5320  006AE6                     _pitch_roll_motors_off:
  5321                           	opt stack 24
  5322                           
  5323                           ;RoboticArm.c: 49: LATC4 = LATC5 = LATC6 = LATC7 = 0;
  5324                           
  5325                           ;incstack = 0
  5326  006AE6  013F               	movlb	63	; () banked
  5327  006AE8  9FBC               	bcf	188,7,b	;volatile
  5328  006AEA  9DBC               	bcf	188,6,b	;volatile
  5329  006AEC  9BBC               	bcf	188,5,b	;volatile
  5330  006AEE  99BC               	bcf	188,4,b	;volatile
  5331                           
  5332                           ;RoboticArm.c: 50: LATD5 = LATD4 = LATD7 = LATD6 = 0;
  5333  006AF0  9DBD               	bcf	189,6,b	;volatile
  5334  006AF2  9FBD               	bcf	189,7,b	;volatile
  5335  006AF4  99BD               	bcf	189,4,b	;volatile
  5336  006AF6  9BBD               	bcf	189,5,b	;volatile
  5337                           
  5338                           ; BSR set to: 63
  5339  006AF8  0012               	return		;funcret
  5340  006AFA                     __end_of_pitch_roll_motors_off:
  5341                           	opt stack 0
  5342                           
  5343 ;; *************** function _next_steps_calculation *****************
  5344 ;; Defined at:
  5345 ;;		line 101 in file "RoboticArm.c"
  5346 ;; Parameters:    Size  Location     Type
  5347 ;;		None
  5348 ;; Auto vars:     Size  Location     Type
  5349 ;;		None
  5350 ;; Return value:  Size  Location     Type
  5351 ;;                  1    wreg      void 
  5352 ;; Registers used:
  5353 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  5354 ;; Tracked objects:
  5355 ;;		On entry : 0/0
  5356 ;;		On exit  : 0/0
  5357 ;;		Unchanged: 0/0
  5358 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
  5359 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  5360 ;;      Locals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  5361 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  5362 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  5363 ;;Total ram usage:        8 bytes
  5364 ;; Hardware stack levels used:    1
  5365 ;; Hardware stack levels required when called:    9
  5366 ;; This function calls:
  5367 ;;		___fladd
  5368 ;;		___flmul
  5369 ;;		___flneg
  5370 ;;		___fltol
  5371 ;;		_round
  5372 ;; This function is called by:
  5373 ;;		_main
  5374 ;; This function uses a non-reentrant model
  5375 ;;
  5376                           
  5377                           	psect	text12
  5378  0054B2                     __ptext12:
  5379                           	opt stack 0
  5380  0054B2                     _next_steps_calculation:
  5381                           	opt stack 21
  5382                           
  5383                           ;RoboticArm.c: 103: next_shoulder_steps = round((next_shoulder_rad - real_shoulder_rad) 
      +                          * 1125.0);
  5384                           
  5385                           ; BSR set to: 63
  5386                           ;incstack = 0
  5387  0054B2  0E00               	movlw	0
  5388  0054B4  0100               	movlb	0	; () banked
  5389  0054B6  6F68               	movwf	___flmul@a& (0+255),b
  5390  0054B8  0EA0               	movlw	160
  5391  0054BA  6F69               	movwf	(___flmul@a+1)& (0+255),b
  5392  0054BC  0E8C               	movlw	140
  5393  0054BE  6F6A               	movwf	(___flmul@a+2)& (0+255),b
  5394  0054C0  0E44               	movlw	68
  5395  0054C2  6F6B               	movwf	(___flmul@a+3)& (0+255),b
  5396  0054C4  0060  F4D0  F039   	movff	_next_shoulder_rad,___fladd@a
  5397  0054CA  0060  F4D4  F03A   	movff	_next_shoulder_rad+1,___fladd@a+1
  5398  0054D0  0060  F4D8  F03B   	movff	_next_shoulder_rad+2,___fladd@a+2
  5399  0054D6  0060  F4DC  F03C   	movff	_next_shoulder_rad+3,___fladd@a+3
  5400  0054DC  0060  F2F4  F01C   	movff	_real_shoulder_rad,___flneg@f1
  5401  0054E2  0060  F2F8  F01D   	movff	_real_shoulder_rad+1,___flneg@f1+1
  5402  0054E8  0060  F2FC  F01E   	movff	_real_shoulder_rad+2,___flneg@f1+2
  5403  0054EE  0060  F300  F01F   	movff	_real_shoulder_rad+3,___flneg@f1+3
  5404  0054F4  ECFE  F032         	call	___flneg	;wreg free
  5405  0054F8  0060  F070  F035   	movff	?___flneg,___fladd@b
  5406  0054FE  0060  F074  F036   	movff	?___flneg+1,___fladd@b+1
  5407  005504  0060  F078  F037   	movff	?___flneg+2,___fladd@b+2
  5408  00550A  0060  F07C  F038   	movff	?___flneg+3,___fladd@b+3
  5409  005510  EC78  F020         	call	___fladd	;wreg free
  5410  005514  0060  F0D4  F064   	movff	?___fladd,___flmul@b
  5411  00551A  0060  F0D8  F065   	movff	?___fladd+1,___flmul@b+1
  5412  005520  0060  F0DC  F066   	movff	?___fladd+2,___flmul@b+2
  5413  005526  0060  F0E0  F067   	movff	?___fladd+3,___flmul@b+3
  5414  00552C  EC9F  F01E         	call	___flmul	;wreg free
  5415  005530  0060  F190  F097   	movff	?___flmul,_next_steps_calculation$2454
  5416  005536  0060  F194  F098   	movff	?___flmul+1,_next_steps_calculation$2454+1
  5417  00553C  0060  F198  F099   	movff	?___flmul+2,_next_steps_calculation$2454+2
  5418  005542  0060  F19C  F09A   	movff	?___flmul+3,_next_steps_calculation$2454+3
  5419                           
  5420                           ;RoboticArm.c: 103: next_shoulder_steps = round((next_shoulder_rad - real_shoulder_rad) 
      +                          * 1125.0);
  5421  005548  0060  F25C  F08F   	movff	_next_steps_calculation$2454,round@x
  5422  00554E  0060  F260  F090   	movff	_next_steps_calculation$2454+1,round@x+1
  5423  005554  0060  F264  F091   	movff	_next_steps_calculation$2454+2,round@x+2
  5424  00555A  0060  F268  F092   	movff	_next_steps_calculation$2454+3,round@x+3
  5425  005560  EC22  F02F         	call	_round	;wreg free
  5426  005564  0060  F23C  F09B   	movff	?_round,_next_steps_calculation$2455
  5427  00556A  0060  F240  F09C   	movff	?_round+1,_next_steps_calculation$2455+1
  5428  005570  0060  F244  F09D   	movff	?_round+2,_next_steps_calculation$2455+2
  5429  005576  0060  F248  F09E   	movff	?_round+3,_next_steps_calculation$2455+3
  5430                           
  5431                           ;RoboticArm.c: 103: next_shoulder_steps = round((next_shoulder_rad - real_shoulder_rad) 
      +                          * 1125.0);
  5432  00557C  0060  F26C  F07D   	movff	_next_steps_calculation$2455,___fltol@f1
  5433  005582  0060  F270  F07E   	movff	_next_steps_calculation$2455+1,___fltol@f1+1
  5434  005588  0060  F274  F07F   	movff	_next_steps_calculation$2455+2,___fltol@f1+2
  5435  00558E  0060  F278  F080   	movff	_next_steps_calculation$2455+3,___fltol@f1+3
  5436  005594  ECA5  F02F         	call	___fltol	;wreg free
  5437  005598  0060  F1F4  F0E3   	movff	?___fltol,_next_shoulder_steps
  5438  00559E  0060  F1F8  F0E4   	movff	?___fltol+1,_next_shoulder_steps+1
  5439                           
  5440                           ;RoboticArm.c: 104: next_elbow_steps = round((next_elbow_rad - real_elbow_rad) * 672.0);
  5441  0055A4  0E00               	movlw	0
  5442  0055A6  0100               	movlb	0	; () banked
  5443  0055A8  6F68               	movwf	___flmul@a& (0+255),b
  5444  0055AA  0E00               	movlw	0
  5445  0055AC  6F69               	movwf	(___flmul@a+1)& (0+255),b
  5446  0055AE  0E28               	movlw	40
  5447  0055B0  6F6A               	movwf	(___flmul@a+2)& (0+255),b
  5448  0055B2  0E44               	movlw	68
  5449  0055B4  6F6B               	movwf	(___flmul@a+3)& (0+255),b
  5450  0055B6  0060  F4C0  F039   	movff	_next_elbow_rad,___fladd@a
  5451  0055BC  0060  F4C4  F03A   	movff	_next_elbow_rad+1,___fladd@a+1
  5452  0055C2  0060  F4C8  F03B   	movff	_next_elbow_rad+2,___fladd@a+2
  5453  0055C8  0060  F4CC  F03C   	movff	_next_elbow_rad+3,___fladd@a+3
  5454  0055CE  0060  F2E4  F01C   	movff	_real_elbow_rad,___flneg@f1
  5455  0055D4  0060  F2E8  F01D   	movff	_real_elbow_rad+1,___flneg@f1+1
  5456  0055DA  0060  F2EC  F01E   	movff	_real_elbow_rad+2,___flneg@f1+2
  5457  0055E0  0060  F2F0  F01F   	movff	_real_elbow_rad+3,___flneg@f1+3
  5458  0055E6  ECFE  F032         	call	___flneg	;wreg free
  5459  0055EA  0060  F070  F035   	movff	?___flneg,___fladd@b
  5460  0055F0  0060  F074  F036   	movff	?___flneg+1,___fladd@b+1
  5461  0055F6  0060  F078  F037   	movff	?___flneg+2,___fladd@b+2
  5462  0055FC  0060  F07C  F038   	movff	?___flneg+3,___fladd@b+3
  5463  005602  EC78  F020         	call	___fladd	;wreg free
  5464  005606  0060  F0D4  F064   	movff	?___fladd,___flmul@b
  5465  00560C  0060  F0D8  F065   	movff	?___fladd+1,___flmul@b+1
  5466  005612  0060  F0DC  F066   	movff	?___fladd+2,___flmul@b+2
  5467  005618  0060  F0E0  F067   	movff	?___fladd+3,___flmul@b+3
  5468  00561E  EC9F  F01E         	call	___flmul	;wreg free
  5469  005622  0060  F190  F097   	movff	?___flmul,_next_steps_calculation$2454
  5470  005628  0060  F194  F098   	movff	?___flmul+1,_next_steps_calculation$2454+1
  5471  00562E  0060  F198  F099   	movff	?___flmul+2,_next_steps_calculation$2454+2
  5472  005634  0060  F19C  F09A   	movff	?___flmul+3,_next_steps_calculation$2454+3
  5473                           
  5474                           ;RoboticArm.c: 104: next_elbow_steps = round((next_elbow_rad - real_elbow_rad) * 672.0);
  5475  00563A  0060  F25C  F08F   	movff	_next_steps_calculation$2454,round@x
  5476  005640  0060  F260  F090   	movff	_next_steps_calculation$2454+1,round@x+1
  5477  005646  0060  F264  F091   	movff	_next_steps_calculation$2454+2,round@x+2
  5478  00564C  0060  F268  F092   	movff	_next_steps_calculation$2454+3,round@x+3
  5479  005652  EC22  F02F         	call	_round	;wreg free
  5480  005656  0060  F23C  F09B   	movff	?_round,_next_steps_calculation$2455
  5481  00565C  0060  F240  F09C   	movff	?_round+1,_next_steps_calculation$2455+1
  5482  005662  0060  F244  F09D   	movff	?_round+2,_next_steps_calculation$2455+2
  5483  005668  0060  F248  F09E   	movff	?_round+3,_next_steps_calculation$2455+3
  5484                           
  5485                           ;RoboticArm.c: 104: next_elbow_steps = round((next_elbow_rad - real_elbow_rad) * 672.0);
  5486  00566E  0060  F26C  F07D   	movff	_next_steps_calculation$2455,___fltol@f1
  5487  005674  0060  F270  F07E   	movff	_next_steps_calculation$2455+1,___fltol@f1+1
  5488  00567A  0060  F274  F07F   	movff	_next_steps_calculation$2455+2,___fltol@f1+2
  5489  005680  0060  F278  F080   	movff	_next_steps_calculation$2455+3,___fltol@f1+3
  5490  005686  ECA5  F02F         	call	___fltol	;wreg free
  5491  00568A  0060  F1F4  F0E1   	movff	?___fltol,_next_elbow_steps
  5492  005690  0060  F1F8  F0E2   	movff	?___fltol+1,_next_elbow_steps+1
  5493                           
  5494                           ;RoboticArm.c: 105: next_grip_steps = next_elbow_steps;
  5495  005696  C0E1  F0DF         	movff	_next_elbow_steps,_next_grip_steps
  5496  00569A  C0E2  F0E0         	movff	_next_elbow_steps+1,_next_grip_steps+1
  5497  00569E  0012               	return		;funcret
  5498  0056A0                     __end_of_next_steps_calculation:
  5499                           	opt stack 0
  5500                           
  5501 ;; *************** function _round *****************
  5502 ;; Defined at:
  5503 ;;		line 6 in file "D:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\round.c"
  5504 ;; Parameters:    Size  Location     Type
  5505 ;;  x               4   47[BANK0 ] void 
  5506 ;; Auto vars:     Size  Location     Type
  5507 ;;  f               4   51[BANK0 ] void 
  5508 ;; Return value:  Size  Location     Type
  5509 ;;                  4   47[BANK0 ] void 
  5510 ;; Registers used:
  5511 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5512 ;; Tracked objects:
  5513 ;;		On entry : 0/0
  5514 ;;		On exit  : 0/0
  5515 ;;		Unchanged: 0/0
  5516 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
  5517 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  5518 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  5519 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  5520 ;;      Totals:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  5521 ;;Total ram usage:        8 bytes
  5522 ;; Hardware stack levels used:    1
  5523 ;; Hardware stack levels required when called:    8
  5524 ;; This function calls:
  5525 ;;		___fladd
  5526 ;;		___flneg
  5527 ;;		_trunc
  5528 ;; This function is called by:
  5529 ;;		_steps_calculation
  5530 ;;		_next_steps_calculation
  5531 ;; This function uses a non-reentrant model
  5532 ;;
  5533                           
  5534                           	psect	text13
  5535  005E44                     __ptext13:
  5536                           	opt stack 0
  5537  005E44                     _round:
  5538                           	opt stack 21
  5539                           
  5540                           ;incstack = 0
  5541  005E44  0060  F23C  F085   	movff	round@x,trunc@x
  5542  005E4A  0060  F240  F086   	movff	round@x+1,trunc@x+1
  5543  005E50  0060  F244  F087   	movff	round@x+2,trunc@x+2
  5544  005E56  0060  F248  F088   	movff	round@x+3,trunc@x+3
  5545  005E5C  EC1C  F030         	call	_trunc	;wreg free
  5546  005E60  0060  F214  F01C   	movff	?_trunc,___flneg@f1
  5547  005E66  0060  F218  F01D   	movff	?_trunc+1,___flneg@f1+1
  5548  005E6C  0060  F21C  F01E   	movff	?_trunc+2,___flneg@f1+2
  5549  005E72  0060  F220  F01F   	movff	?_trunc+3,___flneg@f1+3
  5550  005E78  ECFE  F032         	call	___flneg	;wreg free
  5551  005E7C  0060  F070  F035   	movff	?___flneg,___fladd@b
  5552  005E82  0060  F074  F036   	movff	?___flneg+1,___fladd@b+1
  5553  005E88  0060  F078  F037   	movff	?___flneg+2,___fladd@b+2
  5554  005E8E  0060  F07C  F038   	movff	?___flneg+3,___fladd@b+3
  5555  005E94  0060  F23C  F039   	movff	round@x,___fladd@a
  5556  005E9A  0060  F240  F03A   	movff	round@x+1,___fladd@a+1
  5557  005EA0  0060  F244  F03B   	movff	round@x+2,___fladd@a+2
  5558  005EA6  0060  F248  F03C   	movff	round@x+3,___fladd@a+3
  5559  005EAC  EC78  F020         	call	___fladd	;wreg free
  5560  005EB0  0060  F0D4  F093   	movff	?___fladd,round@f
  5561  005EB6  0060  F0D8  F094   	movff	?___fladd+1,round@f+1
  5562  005EBC  0060  F0DC  F095   	movff	?___fladd+2,round@f+2
  5563  005EC2  0060  F0E0  F096   	movff	?___fladd+3,round@f+3
  5564  005EC8  0060  F23C  F035   	movff	round@x,___fladd@b
  5565  005ECE  0060  F240  F036   	movff	round@x+1,___fladd@b+1
  5566  005ED4  0060  F244  F037   	movff	round@x+2,___fladd@b+2
  5567  005EDA  0060  F248  F038   	movff	round@x+3,___fladd@b+3
  5568  005EE0  0060  F24C  F039   	movff	round@f,___fladd@a
  5569  005EE6  0060  F250  F03A   	movff	round@f+1,___fladd@a+1
  5570  005EEC  0060  F254  F03B   	movff	round@f+2,___fladd@a+2
  5571  005EF2  0060  F258  F03C   	movff	round@f+3,___fladd@a+3
  5572  005EF8  EC78  F020         	call	___fladd	;wreg free
  5573  005EFC  0060  F0D4  F08F   	movff	?___fladd,round@x
  5574  005F02  0060  F0D8  F090   	movff	?___fladd+1,round@x+1
  5575  005F08  0060  F0DC  F091   	movff	?___fladd+2,round@x+2
  5576  005F0E  0060  F0E0  F092   	movff	?___fladd+3,round@x+3
  5577  005F14  0060  F23C  F085   	movff	round@x,trunc@x
  5578  005F1A  0060  F240  F086   	movff	round@x+1,trunc@x+1
  5579  005F20  0060  F244  F087   	movff	round@x+2,trunc@x+2
  5580  005F26  0060  F248  F088   	movff	round@x+3,trunc@x+3
  5581  005F2C  EC1C  F030         	call	_trunc	;wreg free
  5582  005F30  0060  F214  F08F   	movff	?_trunc,?_round
  5583  005F36  0060  F218  F090   	movff	?_trunc+1,?_round+1
  5584  005F3C  0060  F21C  F091   	movff	?_trunc+2,?_round+2
  5585  005F42  0060  F220  F092   	movff	?_trunc+3,?_round+3
  5586  005F48  0012               	return	
  5587  005F4A                     __end_of_round:
  5588                           	opt stack 0
  5589                           
  5590 ;; *************** function _trunc *****************
  5591 ;; Defined at:
  5592 ;;		line 13 in file "D:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\trunc.c"
  5593 ;; Parameters:    Size  Location     Type
  5594 ;;  x               4   37[BANK0 ] void 
  5595 ;; Auto vars:     Size  Location     Type
  5596 ;;  i               4   41[BANK0 ] void 
  5597 ;;  expon           2   45[BANK0 ] int 
  5598 ;; Return value:  Size  Location     Type
  5599 ;;                  4   37[BANK0 ] int 
  5600 ;; Registers used:
  5601 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  5602 ;; Tracked objects:
  5603 ;;		On entry : 0/0
  5604 ;;		On exit  : 0/0
  5605 ;;		Unchanged: 0/0
  5606 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
  5607 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  5608 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  5609 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  5610 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  5611 ;;Total ram usage:       10 bytes
  5612 ;; Hardware stack levels used:    1
  5613 ;; Hardware stack levels required when called:    7
  5614 ;; This function calls:
  5615 ;;		___fltol
  5616 ;;		___xxtofl
  5617 ;;		_frexp
  5618 ;; This function is called by:
  5619 ;;		_round
  5620 ;; This function uses a non-reentrant model
  5621 ;;
  5622                           
  5623                           	psect	text14
  5624  006038                     __ptext14:
  5625                           	opt stack 0
  5626  006038                     _trunc:
  5627                           	opt stack 21
  5628                           
  5629                           ;incstack = 0
  5630  006038  0060  F214  F00E   	movff	trunc@x,frexp@value
  5631  00603E  0060  F218  F00F   	movff	trunc@x+1,frexp@value+1
  5632  006044  0060  F21C  F010   	movff	trunc@x+2,frexp@value+2
  5633  00604A  0060  F220  F011   	movff	trunc@x+3,frexp@value+3
  5634  006050  0E8D               	movlw	low trunc@expon
  5635  006052  6E12               	movwf	frexp@eptr,c
  5636  006054  0E00               	movlw	high trunc@expon
  5637  006056  6E13               	movwf	frexp@eptr+1,c
  5638  006058  ECD6  F030         	call	_frexp	;wreg free
  5639  00605C  0100               	movlb	0	; () banked
  5640  00605E  AF8E               	btfss	(trunc@expon+1)& (0+255),7,b
  5641  006060  D009               	goto	l1730
  5642                           
  5643                           ; BSR set to: 0
  5644  006062  0E00               	movlw	0
  5645  006064  6F85               	movwf	?_trunc& (0+255),b
  5646  006066  0E00               	movlw	0
  5647  006068  6F86               	movwf	(?_trunc+1)& (0+255),b
  5648  00606A  0E00               	movlw	0
  5649  00606C  6F87               	movwf	(?_trunc+2)& (0+255),b
  5650  00606E  0E00               	movlw	0
  5651  006070  6F88               	movwf	(?_trunc+3)& (0+255),b
  5652                           
  5653                           ; BSR set to: 0
  5654  006072  0012               	return	
  5655  006074                     l1730:
  5656                           
  5657                           ; BSR set to: 0
  5658                           
  5659                           ; BSR set to: 0
  5660  006074  518E               	movf	(trunc@expon+1)& (0+255),w,b
  5661  006076  E104               	bnz	u6760
  5662  006078  0E1D               	movlw	29
  5663  00607A  5D8D               	subwf	trunc@expon& (0+255),w,b
  5664  00607C  A0D8               	btfss	16344,0,c
  5665  00607E  D00D               	goto	l1732
  5666  006080                     u6760:
  5667                           
  5668                           ; BSR set to: 0
  5669  006080  0060  F214  F085   	movff	trunc@x,?_trunc
  5670  006086  0060  F218  F086   	movff	trunc@x+1,?_trunc+1
  5671  00608C  0060  F21C  F087   	movff	trunc@x+2,?_trunc+2
  5672  006092  0060  F220  F088   	movff	trunc@x+3,?_trunc+3
  5673  006098  0012               	return	
  5674  00609A                     l1732:
  5675                           
  5676                           ; BSR set to: 0
  5677                           
  5678                           ; BSR set to: 0
  5679  00609A  0060  F214  F07D   	movff	trunc@x,___fltol@f1
  5680  0060A0  0060  F218  F07E   	movff	trunc@x+1,___fltol@f1+1
  5681  0060A6  0060  F21C  F07F   	movff	trunc@x+2,___fltol@f1+2
  5682  0060AC  0060  F220  F080   	movff	trunc@x+3,___fltol@f1+3
  5683  0060B2  ECA5  F02F         	call	___fltol	;wreg free
  5684  0060B6  0060  F1F4  F00E   	movff	?___fltol,___xxtofl@val
  5685  0060BC  0060  F1F8  F00F   	movff	?___fltol+1,___xxtofl@val+1
  5686  0060C2  0060  F1FC  F010   	movff	?___fltol+2,___xxtofl@val+2
  5687  0060C8  0060  F200  F011   	movff	?___fltol+3,___xxtofl@val+3
  5688  0060CE  0E01               	movlw	1
  5689  0060D0  EC50  F02B         	call	___xxtofl
  5690  0060D4  0060  F038  F089   	movff	?___xxtofl,trunc@i
  5691  0060DA  0060  F03C  F08A   	movff	?___xxtofl+1,trunc@i+1
  5692  0060E0  0060  F040  F08B   	movff	?___xxtofl+2,trunc@i+2
  5693  0060E6  0060  F044  F08C   	movff	?___xxtofl+3,trunc@i+3
  5694  0060EC  0060  F224  F085   	movff	trunc@i,?_trunc
  5695  0060F2  0060  F228  F086   	movff	trunc@i+1,?_trunc+1
  5696  0060F8  0060  F22C  F087   	movff	trunc@i+2,?_trunc+2
  5697  0060FE  0060  F230  F088   	movff	trunc@i+3,?_trunc+3
  5698  006104  0012               	return	
  5699  006106                     __end_of_trunc:
  5700                           	opt stack 0
  5701                           
  5702 ;; *************** function _frexp *****************
  5703 ;; Defined at:
  5704 ;;		line 254 in file "D:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\frexp.c"
  5705 ;; Parameters:    Size  Location     Type
  5706 ;;  value           4   13[COMRAM] int 
  5707 ;;  eptr            2   17[COMRAM] PTR int 
  5708 ;;		 -> floor@expon(2), trunc@expon(2), 
  5709 ;; Auto vars:     Size  Location     Type
  5710 ;;		None
  5711 ;; Return value:  Size  Location     Type
  5712 ;;                  4   13[COMRAM] PTR int 
  5713 ;; Registers used:
  5714 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  5715 ;; Tracked objects:
  5716 ;;		On entry : 0/0
  5717 ;;		On exit  : 0/0
  5718 ;;		Unchanged: 0/0
  5719 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
  5720 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  5721 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  5722 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  5723 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  5724 ;;Total ram usage:        8 bytes
  5725 ;; Hardware stack levels used:    1
  5726 ;; Hardware stack levels required when called:    6
  5727 ;; This function calls:
  5728 ;;		Nothing
  5729 ;; This function is called by:
  5730 ;;		_trunc
  5731 ;;		_floor
  5732 ;; This function uses a non-reentrant model
  5733 ;;
  5734                           
  5735                           	psect	text15
  5736  0061AC                     __ptext15:
  5737                           	opt stack 0
  5738  0061AC                     _frexp:
  5739                           	opt stack 21
  5740                           
  5741                           ;incstack = 0
  5742  0061AC  500E               	movf	frexp@value,w,c
  5743  0061AE  100F               	iorwf	frexp@value+1,w,c
  5744  0061B0  1010               	iorwf	frexp@value+2,w,c
  5745  0061B2  1011               	iorwf	frexp@value+3,w,c
  5746  0061B4  A4D8               	btfss	16344,2,c
  5747  0061B6  D00B               	goto	l1767
  5748  0061B8  0060  F04B  FFD9   	movff	frexp@eptr,16345
  5749  0061BE  0060  F04F  FFDA   	movff	frexp@eptr+1,16346
  5750  0061C4  0E00               	movlw	0
  5751  0061C6  6EDE               	movwf	16350,c
  5752  0061C8  0E00               	movlw	0
  5753  0061CA  6EDD               	movwf	16349,c
  5754                           
  5755                           ;	Return value of _frexp is never used
  5756  0061CC  0012               	return	
  5757  0061CE                     l1767:
  5758  0061CE  5011               	movf	frexp@value+3,w,c
  5759  0061D0  0B7F               	andlw	127
  5760  0061D2  6E14               	movwf	??_frexp& (0+255),c
  5761  0061D4  6A15               	clrf	(??_frexp+1)& (0+255),c
  5762  0061D6  90D8               	bcf	16344,0,c
  5763  0061D8  3614               	rlcf	??_frexp,f,c
  5764  0061DA  3615               	rlcf	??_frexp+1,f,c
  5765  0061DC  0060  F04B  FFD9   	movff	frexp@eptr,16345
  5766  0061E2  0060  F04F  FFDA   	movff	frexp@eptr+1,16346
  5767  0061E8  0060  F053  FFDE   	movff	??_frexp,16350
  5768  0061EE  0060  F057  FFDD   	movff	??_frexp+1,16349
  5769  0061F4  AE10               	btfss	frexp@value+2,7,c
  5770  0061F6  D003               	goto	u6280
  5771  0061F8  6A14               	clrf	??_frexp& (0+255),c
  5772  0061FA  2A14               	incf	??_frexp& (0+255),f,c
  5773  0061FC  D001               	goto	u6288
  5774  0061FE                     u6280:
  5775  0061FE  6A14               	clrf	??_frexp& (0+255),c
  5776  006200                     u6288:
  5777  006200  5014               	movf	??_frexp,w,c
  5778  006202  0060  F04B  FFD9   	movff	frexp@eptr,16345
  5779  006208  0060  F04F  FFDA   	movff	frexp@eptr+1,16346
  5780  00620E  12DE               	iorwf	16350,f,c
  5781  006210  0E00               	movlw	0
  5782  006212  12DD               	iorwf	16349,f,c
  5783  006214  0060  F04B  FFD9   	movff	frexp@eptr,16345
  5784  00621A  0060  F04F  FFDA   	movff	frexp@eptr+1,16346
  5785  006220  0E82               	movlw	130
  5786  006222  26DE               	addwf	16350,f,c
  5787  006224  0EFF               	movlw	255
  5788  006226  22DD               	addwfc	16349,f,c
  5789  006228  8011               	bsf	frexp@value+3,0,c
  5790  00622A  8211               	bsf	frexp@value+3,1,c
  5791  00622C  8411               	bsf	frexp@value+3,2,c
  5792  00622E  8611               	bsf	frexp@value+3,3,c
  5793  006230  8811               	bsf	frexp@value+3,4,c
  5794  006232  8A11               	bsf	frexp@value+3,5,c
  5795  006234  9C11               	bcf	frexp@value+3,6,c
  5796  006236  9E10               	bcf	frexp@value+2,7,c
  5797  006238  0012               	return	
  5798  00623A                     __end_of_frexp:
  5799                           	opt stack 0
  5800                           
  5801 ;; *************** function ___xxtofl *****************
  5802 ;; Defined at:
  5803 ;;		line 10 in file "D:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\xxtofl.c"
  5804 ;; Parameters:    Size  Location     Type
  5805 ;;  sign            1    wreg     unsigned char 
  5806 ;;  val             4   13[COMRAM] long 
  5807 ;; Auto vars:     Size  Location     Type
  5808 ;;  sign            1   21[COMRAM] unsigned char 
  5809 ;;  arg             4   23[COMRAM] unsigned long 
  5810 ;;  exp             1   22[COMRAM] unsigned char 
  5811 ;; Return value:  Size  Location     Type
  5812 ;;                  4   13[COMRAM] unsigned char 
  5813 ;; Registers used:
  5814 ;;		wreg, status,2, status,0
  5815 ;; Tracked objects:
  5816 ;;		On entry : 0/0
  5817 ;;		On exit  : 0/0
  5818 ;;		Unchanged: 0/0
  5819 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
  5820 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  5821 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  5822 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  5823 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  5824 ;;Total ram usage:       14 bytes
  5825 ;; Hardware stack levels used:    1
  5826 ;; Hardware stack levels required when called:    6
  5827 ;; This function calls:
  5828 ;;		Nothing
  5829 ;; This function is called by:
  5830 ;;		_real_rad_calculation
  5831 ;;		_trunc
  5832 ;;		_floor
  5833 ;; This function uses a non-reentrant model
  5834 ;;
  5835                           
  5836                           	psect	text16
  5837  0056A0                     __ptext16:
  5838                           	opt stack 0
  5839  0056A0                     ___xxtofl:
  5840                           	opt stack 21
  5841                           
  5842                           ;incstack = 0
  5843                           ;___xxtofl@sign stored from wreg
  5844  0056A0  6E16               	movwf	___xxtofl@sign,c
  5845  0056A2  5016               	movf	___xxtofl@sign,w,c
  5846  0056A4  A4D8               	btfss	16344,2,c
  5847  0056A6  AE11               	btfss	___xxtofl@val+3,7,c
  5848  0056A8  D022               	goto	l1735
  5849  0056AA  0060  F038  F012   	movff	___xxtofl@val,??___xxtofl
  5850  0056B0  0060  F03C  F013   	movff	___xxtofl@val+1,??___xxtofl+1
  5851  0056B6  0060  F040  F014   	movff	___xxtofl@val+2,??___xxtofl+2
  5852  0056BC  0060  F044  F015   	movff	___xxtofl@val+3,??___xxtofl+3
  5853  0056C2  1E12               	comf	??___xxtofl,f,c
  5854  0056C4  1E13               	comf	??___xxtofl+1,f,c
  5855  0056C6  1E14               	comf	??___xxtofl+2,f,c
  5856  0056C8  1E15               	comf	??___xxtofl+3,f,c
  5857  0056CA  2A12               	incf	??___xxtofl,f,c
  5858  0056CC  0E00               	movlw	0
  5859  0056CE  2213               	addwfc	??___xxtofl+1,f,c
  5860  0056D0  2214               	addwfc	??___xxtofl+2,f,c
  5861  0056D2  2215               	addwfc	??___xxtofl+3,f,c
  5862  0056D4  0060  F048  F018   	movff	??___xxtofl,___xxtofl@arg
  5863  0056DA  0060  F04C  F019   	movff	??___xxtofl+1,___xxtofl@arg+1
  5864  0056E0  0060  F050  F01A   	movff	??___xxtofl+2,___xxtofl@arg+2
  5865  0056E6  0060  F054  F01B   	movff	??___xxtofl+3,___xxtofl@arg+3
  5866  0056EC  D00C               	goto	l1736
  5867  0056EE                     l1735:
  5868  0056EE  0060  F038  F018   	movff	___xxtofl@val,___xxtofl@arg
  5869  0056F4  0060  F03C  F019   	movff	___xxtofl@val+1,___xxtofl@arg+1
  5870  0056FA  0060  F040  F01A   	movff	___xxtofl@val+2,___xxtofl@arg+2
  5871  005700  0060  F044  F01B   	movff	___xxtofl@val+3,___xxtofl@arg+3
  5872  005706                     l1736:
  5873  005706  500E               	movf	___xxtofl@val,w,c
  5874  005708  100F               	iorwf	___xxtofl@val+1,w,c
  5875  00570A  1010               	iorwf	___xxtofl@val+2,w,c
  5876  00570C  1011               	iorwf	___xxtofl@val+3,w,c
  5877  00570E  A4D8               	btfss	16344,2,c
  5878  005710  D009               	goto	l1737
  5879  005712  0E00               	movlw	0
  5880  005714  6E0E               	movwf	?___xxtofl,c
  5881  005716  0E00               	movlw	0
  5882  005718  6E0F               	movwf	?___xxtofl+1,c
  5883  00571A  0E00               	movlw	0
  5884  00571C  6E10               	movwf	?___xxtofl+2,c
  5885  00571E  0E00               	movlw	0
  5886  005720  6E11               	movwf	?___xxtofl+3,c
  5887  005722  0012               	return	
  5888  005724                     l1737:
  5889  005724  0E96               	movlw	150
  5890  005726  6E17               	movwf	___xxtofl@exp,c
  5891  005728  D006               	goto	l1739
  5892  00572A  2A17               	incf	___xxtofl@exp,f,c
  5893  00572C  90D8               	bcf	16344,0,c
  5894  00572E  321B               	rrcf	___xxtofl@arg+3,f,c
  5895  005730  321A               	rrcf	___xxtofl@arg+2,f,c
  5896  005732  3219               	rrcf	___xxtofl@arg+1,f,c
  5897  005734  3218               	rrcf	___xxtofl@arg,f,c
  5898  005736                     l1739:
  5899  005736  0E00               	movlw	0
  5900  005738  1418               	andwf	___xxtofl@arg,w,c
  5901  00573A  6E12               	movwf	??___xxtofl& (0+255),c
  5902  00573C  0E00               	movlw	0
  5903  00573E  1419               	andwf	___xxtofl@arg+1,w,c
  5904  005740  6E13               	movwf	(??___xxtofl+1)& (0+255),c
  5905  005742  0E00               	movlw	0
  5906  005744  141A               	andwf	___xxtofl@arg+2,w,c
  5907  005746  6E14               	movwf	(??___xxtofl+2)& (0+255),c
  5908  005748  0EFE               	movlw	254
  5909  00574A  141B               	andwf	___xxtofl@arg+3,w,c
  5910  00574C  6E15               	movwf	(??___xxtofl+3)& (0+255),c
  5911  00574E  5012               	movf	??___xxtofl,w,c
  5912  005750  1013               	iorwf	??___xxtofl+1,w,c
  5913  005752  1014               	iorwf	??___xxtofl+2,w,c
  5914  005754  1015               	iorwf	??___xxtofl+3,w,c
  5915  005756  B4D8               	btfsc	16344,2,c
  5916  005758  D00D               	goto	l1742
  5917  00575A  D7E7               	goto	l1740
  5918  00575C  2A17               	incf	___xxtofl@exp,f,c
  5919  00575E  0E01               	movlw	1
  5920  005760  2618               	addwf	___xxtofl@arg,f,c
  5921  005762  0E00               	movlw	0
  5922  005764  2219               	addwfc	___xxtofl@arg+1,f,c
  5923  005766  221A               	addwfc	___xxtofl@arg+2,f,c
  5924  005768  221B               	addwfc	___xxtofl@arg+3,f,c
  5925  00576A  90D8               	bcf	16344,0,c
  5926  00576C  321B               	rrcf	___xxtofl@arg+3,f,c
  5927  00576E  321A               	rrcf	___xxtofl@arg+2,f,c
  5928  005770  3219               	rrcf	___xxtofl@arg+1,f,c
  5929  005772  3218               	rrcf	___xxtofl@arg,f,c
  5930  005774                     l1742:
  5931  005774  0E00               	movlw	0
  5932  005776  1418               	andwf	___xxtofl@arg,w,c
  5933  005778  6E12               	movwf	??___xxtofl& (0+255),c
  5934  00577A  0E00               	movlw	0
  5935  00577C  1419               	andwf	___xxtofl@arg+1,w,c
  5936  00577E  6E13               	movwf	(??___xxtofl+1)& (0+255),c
  5937  005780  0E00               	movlw	0
  5938  005782  141A               	andwf	___xxtofl@arg+2,w,c
  5939  005784  6E14               	movwf	(??___xxtofl+2)& (0+255),c
  5940  005786  0EFF               	movlw	255
  5941  005788  141B               	andwf	___xxtofl@arg+3,w,c
  5942  00578A  6E15               	movwf	(??___xxtofl+3)& (0+255),c
  5943  00578C  5012               	movf	??___xxtofl,w,c
  5944  00578E  1013               	iorwf	??___xxtofl+1,w,c
  5945  005790  1014               	iorwf	??___xxtofl+2,w,c
  5946  005792  1015               	iorwf	??___xxtofl+3,w,c
  5947  005794  B4D8               	btfsc	16344,2,c
  5948  005796  D007               	goto	l1745
  5949  005798  D7E1               	goto	l1743
  5950  00579A  0617               	decf	___xxtofl@exp,f,c
  5951  00579C  90D8               	bcf	16344,0,c
  5952  00579E  3618               	rlcf	___xxtofl@arg,f,c
  5953  0057A0  3619               	rlcf	___xxtofl@arg+1,f,c
  5954  0057A2  361A               	rlcf	___xxtofl@arg+2,f,c
  5955  0057A4  361B               	rlcf	___xxtofl@arg+3,f,c
  5956  0057A6                     l1745:
  5957  0057A6  BE1A               	btfsc	___xxtofl@arg+2,7,c
  5958  0057A8  D003               	goto	u6350
  5959  0057AA  0E02               	movlw	2
  5960  0057AC  6017               	cpfslt	___xxtofl@exp,c
  5961  0057AE  D7F5               	goto	l1746
  5962  0057B0                     u6350:
  5963  0057B0  B017               	btfsc	___xxtofl@exp,0,c
  5964  0057B2  D008               	goto	l1750
  5965  0057B4  0EFF               	movlw	255
  5966  0057B6  1618               	andwf	___xxtofl@arg,f,c
  5967  0057B8  0EFF               	movlw	255
  5968  0057BA  1619               	andwf	___xxtofl@arg+1,f,c
  5969  0057BC  0E7F               	movlw	127
  5970  0057BE  161A               	andwf	___xxtofl@arg+2,f,c
  5971  0057C0  0EFF               	movlw	255
  5972  0057C2  161B               	andwf	___xxtofl@arg+3,f,c
  5973  0057C4                     l1750:
  5974  0057C4  90D8               	bcf	16344,0,c
  5975  0057C6  3217               	rrcf	___xxtofl@exp,f,c
  5976  0057C8  0060  F05C  F012   	movff	___xxtofl@exp,??___xxtofl
  5977  0057CE  6A13               	clrf	(??___xxtofl+1)& (0+255),c
  5978  0057D0  6A14               	clrf	(??___xxtofl+2)& (0+255),c
  5979  0057D2  6A15               	clrf	(??___xxtofl+3)& (0+255),c
  5980  0057D4  0060  F048  F015   	movff	??___xxtofl,??___xxtofl+3
  5981  0057DA  6A14               	clrf	??___xxtofl+2,c
  5982  0057DC  6A13               	clrf	??___xxtofl+1,c
  5983  0057DE  6A12               	clrf	??___xxtofl,c
  5984  0057E0  5012               	movf	??___xxtofl,w,c
  5985  0057E2  1218               	iorwf	___xxtofl@arg,f,c
  5986  0057E4  5013               	movf	??___xxtofl+1,w,c
  5987  0057E6  1219               	iorwf	___xxtofl@arg+1,f,c
  5988  0057E8  5014               	movf	??___xxtofl+2,w,c
  5989  0057EA  121A               	iorwf	___xxtofl@arg+2,f,c
  5990  0057EC  5015               	movf	??___xxtofl+3,w,c
  5991  0057EE  121B               	iorwf	___xxtofl@arg+3,f,c
  5992  0057F0  5016               	movf	___xxtofl@sign,w,c
  5993  0057F2  A4D8               	btfss	16344,2,c
  5994  0057F4  AE11               	btfss	___xxtofl@val+3,7,c
  5995  0057F6  D001               	goto	l1751
  5996  0057F8  8E1B               	bsf	___xxtofl@arg+3,7,c
  5997  0057FA                     l1751:
  5998  0057FA  0060  F060  F00E   	movff	___xxtofl@arg,?___xxtofl
  5999  005800  0060  F064  F00F   	movff	___xxtofl@arg+1,?___xxtofl+1
  6000  005806  0060  F068  F010   	movff	___xxtofl@arg+2,?___xxtofl+2
  6001  00580C  0060  F06C  F011   	movff	___xxtofl@arg+3,?___xxtofl+3
  6002  005812  0012               	return	
  6003  005814                     __end_of___xxtofl:
  6004                           	opt stack 0
  6005                           
  6006 ;; *************** function ___fltol *****************
  6007 ;; Defined at:
  6008 ;;		line 43 in file "D:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fltol.c"
  6009 ;; Parameters:    Size  Location     Type
  6010 ;;  f1              4   29[BANK0 ] unsigned char 
  6011 ;; Auto vars:     Size  Location     Type
  6012 ;;  exp1            1   69[COMRAM] unsigned char 
  6013 ;;  sign1           1   68[COMRAM] unsigned char 
  6014 ;; Return value:  Size  Location     Type
  6015 ;;                  4   29[BANK0 ] long 
  6016 ;; Registers used:
  6017 ;;		wreg, status,2, status,0
  6018 ;; Tracked objects:
  6019 ;;		On entry : 0/0
  6020 ;;		On exit  : 0/0
  6021 ;;		Unchanged: 0/0
  6022 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
  6023 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  6024 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  6025 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  6026 ;;      Totals:         2       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  6027 ;;Total ram usage:       10 bytes
  6028 ;; Hardware stack levels used:    1
  6029 ;; Hardware stack levels required when called:    6
  6030 ;; This function calls:
  6031 ;;		Nothing
  6032 ;; This function is called by:
  6033 ;;		_steps_calculation
  6034 ;;		_next_steps_calculation
  6035 ;;		_trunc
  6036 ;;		_floor
  6037 ;; This function uses a non-reentrant model
  6038 ;;
  6039                           
  6040                           	psect	text17
  6041  005F4A                     __ptext17:
  6042                           	opt stack 0
  6043  005F4A                     ___fltol:
  6044                           	opt stack 21
  6045                           
  6046                           ;incstack = 0
  6047  005F4A  0100               	movlb	0	; () banked
  6048  005F4C  357F               	rlcf	(___fltol@f1+2)& (0+255),w,b
  6049  005F4E  3580               	rlcf	(___fltol@f1+3)& (0+255),w,b
  6050  005F50  6E46               	movwf	___fltol@exp1,c
  6051  005F52  5046               	movf	___fltol@exp1,w,c
  6052  005F54  A4D8               	btfss	16344,2,c
  6053  005F56  D009               	goto	l1370
  6054                           
  6055                           ; BSR set to: 0
  6056  005F58  0E00               	movlw	0
  6057  005F5A  6F7D               	movwf	?___fltol& (0+255),b
  6058  005F5C  0E00               	movlw	0
  6059  005F5E  6F7E               	movwf	(?___fltol+1)& (0+255),b
  6060  005F60  0E00               	movlw	0
  6061  005F62  6F7F               	movwf	(?___fltol+2)& (0+255),b
  6062  005F64  0E00               	movlw	0
  6063  005F66  6F80               	movwf	(?___fltol+3)& (0+255),b
  6064                           
  6065                           ; BSR set to: 0
  6066  005F68  0012               	return	
  6067  005F6A                     l1370:
  6068                           
  6069                           ; BSR set to: 0
  6070                           
  6071                           ; BSR set to: 0
  6072  005F6A  0060  F1F4  F081   	movff	___fltol@f1,??___fltol
  6073  005F70  0060  F1F8  F082   	movff	___fltol@f1+1,??___fltol+1
  6074  005F76  0060  F1FC  F083   	movff	___fltol@f1+2,??___fltol+2
  6075  005F7C  0060  F200  F084   	movff	___fltol@f1+3,??___fltol+3
  6076  005F82  0E20               	movlw	32
  6077  005F84  D005               	goto	u6210
  6078  005F86                     u6215:
  6079  005F86  90D8               	bcf	16344,0,c
  6080  005F88  3384               	rrcf	(??___fltol+3)& (0+255),f,b
  6081  005F8A  3383               	rrcf	(??___fltol+2)& (0+255),f,b
  6082  005F8C  3382               	rrcf	(??___fltol+1)& (0+255),f,b
  6083  005F8E  3381               	rrcf	??___fltol& (0+255),f,b
  6084  005F90                     u6210:
  6085  005F90  2EE8               	decfsz	16360,f,c
  6086  005F92  D7F9               	goto	u6215
  6087  005F94  5181               	movf	??___fltol& (0+255),w,b
  6088  005F96  6E45               	movwf	___fltol@sign1,c
  6089                           
  6090                           ; BSR set to: 0
  6091  005F98  8F7F               	bsf	(___fltol@f1+2)& (0+255),7,b
  6092                           
  6093                           ; BSR set to: 0
  6094  005F9A  0EFF               	movlw	255
  6095  005F9C  177D               	andwf	___fltol@f1& (0+255),f,b
  6096  005F9E  0EFF               	movlw	255
  6097  005FA0  177E               	andwf	(___fltol@f1+1)& (0+255),f,b
  6098  005FA2  0EFF               	movlw	255
  6099  005FA4  177F               	andwf	(___fltol@f1+2)& (0+255),f,b
  6100  005FA6  0E00               	movlw	0
  6101  005FA8  1780               	andwf	(___fltol@f1+3)& (0+255),f,b
  6102                           
  6103                           ; BSR set to: 0
  6104  005FAA  0E96               	movlw	150
  6105  005FAC  5E46               	subwf	___fltol@exp1,f,c
  6106                           
  6107                           ; BSR set to: 0
  6108  005FAE  AE46               	btfss	___fltol@exp1,7,c
  6109  005FB0  D016               	goto	l1372
  6110                           
  6111                           ; BSR set to: 0
  6112  005FB2  5046               	movf	___fltol@exp1,w,c
  6113  005FB4  0A80               	xorlw	128
  6114  005FB6  0F97               	addlw	151
  6115  005FB8  B0D8               	btfsc	16344,0,c
  6116  005FBA  D009               	goto	l1373
  6117                           
  6118                           ; BSR set to: 0
  6119  005FBC  0E00               	movlw	0
  6120  005FBE  6F7D               	movwf	?___fltol& (0+255),b
  6121  005FC0  0E00               	movlw	0
  6122  005FC2  6F7E               	movwf	(?___fltol+1)& (0+255),b
  6123  005FC4  0E00               	movlw	0
  6124  005FC6  6F7F               	movwf	(?___fltol+2)& (0+255),b
  6125  005FC8  0E00               	movlw	0
  6126  005FCA  6F80               	movwf	(?___fltol+3)& (0+255),b
  6127                           
  6128                           ; BSR set to: 0
  6129  005FCC  0012               	return	
  6130  005FCE                     l1373:
  6131                           
  6132                           ; BSR set to: 0
  6133                           
  6134                           ; BSR set to: 0
  6135                           
  6136                           ; BSR set to: 0
  6137  005FCE  90D8               	bcf	16344,0,c
  6138  005FD0  3380               	rrcf	(___fltol@f1+3)& (0+255),f,b
  6139  005FD2  337F               	rrcf	(___fltol@f1+2)& (0+255),f,b
  6140  005FD4  337E               	rrcf	(___fltol@f1+1)& (0+255),f,b
  6141  005FD6  337D               	rrcf	___fltol@f1& (0+255),f,b
  6142                           
  6143                           ; BSR set to: 0
  6144  005FD8  3E46               	incfsz	___fltol@exp1,f,c
  6145  005FDA  D7F9               	goto	l1373
  6146                           
  6147                           ; BSR set to: 0
  6148  005FDC  D015               	goto	u6250
  6149  005FDE                     l1372:
  6150                           
  6151                           ; BSR set to: 0
  6152                           
  6153                           ; BSR set to: 0
  6154  005FDE  0E1F               	movlw	31
  6155  005FE0  6446               	cpfsgt	___fltol@exp1,c
  6156  005FE2  D00F               	goto	l1378
  6157                           
  6158                           ; BSR set to: 0
  6159  005FE4  0E00               	movlw	0
  6160  005FE6  6F7D               	movwf	?___fltol& (0+255),b
  6161  005FE8  0E00               	movlw	0
  6162  005FEA  6F7E               	movwf	(?___fltol+1)& (0+255),b
  6163  005FEC  0E00               	movlw	0
  6164  005FEE  6F7F               	movwf	(?___fltol+2)& (0+255),b
  6165  005FF0  0E00               	movlw	0
  6166  005FF2  6F80               	movwf	(?___fltol+3)& (0+255),b
  6167                           
  6168                           ; BSR set to: 0
  6169  005FF4  0012               	return	
  6170  005FF6                     
  6171                           ; BSR set to: 0
  6172                           
  6173                           ; BSR set to: 0
  6174  005FF6  90D8               	bcf	16344,0,c
  6175  005FF8  377D               	rlcf	___fltol@f1& (0+255),f,b
  6176  005FFA  377E               	rlcf	(___fltol@f1+1)& (0+255),f,b
  6177  005FFC  377F               	rlcf	(___fltol@f1+2)& (0+255),f,b
  6178  005FFE  3780               	rlcf	(___fltol@f1+3)& (0+255),f,b
  6179  006000  0646               	decf	___fltol@exp1,f,c
  6180  006002                     l1378:
  6181                           
  6182                           ; BSR set to: 0
  6183                           
  6184                           ; BSR set to: 0
  6185  006002  5046               	movf	___fltol@exp1,w,c
  6186  006004  A4D8               	btfss	16344,2,c
  6187  006006  D7F7               	goto	l1379
  6188  006008                     u6250:
  6189                           
  6190                           ; BSR set to: 0
  6191                           
  6192                           ; BSR set to: 0
  6193                           
  6194                           ; BSR set to: 0
  6195  006008  5045               	movf	___fltol@sign1,w,c
  6196  00600A  B4D8               	btfsc	16344,2,c
  6197  00600C  D008               	goto	l1381
  6198                           
  6199                           ; BSR set to: 0
  6200  00600E  1F80               	comf	(___fltol@f1+3)& (0+255),f,b
  6201  006010  1F7F               	comf	(___fltol@f1+2)& (0+255),f,b
  6202  006012  1F7E               	comf	(___fltol@f1+1)& (0+255),f,b
  6203  006014  6D7D               	negf	___fltol@f1& (0+255),b
  6204  006016  0E00               	movlw	0
  6205  006018  237E               	addwfc	(___fltol@f1+1)& (0+255),f,b
  6206  00601A  237F               	addwfc	(___fltol@f1+2)& (0+255),f,b
  6207  00601C  2380               	addwfc	(___fltol@f1+3)& (0+255),f,b
  6208  00601E                     l1381:
  6209                           
  6210                           ; BSR set to: 0
  6211                           
  6212                           ; BSR set to: 0
  6213  00601E  0060  F1F4  F07D   	movff	___fltol@f1,?___fltol
  6214  006024  0060  F1F8  F07E   	movff	___fltol@f1+1,?___fltol+1
  6215  00602A  0060  F1FC  F07F   	movff	___fltol@f1+2,?___fltol+2
  6216  006030  0060  F200  F080   	movff	___fltol@f1+3,?___fltol+3
  6217  006036  0012               	return	
  6218  006038                     __end_of___fltol:
  6219                           	opt stack 0
  6220                           
  6221 ;; *************** function _next_rad_calculation_manual *****************
  6222 ;; Defined at:
  6223 ;;		line 84 in file "RoboticArm.c"
  6224 ;; Parameters:    Size  Location     Type
  6225 ;;		None
  6226 ;; Auto vars:     Size  Location     Type
  6227 ;;		None
  6228 ;; Return value:  Size  Location     Type
  6229 ;;                  1    wreg      void 
  6230 ;; Registers used:
  6231 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6232 ;; Tracked objects:
  6233 ;;		On entry : 0/0
  6234 ;;		On exit  : 0/0
  6235 ;;		Unchanged: 0/0
  6236 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
  6237 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  6238 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  6239 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  6240 ;;      Totals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  6241 ;;Total ram usage:        4 bytes
  6242 ;; Hardware stack levels used:    1
  6243 ;; Hardware stack levels required when called:    9
  6244 ;; This function calls:
  6245 ;;		___fladd
  6246 ;;		___fldiv
  6247 ;;		___flmul
  6248 ;;		___flneg
  6249 ;;		_atan
  6250 ;;		_sqrt
  6251 ;; This function is called by:
  6252 ;;		_main
  6253 ;; This function uses a non-reentrant model
  6254 ;;
  6255                           
  6256                           	psect	text18
  6257  00501A                     __ptext18:
  6258                           	opt stack 0
  6259  00501A                     _next_rad_calculation_manual:
  6260                           	opt stack 21
  6261                           
  6262                           ;RoboticArm.c: 86: beta = atan(Z0/R0);
  6263                           
  6264                           ; BSR set to: 0
  6265                           ;incstack = 0
  6266  00501A  0060  F324  F01C   	movff	_Z0,___fldiv@b
  6267  005020  0060  F328  F01D   	movff	_Z0+1,___fldiv@b+1
  6268  005026  0060  F32C  F01E   	movff	_Z0+2,___fldiv@b+2
  6269  00502C  0060  F330  F01F   	movff	_Z0+3,___fldiv@b+3
  6270  005032  0060  F334  F020   	movff	_R0,___fldiv@a
  6271  005038  0060  F338  F021   	movff	_R0+1,___fldiv@a+1
  6272  00503E  0060  F33C  F022   	movff	_R0+2,___fldiv@a+2
  6273  005044  0060  F340  F023   	movff	_R0+3,___fldiv@a+3
  6274  00504A  EC45  F025         	call	___fldiv	;wreg free
  6275  00504E  0060  F070  F0AF   	movff	?___fldiv,_next_rad_calculation_manual$2451
  6276  005054  0060  F074  F0B0   	movff	?___fldiv+1,_next_rad_calculation_manual$2451+1
  6277  00505A  0060  F078  F0B1   	movff	?___fldiv+2,_next_rad_calculation_manual$2451+2
  6278  005060  0060  F07C  F0B2   	movff	?___fldiv+3,_next_rad_calculation_manual$2451+3
  6279                           
  6280                           ;RoboticArm.c: 86: beta = atan(Z0/R0);
  6281  005066  0060  F2BC  F09A   	movff	_next_rad_calculation_manual$2451,atan@f
  6282  00506C  0060  F2C0  F09B   	movff	_next_rad_calculation_manual$2451+1,atan@f+1
  6283  005072  0060  F2C4  F09C   	movff	_next_rad_calculation_manual$2451+2,atan@f+2
  6284  005078  0060  F2C8  F09D   	movff	_next_rad_calculation_manual$2451+3,atan@f+3
  6285  00507E  ECCE  F023         	call	_atan	;wreg free
  6286  005082  0060  F268  F0C5   	movff	?_atan,_beta
  6287  005088  0060  F26C  F0C6   	movff	?_atan+1,_beta+1
  6288  00508E  0060  F270  F0C7   	movff	?_atan+2,_beta+2
  6289  005094  0060  F274  F0C8   	movff	?_atan+3,_beta+3
  6290                           
  6291                           ;RoboticArm.c: 87: alfa = (R0*R0+Z0*Z0);
  6292  00509A  0060  F334  F068   	movff	_R0,___flmul@a
  6293  0050A0  0060  F338  F069   	movff	_R0+1,___flmul@a+1
  6294  0050A6  0060  F33C  F06A   	movff	_R0+2,___flmul@a+2
  6295  0050AC  0060  F340  F06B   	movff	_R0+3,___flmul@a+3
  6296  0050B2  0060  F334  F064   	movff	_R0,___flmul@b
  6297  0050B8  0060  F338  F065   	movff	_R0+1,___flmul@b+1
  6298  0050BE  0060  F33C  F066   	movff	_R0+2,___flmul@b+2
  6299  0050C4  0060  F340  F067   	movff	_R0+3,___flmul@b+3
  6300  0050CA  EC9F  F01E         	call	___flmul	;wreg free
  6301  0050CE  0060  F190  F035   	movff	?___flmul,___fladd@b
  6302  0050D4  0060  F194  F036   	movff	?___flmul+1,___fladd@b+1
  6303  0050DA  0060  F198  F037   	movff	?___flmul+2,___fladd@b+2
  6304  0050E0  0060  F19C  F038   	movff	?___flmul+3,___fladd@b+3
  6305  0050E6  0060  F324  F068   	movff	_Z0,___flmul@a
  6306  0050EC  0060  F328  F069   	movff	_Z0+1,___flmul@a+1
  6307  0050F2  0060  F32C  F06A   	movff	_Z0+2,___flmul@a+2
  6308  0050F8  0060  F330  F06B   	movff	_Z0+3,___flmul@a+3
  6309  0050FE  0060  F324  F064   	movff	_Z0,___flmul@b
  6310  005104  0060  F328  F065   	movff	_Z0+1,___flmul@b+1
  6311  00510A  0060  F32C  F066   	movff	_Z0+2,___flmul@b+2
  6312  005110  0060  F330  F067   	movff	_Z0+3,___flmul@b+3
  6313  005116  EC9F  F01E         	call	___flmul	;wreg free
  6314  00511A  0060  F190  F039   	movff	?___flmul,___fladd@a
  6315  005120  0060  F194  F03A   	movff	?___flmul+1,___fladd@a+1
  6316  005126  0060  F198  F03B   	movff	?___flmul+2,___fladd@a+2
  6317  00512C  0060  F19C  F03C   	movff	?___flmul+3,___fladd@a+3
  6318  005132  EC78  F020         	call	___fladd	;wreg free
  6319  005136  0060  F0D4  F0F5   	movff	?___fladd,_alfa
  6320  00513C  0060  F0D8  F0F6   	movff	?___fladd+1,_alfa+1
  6321  005142  0060  F0DC  F0F7   	movff	?___fladd+2,_alfa+2
  6322  005148  0060  F0E0  F0F8   	movff	?___fladd+3,_alfa+3
  6323                           
  6324                           ;RoboticArm.c: 88: alfa = (4*177.8*177.8)/alfa-1;
  6325  00514E  0060  F3D4  F020   	movff	_alfa,___fldiv@a
  6326  005154  0060  F3D8  F021   	movff	_alfa+1,___fldiv@a+1
  6327  00515A  0060  F3DC  F022   	movff	_alfa+2,___fldiv@a+2
  6328  005160  0060  F3E0  F023   	movff	_alfa+3,___fldiv@a+3
  6329  005166  0EAE               	movlw	174
  6330  005168  6E1C               	movwf	___fldiv@b,c
  6331  00516A  0EF9               	movlw	249
  6332  00516C  6E1D               	movwf	___fldiv@b+1,c
  6333  00516E  0EF6               	movlw	246
  6334  005170  6E1E               	movwf	___fldiv@b+2,c
  6335  005172  0E47               	movlw	71
  6336  005174  6E1F               	movwf	___fldiv@b+3,c
  6337  005176  EC45  F025         	call	___fldiv	;wreg free
  6338  00517A  0060  F070  F035   	movff	?___fldiv,___fladd@b
  6339  005180  0060  F074  F036   	movff	?___fldiv+1,___fladd@b+1
  6340  005186  0060  F078  F037   	movff	?___fldiv+2,___fladd@b+2
  6341  00518C  0060  F07C  F038   	movff	?___fldiv+3,___fladd@b+3
  6342  005192  0E00               	movlw	0
  6343  005194  6E39               	movwf	___fladd@a,c
  6344  005196  0E00               	movlw	0
  6345  005198  6E3A               	movwf	___fladd@a+1,c
  6346  00519A  0E80               	movlw	128
  6347  00519C  6E3B               	movwf	___fladd@a+2,c
  6348  00519E  0EBF               	movlw	191
  6349  0051A0  6E3C               	movwf	___fladd@a+3,c
  6350  0051A2  EC78  F020         	call	___fladd	;wreg free
  6351  0051A6  0060  F0D4  F0F5   	movff	?___fladd,_alfa
  6352  0051AC  0060  F0D8  F0F6   	movff	?___fladd+1,_alfa+1
  6353  0051B2  0060  F0DC  F0F7   	movff	?___fladd+2,_alfa+2
  6354  0051B8  0060  F0E0  F0F8   	movff	?___fladd+3,_alfa+3
  6355                           
  6356                           ;RoboticArm.c: 89: alfa = atan(sqrt(alfa));
  6357  0051BE  0060  F3D4  F07D   	movff	_alfa,sqrt@a
  6358  0051C4  0060  F3D8  F07E   	movff	_alfa+1,sqrt@a+1
  6359  0051CA  0060  F3DC  F07F   	movff	_alfa+2,sqrt@a+2
  6360  0051D0  0060  F3E0  F080   	movff	_alfa+3,sqrt@a+3
  6361  0051D6  EC38  F022         	call	_sqrt	;wreg free
  6362  0051DA  0060  F1F4  F09A   	movff	?_sqrt,atan@f
  6363  0051E0  0060  F1F8  F09B   	movff	?_sqrt+1,atan@f+1
  6364  0051E6  0060  F1FC  F09C   	movff	?_sqrt+2,atan@f+2
  6365  0051EC  0060  F200  F09D   	movff	?_sqrt+3,atan@f+3
  6366  0051F2  ECCE  F023         	call	_atan	;wreg free
  6367  0051F6  0060  F268  F0F5   	movff	?_atan,_alfa
  6368  0051FC  0060  F26C  F0F6   	movff	?_atan+1,_alfa+1
  6369  005202  0060  F270  F0F7   	movff	?_atan+2,_alfa+2
  6370  005208  0060  F274  F0F8   	movff	?_atan+3,_alfa+3
  6371                           
  6372                           ;RoboticArm.c: 90: next_shoulder_rad = alfa+beta;
  6373  00520E  0060  F3D4  F035   	movff	_alfa,___fladd@b
  6374  005214  0060  F3D8  F036   	movff	_alfa+1,___fladd@b+1
  6375  00521A  0060  F3DC  F037   	movff	_alfa+2,___fladd@b+2
  6376  005220  0060  F3E0  F038   	movff	_alfa+3,___fladd@b+3
  6377  005226  0060  F314  F039   	movff	_beta,___fladd@a
  6378  00522C  0060  F318  F03A   	movff	_beta+1,___fladd@a+1
  6379  005232  0060  F31C  F03B   	movff	_beta+2,___fladd@a+2
  6380  005238  0060  F320  F03C   	movff	_beta+3,___fladd@a+3
  6381  00523E  EC78  F020         	call	___fladd	;wreg free
  6382  005242  0060  F0D4  F134   	movff	?___fladd,_next_shoulder_rad
  6383  005248  0060  F0D8  F135   	movff	?___fladd+1,_next_shoulder_rad+1
  6384  00524E  0060  F0DC  F136   	movff	?___fladd+2,_next_shoulder_rad+2
  6385  005254  0060  F0E0  F137   	movff	?___fladd+3,_next_shoulder_rad+3
  6386                           
  6387                           ;RoboticArm.c: 91: next_elbow_rad = beta-alfa;
  6388  00525A  0060  F3D4  F01C   	movff	_alfa,___flneg@f1
  6389  005260  0060  F3D8  F01D   	movff	_alfa+1,___flneg@f1+1
  6390  005266  0060  F3DC  F01E   	movff	_alfa+2,___flneg@f1+2
  6391  00526C  0060  F3E0  F01F   	movff	_alfa+3,___flneg@f1+3
  6392  005272  ECFE  F032         	call	___flneg	;wreg free
  6393  005276  0060  F070  F035   	movff	?___flneg,___fladd@b
  6394  00527C  0060  F074  F036   	movff	?___flneg+1,___fladd@b+1
  6395  005282  0060  F078  F037   	movff	?___flneg+2,___fladd@b+2
  6396  005288  0060  F07C  F038   	movff	?___flneg+3,___fladd@b+3
  6397  00528E  0060  F314  F039   	movff	_beta,___fladd@a
  6398  005294  0060  F318  F03A   	movff	_beta+1,___fladd@a+1
  6399  00529A  0060  F31C  F03B   	movff	_beta+2,___fladd@a+2
  6400  0052A0  0060  F320  F03C   	movff	_beta+3,___fladd@a+3
  6401  0052A6  EC78  F020         	call	___fladd	;wreg free
  6402  0052AA  0060  F0D4  F130   	movff	?___fladd,_next_elbow_rad
  6403  0052B0  0060  F0D8  F131   	movff	?___fladd+1,_next_elbow_rad+1
  6404  0052B6  0060  F0DC  F132   	movff	?___fladd+2,_next_elbow_rad+2
  6405  0052BC  0060  F0E0  F133   	movff	?___fladd+3,_next_elbow_rad+3
  6406  0052C2  0012               	return		;funcret
  6407  0052C4                     __end_of_next_rad_calculation_manual:
  6408                           	opt stack 0
  6409                           
  6410 ;; *************** function _sqrt *****************
  6411 ;; Defined at:
  6412 ;;		line 9 in file "D:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcsqrt.c"
  6413 ;; Parameters:    Size  Location     Type
  6414 ;;  a               4   29[BANK0 ] void 
  6415 ;; Auto vars:     Size  Location     Type
  6416 ;;  frac            4   54[BANK0 ] unsigned long 
  6417 ;;  root            4   50[BANK0 ] struct .
  6418 ;;  grs             4   44[BANK0 ] unsigned long 
  6419 ;;  tfrac           4   39[BANK0 ] unsigned long 
  6420 ;;  exp             2   48[BANK0 ] int 
  6421 ;;  p               1   43[BANK0 ] unsigned char 
  6422 ;;  i               1   38[BANK0 ] unsigned char 
  6423 ;;  sign            1   37[BANK0 ] unsigned char 
  6424 ;; Return value:  Size  Location     Type
  6425 ;;                  4   29[BANK0 ] unsigned char 
  6426 ;; Registers used:
  6427 ;;		wreg, status,2, status,0
  6428 ;; Tracked objects:
  6429 ;;		On entry : 0/0
  6430 ;;		On exit  : 0/0
  6431 ;;		Unchanged: 0/0
  6432 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
  6433 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  6434 ;;      Locals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  6435 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  6436 ;;      Totals:         0      29       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  6437 ;;Total ram usage:       29 bytes
  6438 ;; Hardware stack levels used:    1
  6439 ;; Hardware stack levels required when called:    6
  6440 ;; This function calls:
  6441 ;;		Nothing
  6442 ;; This function is called by:
  6443 ;;		_rad_calculation_auto
  6444 ;;		_rad_calculation_manual
  6445 ;;		_next_rad_calculation_manual
  6446 ;; This function uses a non-reentrant model
  6447 ;;
  6448                           
  6449                           	psect	text19
  6450  004470                     __ptext19:
  6451                           	opt stack 0
  6452  004470                     _sqrt:
  6453                           	opt stack 23
  6454                           
  6455                           ;incstack = 0
  6456  004470  0100               	movlb	0	; () banked
  6457  004472  5180               	movf	(sqrt@a+3)& (0+255),w,b
  6458  004474  0B80               	andlw	128
  6459  004476  6F85               	movwf	sqrt@sign& (0+255),b
  6460  004478  5180               	movf	(sqrt@a+3)& (0+255),w,b
  6461  00447A  2580               	addwf	(sqrt@a+3)& (0+255),w,b
  6462  00447C  6F8B               	movwf	sqrt@p& (0+255),b
  6463                           
  6464                           ; BSR set to: 0
  6465  00447E  BF7F               	btfsc	(sqrt@a+2)& (0+255),7,b
  6466                           
  6467                           ; BSR set to: 0
  6468  004480  818B               	bsf	sqrt@p& (0+255),0,b
  6469                           
  6470                           ; BSR set to: 0
  6471                           
  6472                           ; BSR set to: 0
  6473  004482  0060  F22C  F090   	movff	sqrt@p,sqrt@exp
  6474  004488  6B91               	clrf	(sqrt@exp+1)& (0+255),b
  6475                           
  6476                           ; BSR set to: 0
  6477  00448A  0EFF               	movlw	255
  6478  00448C  157D               	andwf	sqrt@a& (0+255),w,b
  6479  00448E  6F96               	movwf	sqrt@frac& (0+255),b
  6480  004490  0EFF               	movlw	255
  6481  004492  157E               	andwf	(sqrt@a+1)& (0+255),w,b
  6482  004494  6F97               	movwf	(sqrt@frac+1)& (0+255),b
  6483  004496  0E7F               	movlw	127
  6484  004498  157F               	andwf	(sqrt@a+2)& (0+255),w,b
  6485  00449A  6F98               	movwf	(sqrt@frac+2)& (0+255),b
  6486  00449C  0E00               	movlw	0
  6487  00449E  1580               	andwf	(sqrt@a+3)& (0+255),w,b
  6488  0044A0  6F99               	movwf	(sqrt@frac+3)& (0+255),b
  6489                           
  6490                           ; BSR set to: 0
  6491  0044A2  5190               	movf	sqrt@exp& (0+255),w,b
  6492  0044A4  1191               	iorwf	(sqrt@exp+1)& (0+255),w,b
  6493  0044A6  B4D8               	btfsc	16344,2,c
  6494  0044A8  D005               	goto	l1711
  6495                           
  6496                           ; BSR set to: 0
  6497  0044AA  8F98               	bsf	(sqrt@frac+2)& (0+255),7,b
  6498                           
  6499                           ; BSR set to: 0
  6500  0044AC  2990               	incf	sqrt@exp& (0+255),w,b
  6501  0044AE  1191               	iorwf	(sqrt@exp+1)& (0+255),w,b
  6502  0044B0  A4D8               	btfss	16344,2,c
  6503  0044B2  D008               	goto	l1713
  6504  0044B4                     l1711:
  6505                           
  6506                           ; BSR set to: 0
  6507                           
  6508                           ; BSR set to: 0
  6509  0044B4  0E00               	movlw	0
  6510  0044B6  6F96               	movwf	sqrt@frac& (0+255),b
  6511  0044B8  0E00               	movlw	0
  6512  0044BA  6F97               	movwf	(sqrt@frac+1)& (0+255),b
  6513  0044BC  0E00               	movlw	0
  6514  0044BE  6F98               	movwf	(sqrt@frac+2)& (0+255),b
  6515  0044C0  0E00               	movlw	0
  6516  0044C2  6F99               	movwf	(sqrt@frac+3)& (0+255),b
  6517  0044C4                     l1713:
  6518                           
  6519                           ; BSR set to: 0
  6520                           
  6521                           ; BSR set to: 0
  6522  0044C4  5190               	movf	sqrt@exp& (0+255),w,b
  6523  0044C6  1191               	iorwf	(sqrt@exp+1)& (0+255),w,b
  6524  0044C8  A4D8               	btfss	16344,2,c
  6525  0044CA  D009               	goto	l1714
  6526                           
  6527                           ; BSR set to: 0
  6528  0044CC  0E00               	movlw	0
  6529  0044CE  6F7D               	movwf	?_sqrt& (0+255),b
  6530  0044D0  0E00               	movlw	0
  6531  0044D2  6F7E               	movwf	(?_sqrt+1)& (0+255),b
  6532  0044D4  0E00               	movlw	0
  6533  0044D6  6F7F               	movwf	(?_sqrt+2)& (0+255),b
  6534  0044D8  0E00               	movlw	0
  6535  0044DA  6F80               	movwf	(?_sqrt+3)& (0+255),b
  6536                           
  6537                           ; BSR set to: 0
  6538  0044DC  0012               	return	
  6539  0044DE                     l1714:
  6540                           
  6541                           ; BSR set to: 0
  6542                           
  6543                           ; BSR set to: 0
  6544  0044DE  5185               	movf	sqrt@sign& (0+255),w,b
  6545  0044E0  B4D8               	btfsc	16344,2,c
  6546  0044E2  D01E               	goto	l1716
  6547                           
  6548                           ; BSR set to: 0
  6549  0044E4  0E00               	movlw	0
  6550  0044E6  6F92               	movwf	sqrt@root& (0+255),b
  6551  0044E8  0E00               	movlw	0
  6552  0044EA  6F93               	movwf	(sqrt@root+1)& (0+255),b
  6553  0044EC  0E40               	movlw	64
  6554  0044EE  6F94               	movwf	(sqrt@root+2)& (0+255),b
  6555  0044F0  0E00               	movlw	0
  6556  0044F2  6F95               	movwf	(sqrt@root+3)& (0+255),b
  6557                           
  6558                           ; BSR set to: 0
  6559  0044F4  0E80               	movlw	128
  6560  0044F6  1394               	iorwf	(sqrt@root+2)& (0+255),f,b
  6561  0044F8  0EFF               	movlw	255
  6562  0044FA  1395               	iorwf	(sqrt@root+3)& (0+255),f,b
  6563                           
  6564                           ; BSR set to: 0
  6565  0044FC  0E00               	movlw	0
  6566  0044FE  0101               	movlb	1	; () banked
  6567  004500  6F59               	movwf	(_errno+1)& (0+255),b
  6568  004502  0E21               	movlw	33
  6569  004504  6F58               	movwf	_errno& (0+255),b
  6570                           
  6571                           ; BSR set to: 1
  6572  004506  0060  F248  F07D   	movff	sqrt@root,?_sqrt
  6573  00450C  0060  F24C  F07E   	movff	sqrt@root+1,?_sqrt+1
  6574  004512  0060  F250  F07F   	movff	sqrt@root+2,?_sqrt+2
  6575  004518  0060  F254  F080   	movff	sqrt@root+3,?_sqrt+3
  6576                           
  6577                           ; BSR set to: 1
  6578  00451E  0012               	return	
  6579  004520                     l1716:
  6580                           
  6581                           ; BSR set to: 1
  6582  004520  0100               	movlb	0	; () banked
  6583  004522  2990               	incf	sqrt@exp& (0+255),w,b
  6584  004524  1191               	iorwf	(sqrt@exp+1)& (0+255),w,b
  6585  004526  A4D8               	btfss	16344,2,c
  6586  004528  D015               	goto	l1717
  6587                           
  6588                           ; BSR set to: 0
  6589  00452A  0E00               	movlw	0
  6590  00452C  6F92               	movwf	sqrt@root& (0+255),b
  6591  00452E  0E00               	movlw	0
  6592  004530  6F93               	movwf	(sqrt@root+1)& (0+255),b
  6593  004532  0E80               	movlw	128
  6594  004534  6F94               	movwf	(sqrt@root+2)& (0+255),b
  6595  004536  0E7F               	movlw	127
  6596  004538  6F95               	movwf	(sqrt@root+3)& (0+255),b
  6597                           
  6598                           ; BSR set to: 0
  6599  00453A  0060  F248  F07D   	movff	sqrt@root,?_sqrt
  6600  004540  0060  F24C  F07E   	movff	sqrt@root+1,?_sqrt+1
  6601  004546  0060  F250  F07F   	movff	sqrt@root+2,?_sqrt+2
  6602  00454C  0060  F254  F080   	movff	sqrt@root+3,?_sqrt+3
  6603                           
  6604                           ; BSR set to: 0
  6605  004552  0012               	return	
  6606  004554                     l1717:
  6607                           
  6608                           ; BSR set to: 0
  6609                           
  6610                           ; BSR set to: 0
  6611  004554  0E81               	movlw	129
  6612  004556  2790               	addwf	sqrt@exp& (0+255),f,b
  6613  004558  0EFF               	movlw	255
  6614  00455A  2391               	addwfc	(sqrt@exp+1)& (0+255),f,b
  6615  00455C  5190               	movf	sqrt@exp& (0+255),w,b
  6616  00455E  0B01               	andlw	1
  6617  004560  6F8B               	movwf	sqrt@p& (0+255),b
  6618  004562  3591               	rlcf	(sqrt@exp+1)& (0+255),w,b
  6619  004564  3391               	rrcf	(sqrt@exp+1)& (0+255),f,b
  6620  004566  3390               	rrcf	sqrt@exp& (0+255),f,b
  6621  004568  0E7F               	movlw	127
  6622  00456A  2790               	addwf	sqrt@exp& (0+255),f,b
  6623  00456C  0E00               	movlw	0
  6624  00456E  2391               	addwfc	(sqrt@exp+1)& (0+255),f,b
  6625  004570  90D8               	bcf	16344,0,c
  6626  004572  3596               	rlcf	sqrt@frac& (0+255),w,b
  6627  004574  6F87               	movwf	sqrt@tfrac& (0+255),b
  6628  004576  3597               	rlcf	(sqrt@frac+1)& (0+255),w,b
  6629  004578  6F88               	movwf	(sqrt@tfrac+1)& (0+255),b
  6630  00457A  3598               	rlcf	(sqrt@frac+2)& (0+255),w,b
  6631  00457C  6F89               	movwf	(sqrt@tfrac+2)& (0+255),b
  6632  00457E  3599               	rlcf	(sqrt@frac+3)& (0+255),w,b
  6633  004580  6F8A               	movwf	(sqrt@tfrac+3)& (0+255),b
  6634                           
  6635                           ; BSR set to: 0
  6636  004582  0E00               	movlw	0
  6637  004584  6F96               	movwf	sqrt@frac& (0+255),b
  6638  004586  0E00               	movlw	0
  6639  004588  6F97               	movwf	(sqrt@frac+1)& (0+255),b
  6640  00458A  0E00               	movlw	0
  6641  00458C  6F98               	movwf	(sqrt@frac+2)& (0+255),b
  6642  00458E  0E00               	movlw	0
  6643  004590  6F99               	movwf	(sqrt@frac+3)& (0+255),b
  6644                           
  6645                           ; BSR set to: 0
  6646  004592  0E00               	movlw	0
  6647  004594  6F8C               	movwf	sqrt@grs& (0+255),b
  6648  004596  0E00               	movlw	0
  6649  004598  6F8D               	movwf	(sqrt@grs+1)& (0+255),b
  6650  00459A  0E00               	movlw	0
  6651  00459C  6F8E               	movwf	(sqrt@grs+2)& (0+255),b
  6652  00459E  0E01               	movlw	1
  6653  0045A0  6F8F               	movwf	(sqrt@grs+3)& (0+255),b
  6654                           
  6655                           ; BSR set to: 0
  6656  0045A2  518B               	movf	sqrt@p& (0+255),w,b
  6657  0045A4  B4D8               	btfsc	16344,2,c
  6658  0045A6  D005               	goto	l1718
  6659                           
  6660                           ; BSR set to: 0
  6661  0045A8  90D8               	bcf	16344,0,c
  6662  0045AA  3787               	rlcf	sqrt@tfrac& (0+255),f,b
  6663  0045AC  3788               	rlcf	(sqrt@tfrac+1)& (0+255),f,b
  6664  0045AE  3789               	rlcf	(sqrt@tfrac+2)& (0+255),f,b
  6665  0045B0  378A               	rlcf	(sqrt@tfrac+3)& (0+255),f,b
  6666  0045B2                     l1718:
  6667                           
  6668                           ; BSR set to: 0
  6669                           
  6670                           ; BSR set to: 0
  6671  0045B2  0E00               	movlw	0
  6672  0045B4  6F86               	movwf	sqrt@i& (0+255),b
  6673  0045B6  D05E               	goto	l1719
  6674  0045B8                     
  6675                           ; BSR set to: 0
  6676                           
  6677                           ; BSR set to: 0
  6678  0045B8  518C               	movf	sqrt@grs& (0+255),w,b
  6679  0045BA  1396               	iorwf	sqrt@frac& (0+255),f,b
  6680  0045BC  518D               	movf	(sqrt@grs+1)& (0+255),w,b
  6681  0045BE  1397               	iorwf	(sqrt@frac+1)& (0+255),f,b
  6682  0045C0  518E               	movf	(sqrt@grs+2)& (0+255),w,b
  6683  0045C2  1398               	iorwf	(sqrt@frac+2)& (0+255),f,b
  6684  0045C4  518F               	movf	(sqrt@grs+3)& (0+255),w,b
  6685  0045C6  1399               	iorwf	(sqrt@frac+3)& (0+255),f,b
  6686  0045C8  5196               	movf	sqrt@frac& (0+255),w,b
  6687  0045CA  5D87               	subwf	sqrt@tfrac& (0+255),w,b
  6688  0045CC  5197               	movf	(sqrt@frac+1)& (0+255),w,b
  6689  0045CE  5988               	subwfb	(sqrt@tfrac+1)& (0+255),w,b
  6690  0045D0  5198               	movf	(sqrt@frac+2)& (0+255),w,b
  6691  0045D2  5989               	subwfb	(sqrt@tfrac+2)& (0+255),w,b
  6692  0045D4  5199               	movf	(sqrt@frac+3)& (0+255),w,b
  6693  0045D6  598A               	subwfb	(sqrt@tfrac+3)& (0+255),w,b
  6694  0045D8  A0D8               	btfss	16344,0,c
  6695  0045DA  D011               	goto	l1721
  6696                           
  6697                           ; BSR set to: 0
  6698  0045DC  5196               	movf	sqrt@frac& (0+255),w,b
  6699  0045DE  5F87               	subwf	sqrt@tfrac& (0+255),f,b
  6700  0045E0  5197               	movf	(sqrt@frac+1)& (0+255),w,b
  6701  0045E2  5B88               	subwfb	(sqrt@tfrac+1)& (0+255),f,b
  6702  0045E4  5198               	movf	(sqrt@frac+2)& (0+255),w,b
  6703  0045E6  5B89               	subwfb	(sqrt@tfrac+2)& (0+255),f,b
  6704  0045E8  5199               	movf	(sqrt@frac+3)& (0+255),w,b
  6705  0045EA  5B8A               	subwfb	(sqrt@tfrac+3)& (0+255),f,b
  6706  0045EC  518C               	movf	sqrt@grs& (0+255),w,b
  6707  0045EE  2796               	addwf	sqrt@frac& (0+255),f,b
  6708  0045F0  518D               	movf	(sqrt@grs+1)& (0+255),w,b
  6709  0045F2  2397               	addwfc	(sqrt@frac+1)& (0+255),f,b
  6710  0045F4  518E               	movf	(sqrt@grs+2)& (0+255),w,b
  6711  0045F6  2398               	addwfc	(sqrt@frac+2)& (0+255),f,b
  6712  0045F8  518F               	movf	(sqrt@grs+3)& (0+255),w,b
  6713  0045FA  2399               	addwfc	(sqrt@frac+3)& (0+255),f,b
  6714  0045FC  D018               	goto	l1722
  6715  0045FE                     l1721:
  6716                           
  6717                           ; BSR set to: 0
  6718                           
  6719                           ; BSR set to: 0
  6720  0045FE  0060  F230  F081   	movff	sqrt@grs,??_sqrt
  6721  004604  0060  F234  F082   	movff	sqrt@grs+1,??_sqrt+1
  6722  00460A  0060  F238  F083   	movff	sqrt@grs+2,??_sqrt+2
  6723  004610  0060  F23C  F084   	movff	sqrt@grs+3,??_sqrt+3
  6724  004616  1F81               	comf	??_sqrt& (0+255),f,b
  6725  004618  1F82               	comf	(??_sqrt+1)& (0+255),f,b
  6726  00461A  1F83               	comf	(??_sqrt+2)& (0+255),f,b
  6727  00461C  1F84               	comf	(??_sqrt+3)& (0+255),f,b
  6728  00461E  5181               	movf	??_sqrt& (0+255),w,b
  6729  004620  1796               	andwf	sqrt@frac& (0+255),f,b
  6730  004622  5182               	movf	(??_sqrt+1)& (0+255),w,b
  6731  004624  1797               	andwf	(sqrt@frac+1)& (0+255),f,b
  6732  004626  5183               	movf	(??_sqrt+2)& (0+255),w,b
  6733  004628  1798               	andwf	(sqrt@frac+2)& (0+255),f,b
  6734  00462A  5184               	movf	(??_sqrt+3)& (0+255),w,b
  6735  00462C  1799               	andwf	(sqrt@frac+3)& (0+255),f,b
  6736  00462E                     l1722:
  6737                           
  6738                           ; BSR set to: 0
  6739                           
  6740                           ; BSR set to: 0
  6741  00462E  0060  F230  F081   	movff	sqrt@grs,??_sqrt
  6742  004634  0060  F234  F082   	movff	sqrt@grs+1,??_sqrt+1
  6743  00463A  0060  F238  F083   	movff	sqrt@grs+2,??_sqrt+2
  6744  004640  0060  F23C  F084   	movff	sqrt@grs+3,??_sqrt+3
  6745  004646  90D8               	bcf	16344,0,c
  6746  004648  3384               	rrcf	(??_sqrt+3)& (0+255),f,b
  6747  00464A  3383               	rrcf	(??_sqrt+2)& (0+255),f,b
  6748  00464C  3382               	rrcf	(??_sqrt+1)& (0+255),f,b
  6749  00464E  3381               	rrcf	??_sqrt& (0+255),f,b
  6750  004650  0060  F204  F08C   	movff	??_sqrt,sqrt@grs
  6751  004656  0060  F208  F08D   	movff	??_sqrt+1,sqrt@grs+1
  6752  00465C  0060  F20C  F08E   	movff	??_sqrt+2,sqrt@grs+2
  6753  004662  0060  F210  F08F   	movff	??_sqrt+3,sqrt@grs+3
  6754                           
  6755                           ; BSR set to: 0
  6756  004668  90D8               	bcf	16344,0,c
  6757  00466A  3787               	rlcf	sqrt@tfrac& (0+255),f,b
  6758  00466C  3788               	rlcf	(sqrt@tfrac+1)& (0+255),f,b
  6759  00466E  3789               	rlcf	(sqrt@tfrac+2)& (0+255),f,b
  6760  004670  378A               	rlcf	(sqrt@tfrac+3)& (0+255),f,b
  6761                           
  6762                           ; BSR set to: 0
  6763  004672  2B86               	incf	sqrt@i& (0+255),f,b
  6764  004674                     l1719:
  6765                           
  6766                           ; BSR set to: 0
  6767                           
  6768                           ; BSR set to: 0
  6769  004674  0E18               	movlw	24
  6770  004676  6586               	cpfsgt	sqrt@i& (0+255),b
  6771  004678  D79F               	goto	l1720
  6772                           
  6773                           ; BSR set to: 0
  6774                           
  6775                           ; BSR set to: 0
  6776  00467A  0060  F258  F081   	movff	sqrt@frac,??_sqrt
  6777  004680  0060  F25C  F082   	movff	sqrt@frac+1,??_sqrt+1
  6778  004686  0060  F260  F083   	movff	sqrt@frac+2,??_sqrt+2
  6779  00468C  0060  F264  F084   	movff	sqrt@frac+3,??_sqrt+3
  6780  004692  90D8               	bcf	16344,0,c
  6781  004694  3384               	rrcf	(??_sqrt+3)& (0+255),f,b
  6782  004696  3383               	rrcf	(??_sqrt+2)& (0+255),f,b
  6783  004698  3382               	rrcf	(??_sqrt+1)& (0+255),f,b
  6784  00469A  3381               	rrcf	??_sqrt& (0+255),f,b
  6785  00469C  0060  F204  F096   	movff	??_sqrt,sqrt@frac
  6786  0046A2  0060  F208  F097   	movff	??_sqrt+1,sqrt@frac+1
  6787  0046A8  0060  F20C  F098   	movff	??_sqrt+2,sqrt@frac+2
  6788  0046AE  0060  F210  F099   	movff	??_sqrt+3,sqrt@frac+3
  6789                           
  6790                           ; BSR set to: 0
  6791  0046B4  0E01               	movlw	1
  6792  0046B6  1596               	andwf	sqrt@frac& (0+255),w,b
  6793  0046B8  6F8C               	movwf	sqrt@grs& (0+255),b
  6794  0046BA  0E00               	movlw	0
  6795  0046BC  1597               	andwf	(sqrt@frac+1)& (0+255),w,b
  6796  0046BE  6F8D               	movwf	(sqrt@grs+1)& (0+255),b
  6797  0046C0  0E00               	movlw	0
  6798  0046C2  1598               	andwf	(sqrt@frac+2)& (0+255),w,b
  6799  0046C4  6F8E               	movwf	(sqrt@grs+2)& (0+255),b
  6800  0046C6  0E00               	movlw	0
  6801  0046C8  1599               	andwf	(sqrt@frac+3)& (0+255),w,b
  6802  0046CA  6F8F               	movwf	(sqrt@grs+3)& (0+255),b
  6803                           
  6804                           ; BSR set to: 0
  6805  0046CC  0060  F258  F081   	movff	sqrt@frac,??_sqrt
  6806  0046D2  0060  F25C  F082   	movff	sqrt@frac+1,??_sqrt+1
  6807  0046D8  0060  F260  F083   	movff	sqrt@frac+2,??_sqrt+2
  6808  0046DE  0060  F264  F084   	movff	sqrt@frac+3,??_sqrt+3
  6809  0046E4  90D8               	bcf	16344,0,c
  6810  0046E6  3384               	rrcf	(??_sqrt+3)& (0+255),f,b
  6811  0046E8  3383               	rrcf	(??_sqrt+2)& (0+255),f,b
  6812  0046EA  3382               	rrcf	(??_sqrt+1)& (0+255),f,b
  6813  0046EC  3381               	rrcf	??_sqrt& (0+255),f,b
  6814  0046EE  0060  F204  F096   	movff	??_sqrt,sqrt@frac
  6815  0046F4  0060  F208  F097   	movff	??_sqrt+1,sqrt@frac+1
  6816  0046FA  0060  F20C  F098   	movff	??_sqrt+2,sqrt@frac+2
  6817  004700  0060  F210  F099   	movff	??_sqrt+3,sqrt@frac+3
  6818  004706  518C               	movf	sqrt@grs& (0+255),w,b
  6819  004708  2796               	addwf	sqrt@frac& (0+255),f,b
  6820  00470A  518D               	movf	(sqrt@grs+1)& (0+255),w,b
  6821  00470C  2397               	addwfc	(sqrt@frac+1)& (0+255),f,b
  6822  00470E  518E               	movf	(sqrt@grs+2)& (0+255),w,b
  6823  004710  2398               	addwfc	(sqrt@frac+2)& (0+255),f,b
  6824  004712  518F               	movf	(sqrt@grs+3)& (0+255),w,b
  6825  004714  2399               	addwfc	(sqrt@frac+3)& (0+255),f,b
  6826                           
  6827                           ; BSR set to: 0
  6828  004716  A199               	btfss	(sqrt@frac+3)& (0+255),0,b
  6829  004718  D01F               	goto	l1724
  6830                           
  6831                           ; BSR set to: 0
  6832  00471A  0060  F258  F081   	movff	sqrt@frac,??_sqrt
  6833  004720  0060  F25C  F082   	movff	sqrt@frac+1,??_sqrt+1
  6834  004726  0060  F260  F083   	movff	sqrt@frac+2,??_sqrt+2
  6835  00472C  0060  F264  F084   	movff	sqrt@frac+3,??_sqrt+3
  6836  004732  90D8               	bcf	16344,0,c
  6837  004734  3384               	rrcf	(??_sqrt+3)& (0+255),f,b
  6838  004736  3383               	rrcf	(??_sqrt+2)& (0+255),f,b
  6839  004738  3382               	rrcf	(??_sqrt+1)& (0+255),f,b
  6840  00473A  3381               	rrcf	??_sqrt& (0+255),f,b
  6841  00473C  0060  F204  F096   	movff	??_sqrt,sqrt@frac
  6842  004742  0060  F208  F097   	movff	??_sqrt+1,sqrt@frac+1
  6843  004748  0060  F20C  F098   	movff	??_sqrt+2,sqrt@frac+2
  6844  00474E  0060  F210  F099   	movff	??_sqrt+3,sqrt@frac+3
  6845  004754  4B90               	infsnz	sqrt@exp& (0+255),f,b
  6846  004756  2B91               	incf	(sqrt@exp+1)& (0+255),f,b
  6847  004758                     l1724:
  6848                           
  6849                           ; BSR set to: 0
  6850                           
  6851                           ; BSR set to: 0
  6852  004758  0EFF               	movlw	255
  6853  00475A  1596               	andwf	sqrt@frac& (0+255),w,b
  6854  00475C  6F92               	movwf	sqrt@root& (0+255),b
  6855  00475E  0EFF               	movlw	255
  6856  004760  1597               	andwf	(sqrt@frac+1)& (0+255),w,b
  6857  004762  6F93               	movwf	(sqrt@root+1)& (0+255),b
  6858  004764  0E7F               	movlw	127
  6859  004766  1598               	andwf	(sqrt@frac+2)& (0+255),w,b
  6860  004768  6F94               	movwf	(sqrt@root+2)& (0+255),b
  6861  00476A  0E00               	movlw	0
  6862  00476C  1599               	andwf	(sqrt@frac+3)& (0+255),w,b
  6863  00476E  6F95               	movwf	(sqrt@root+3)& (0+255),b
  6864                           
  6865                           ; BSR set to: 0
  6866  004770  0060  F240  F08B   	movff	sqrt@exp,sqrt@p
  6867                           
  6868                           ; BSR set to: 0
  6869  004776  B18B               	btfsc	sqrt@p& (0+255),0,b
  6870                           
  6871                           ; BSR set to: 0
  6872  004778  8F94               	bsf	(sqrt@root+2)& (0+255),7,b
  6873                           
  6874                           ; BSR set to: 0
  6875                           
  6876                           ; BSR set to: 0
  6877  00477A  90D8               	bcf	16344,0,c
  6878  00477C  318B               	rrcf	sqrt@p& (0+255),w,b
  6879  00477E  6F95               	movwf	(sqrt@root+3)& (0+255),b
  6880                           
  6881                           ; BSR set to: 0
  6882  004780  9F95               	bcf	(sqrt@root+3)& (0+255),7,b
  6883                           
  6884                           ; BSR set to: 0
  6885  004782  0060  F248  F07D   	movff	sqrt@root,?_sqrt
  6886  004788  0060  F24C  F07E   	movff	sqrt@root+1,?_sqrt+1
  6887  00478E  0060  F250  F07F   	movff	sqrt@root+2,?_sqrt+2
  6888  004794  0060  F254  F080   	movff	sqrt@root+3,?_sqrt+3
  6889  00479A  0012               	return	
  6890  00479C                     __end_of_sqrt:
  6891                           	opt stack 0
  6892                           
  6893 ;; *************** function _atan *****************
  6894 ;; Defined at:
  6895 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\atan.c"
  6896 ;; Parameters:    Size  Location     Type
  6897 ;;  f               4   58[BANK0 ] unsigned char 
  6898 ;; Auto vars:     Size  Location     Type
  6899 ;;  val             4   75[BANK0 ] unsigned char 
  6900 ;;  val_squared     4   71[BANK0 ] unsigned char 
  6901 ;;  x               4   66[BANK0 ] unsigned char 
  6902 ;;  y               4   62[BANK0 ] unsigned char 
  6903 ;;  recip           1   70[BANK0 ] unsigned char 
  6904 ;; Return value:  Size  Location     Type
  6905 ;;                  4   58[BANK0 ] unsigned char 
  6906 ;; Registers used:
  6907 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6908 ;; Tracked objects:
  6909 ;;		On entry : 0/0
  6910 ;;		On exit  : 0/0
  6911 ;;		Unchanged: 0/0
  6912 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
  6913 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  6914 ;;      Locals:         0      17       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  6915 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  6916 ;;      Totals:         0      21       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  6917 ;;Total ram usage:       21 bytes
  6918 ;; Hardware stack levels used:    1
  6919 ;; Hardware stack levels required when called:    8
  6920 ;; This function calls:
  6921 ;;		___fladd
  6922 ;;		___fldiv
  6923 ;;		___flge
  6924 ;;		___flmul
  6925 ;;		___flneg
  6926 ;;		_eval_poly
  6927 ;;		_fabs
  6928 ;; This function is called by:
  6929 ;;		_rad_calculation_auto
  6930 ;;		_rad_calculation_manual
  6931 ;;		_next_rad_calculation_manual
  6932 ;; This function uses a non-reentrant model
  6933 ;;
  6934                           
  6935                           	psect	text20
  6936  00479C                     __ptext20:
  6937                           	opt stack 0
  6938  00479C                     _atan:
  6939                           	opt stack 21
  6940                           
  6941                           ;incstack = 0
  6942  00479C  0060  F268  F020   	movff	atan@f,fabs@d
  6943  0047A2  0060  F26C  F021   	movff	atan@f+1,fabs@d+1
  6944  0047A8  0060  F270  F022   	movff	atan@f+2,fabs@d+2
  6945  0047AE  0060  F274  F023   	movff	atan@f+3,fabs@d+3
  6946  0047B4  ECBF  F031         	call	_fabs	;wreg free
  6947  0047B8  0060  F080  F0AB   	movff	?_fabs,atan@val
  6948  0047BE  0060  F084  F0AC   	movff	?_fabs+1,atan@val+1
  6949  0047C4  0060  F088  F0AD   	movff	?_fabs+2,atan@val+2
  6950  0047CA  0060  F08C  F0AE   	movff	?_fabs+3,atan@val+3
  6951  0047D0  0100               	movlb	0	; () banked
  6952  0047D2  51AB               	movf	atan@val& (0+255),w,b
  6953  0047D4  11AC               	iorwf	(atan@val+1)& (0+255),w,b
  6954  0047D6  11AD               	iorwf	(atan@val+2)& (0+255),w,b
  6955  0047D8  11AE               	iorwf	(atan@val+3)& (0+255),w,b
  6956  0047DA  A4D8               	btfss	16344,2,c
  6957  0047DC  D009               	goto	l1250
  6958                           
  6959                           ; BSR set to: 0
  6960  0047DE  0E00               	movlw	0
  6961  0047E0  6F9A               	movwf	?_atan& (0+255),b
  6962  0047E2  0E00               	movlw	0
  6963  0047E4  6F9B               	movwf	(?_atan+1)& (0+255),b
  6964  0047E6  0E00               	movlw	0
  6965  0047E8  6F9C               	movwf	(?_atan+2)& (0+255),b
  6966  0047EA  0E00               	movlw	0
  6967  0047EC  6F9D               	movwf	(?_atan+3)& (0+255),b
  6968                           
  6969                           ; BSR set to: 0
  6970  0047EE  0012               	return	
  6971  0047F0                     l1250:
  6972                           
  6973                           ; BSR set to: 0
  6974                           
  6975                           ; BSR set to: 0
  6976  0047F0  0E00               	movlw	0
  6977  0047F2  6E0E               	movwf	___flge@ff1,c
  6978  0047F4  0E00               	movlw	0
  6979  0047F6  6E0F               	movwf	___flge@ff1+1,c
  6980  0047F8  0E80               	movlw	128
  6981  0047FA  6E10               	movwf	___flge@ff1+2,c
  6982  0047FC  0E3F               	movlw	63
  6983  0047FE  6E11               	movwf	___flge@ff1+3,c
  6984  004800  0060  F2AC  F012   	movff	atan@val,___flge@ff2
  6985  004806  0060  F2B0  F013   	movff	atan@val+1,___flge@ff2+1
  6986  00480C  0060  F2B4  F014   	movff	atan@val+2,___flge@ff2+2
  6987  004812  0060  F2B8  F015   	movff	atan@val+3,___flge@ff2+3
  6988  004818  EC63  F02D         	call	___flge	;wreg free
  6989  00481C  B0D8               	btfsc	16344,0,c
  6990  00481E  D002               	goto	u6780
  6991  004820  0E01               	movlw	1
  6992  004822  D001               	goto	u6790
  6993  004824                     u6780:
  6994  004824  0E00               	movlw	0
  6995  004826                     u6790:
  6996  004826  0100               	movlb	0	; () banked
  6997  004828  6FA6               	movwf	atan@recip& (0+255),b
  6998  00482A  51A6               	movf	atan@recip& (0+255),w,b
  6999  00482C  B4D8               	btfsc	16344,2,c
  7000  00482E  D022               	goto	l1252
  7001                           
  7002                           ; BSR set to: 0
  7003  004830  0E00               	movlw	0
  7004  004832  6E1C               	movwf	___fldiv@b,c
  7005  004834  0E00               	movlw	0
  7006  004836  6E1D               	movwf	___fldiv@b+1,c
  7007  004838  0E80               	movlw	128
  7008  00483A  6E1E               	movwf	___fldiv@b+2,c
  7009  00483C  0E3F               	movlw	63
  7010  00483E  6E1F               	movwf	___fldiv@b+3,c
  7011  004840  0060  F2AC  F020   	movff	atan@val,___fldiv@a
  7012  004846  0060  F2B0  F021   	movff	atan@val+1,___fldiv@a+1
  7013  00484C  0060  F2B4  F022   	movff	atan@val+2,___fldiv@a+2
  7014  004852  0060  F2B8  F023   	movff	atan@val+3,___fldiv@a+3
  7015  004858  EC45  F025         	call	___fldiv	;wreg free
  7016  00485C  0060  F070  F0AB   	movff	?___fldiv,atan@val
  7017  004862  0060  F074  F0AC   	movff	?___fldiv+1,atan@val+1
  7018  004868  0060  F078  F0AD   	movff	?___fldiv+2,atan@val+2
  7019  00486E  0060  F07C  F0AE   	movff	?___fldiv+3,atan@val+3
  7020  004874                     l1252:
  7021  004874  0060  F2AC  F064   	movff	atan@val,___flmul@b
  7022  00487A  0060  F2B0  F065   	movff	atan@val+1,___flmul@b+1
  7023  004880  0060  F2B4  F066   	movff	atan@val+2,___flmul@b+2
  7024  004886  0060  F2B8  F067   	movff	atan@val+3,___flmul@b+3
  7025  00488C  0060  F2AC  F068   	movff	atan@val,___flmul@a
  7026  004892  0060  F2B0  F069   	movff	atan@val+1,___flmul@a+1
  7027  004898  0060  F2B4  F06A   	movff	atan@val+2,___flmul@a+2
  7028  00489E  0060  F2B8  F06B   	movff	atan@val+3,___flmul@a+3
  7029  0048A4  EC9F  F01E         	call	___flmul	;wreg free
  7030  0048A8  0060  F190  F0A7   	movff	?___flmul,atan@val_squared
  7031  0048AE  0060  F194  F0A8   	movff	?___flmul+1,atan@val_squared+1
  7032  0048B4  0060  F198  F0A9   	movff	?___flmul+2,atan@val_squared+2
  7033  0048BA  0060  F19C  F0AA   	movff	?___flmul+3,atan@val_squared+3
  7034  0048C0  0060  F29C  F07D   	movff	atan@val_squared,eval_poly@x
  7035  0048C6  0060  F2A0  F07E   	movff	atan@val_squared+1,eval_poly@x+1
  7036  0048CC  0060  F2A4  F07F   	movff	atan@val_squared+2,eval_poly@x+2
  7037  0048D2  0060  F2A8  F080   	movff	atan@val_squared+3,eval_poly@x+3
  7038  0048D8  0EA4               	movlw	low atan@coeff_b
  7039  0048DA  0100               	movlb	0	; () banked
  7040  0048DC  6F81               	movwf	eval_poly@d& (0+255),b
  7041  0048DE  0E20               	movlw	high atan@coeff_b
  7042  0048E0  6F82               	movwf	(eval_poly@d+1)& (0+255),b
  7043  0048E2  0E00               	movlw	0
  7044  0048E4  6F84               	movwf	(eval_poly@n+1)& (0+255),b
  7045  0048E6  0E04               	movlw	4
  7046  0048E8  6F83               	movwf	eval_poly@n& (0+255),b
  7047  0048EA  ECBB  F02C         	call	_eval_poly	;wreg free
  7048  0048EE  0060  F1F4  F09E   	movff	?_eval_poly,atan@y
  7049  0048F4  0060  F1F8  F09F   	movff	?_eval_poly+1,atan@y+1
  7050  0048FA  0060  F1FC  F0A0   	movff	?_eval_poly+2,atan@y+2
  7051  004900  0060  F200  F0A1   	movff	?_eval_poly+3,atan@y+3
  7052  004906  0060  F29C  F07D   	movff	atan@val_squared,eval_poly@x
  7053  00490C  0060  F2A0  F07E   	movff	atan@val_squared+1,eval_poly@x+1
  7054  004912  0060  F2A4  F07F   	movff	atan@val_squared+2,eval_poly@x+2
  7055  004918  0060  F2A8  F080   	movff	atan@val_squared+3,eval_poly@x+3
  7056  00491E  0E78               	movlw	low atan@coeff_a
  7057  004920  0100               	movlb	0	; () banked
  7058  004922  6F81               	movwf	eval_poly@d& (0+255),b
  7059  004924  0E20               	movlw	high atan@coeff_a
  7060  004926  6F82               	movwf	(eval_poly@d+1)& (0+255),b
  7061  004928  0E00               	movlw	0
  7062  00492A  6F84               	movwf	(eval_poly@n+1)& (0+255),b
  7063  00492C  0E05               	movlw	5
  7064  00492E  6F83               	movwf	eval_poly@n& (0+255),b
  7065  004930  ECBB  F02C         	call	_eval_poly	;wreg free
  7066  004934  0060  F1F4  F0A2   	movff	?_eval_poly,atan@x
  7067  00493A  0060  F1F8  F0A3   	movff	?_eval_poly+1,atan@x+1
  7068  004940  0060  F1FC  F0A4   	movff	?_eval_poly+2,atan@x+2
  7069  004946  0060  F200  F0A5   	movff	?_eval_poly+3,atan@x+3
  7070  00494C  0060  F2AC  F064   	movff	atan@val,___flmul@b
  7071  004952  0060  F2B0  F065   	movff	atan@val+1,___flmul@b+1
  7072  004958  0060  F2B4  F066   	movff	atan@val+2,___flmul@b+2
  7073  00495E  0060  F2B8  F067   	movff	atan@val+3,___flmul@b+3
  7074  004964  0060  F278  F020   	movff	atan@y,___fldiv@a
  7075  00496A  0060  F27C  F021   	movff	atan@y+1,___fldiv@a+1
  7076  004970  0060  F280  F022   	movff	atan@y+2,___fldiv@a+2
  7077  004976  0060  F284  F023   	movff	atan@y+3,___fldiv@a+3
  7078  00497C  0060  F288  F01C   	movff	atan@x,___fldiv@b
  7079  004982  0060  F28C  F01D   	movff	atan@x+1,___fldiv@b+1
  7080  004988  0060  F290  F01E   	movff	atan@x+2,___fldiv@b+2
  7081  00498E  0060  F294  F01F   	movff	atan@x+3,___fldiv@b+3
  7082  004994  EC45  F025         	call	___fldiv	;wreg free
  7083  004998  0060  F070  F068   	movff	?___fldiv,___flmul@a
  7084  00499E  0060  F074  F069   	movff	?___fldiv+1,___flmul@a+1
  7085  0049A4  0060  F078  F06A   	movff	?___fldiv+2,___flmul@a+2
  7086  0049AA  0060  F07C  F06B   	movff	?___fldiv+3,___flmul@a+3
  7087  0049B0  EC9F  F01E         	call	___flmul	;wreg free
  7088  0049B4  0060  F190  F0AB   	movff	?___flmul,atan@val
  7089  0049BA  0060  F194  F0AC   	movff	?___flmul+1,atan@val+1
  7090  0049C0  0060  F198  F0AD   	movff	?___flmul+2,atan@val+2
  7091  0049C6  0060  F19C  F0AE   	movff	?___flmul+3,atan@val+3
  7092  0049CC  0100               	movlb	0	; () banked
  7093  0049CE  51A6               	movf	atan@recip& (0+255),w,b
  7094  0049D0  B4D8               	btfsc	16344,2,c
  7095  0049D2  D030               	goto	l1253
  7096                           
  7097                           ; BSR set to: 0
  7098  0049D4  0060  F2AC  F01C   	movff	atan@val,___flneg@f1
  7099  0049DA  0060  F2B0  F01D   	movff	atan@val+1,___flneg@f1+1
  7100  0049E0  0060  F2B4  F01E   	movff	atan@val+2,___flneg@f1+2
  7101  0049E6  0060  F2B8  F01F   	movff	atan@val+3,___flneg@f1+3
  7102  0049EC  ECFE  F032         	call	___flneg	;wreg free
  7103  0049F0  0060  F070  F035   	movff	?___flneg,___fladd@b
  7104  0049F6  0060  F074  F036   	movff	?___flneg+1,___fladd@b+1
  7105  0049FC  0060  F078  F037   	movff	?___flneg+2,___fladd@b+2
  7106  004A02  0060  F07C  F038   	movff	?___flneg+3,___fladd@b+3
  7107  004A08  0EDB               	movlw	219
  7108  004A0A  6E39               	movwf	___fladd@a,c
  7109  004A0C  0E0F               	movlw	15
  7110  004A0E  6E3A               	movwf	___fladd@a+1,c
  7111  004A10  0EC9               	movlw	201
  7112  004A12  6E3B               	movwf	___fladd@a+2,c
  7113  004A14  0E3F               	movlw	63
  7114  004A16  6E3C               	movwf	___fladd@a+3,c
  7115  004A18  EC78  F020         	call	___fladd	;wreg free
  7116  004A1C  0060  F0D4  F0AB   	movff	?___fladd,atan@val
  7117  004A22  0060  F0D8  F0AC   	movff	?___fladd+1,atan@val+1
  7118  004A28  0060  F0DC  F0AD   	movff	?___fladd+2,atan@val+2
  7119  004A2E  0060  F0E0  F0AE   	movff	?___fladd+3,atan@val+3
  7120  004A34                     l1253:
  7121  004A34  0100               	movlb	0	; () banked
  7122  004A36  BF9D               	btfsc	(atan@f+3)& (0+255),7,b
  7123  004A38  D00D               	goto	l1255
  7124                           
  7125                           ; BSR set to: 0
  7126  004A3A  0060  F2AC  F09A   	movff	atan@val,?_atan
  7127  004A40  0060  F2B0  F09B   	movff	atan@val+1,?_atan+1
  7128  004A46  0060  F2B4  F09C   	movff	atan@val+2,?_atan+2
  7129  004A4C  0060  F2B8  F09D   	movff	atan@val+3,?_atan+3
  7130  004A52  0012               	return	
  7131  004A54                     l1255:
  7132                           
  7133                           ; BSR set to: 0
  7134                           
  7135                           ; BSR set to: 0
  7136  004A54  0060  F2AC  F01C   	movff	atan@val,___flneg@f1
  7137  004A5A  0060  F2B0  F01D   	movff	atan@val+1,___flneg@f1+1
  7138  004A60  0060  F2B4  F01E   	movff	atan@val+2,___flneg@f1+2
  7139  004A66  0060  F2B8  F01F   	movff	atan@val+3,___flneg@f1+3
  7140  004A6C  ECFE  F032         	call	___flneg	;wreg free
  7141  004A70  0060  F070  F09A   	movff	?___flneg,?_atan
  7142  004A76  0060  F074  F09B   	movff	?___flneg+1,?_atan+1
  7143  004A7C  0060  F078  F09C   	movff	?___flneg+2,?_atan+2
  7144  004A82  0060  F07C  F09D   	movff	?___flneg+3,?_atan+3
  7145  004A88  0012               	return	
  7146  004A8A                     __end_of_atan:
  7147                           	opt stack 0
  7148                           
  7149 ;; *************** function _fabs *****************
  7150 ;; Defined at:
  7151 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\fabs.c"
  7152 ;; Parameters:    Size  Location     Type
  7153 ;;  d               4   31[COMRAM] unsigned char 
  7154 ;; Auto vars:     Size  Location     Type
  7155 ;;		None
  7156 ;; Return value:  Size  Location     Type
  7157 ;;                  4   31[COMRAM] unsigned char 
  7158 ;; Registers used:
  7159 ;;		wreg, status,2, status,0, cstack
  7160 ;; Tracked objects:
  7161 ;;		On entry : 0/0
  7162 ;;		On exit  : 0/0
  7163 ;;		Unchanged: 0/0
  7164 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
  7165 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  7166 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  7167 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  7168 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  7169 ;;Total ram usage:        4 bytes
  7170 ;; Hardware stack levels used:    1
  7171 ;; Hardware stack levels required when called:    7
  7172 ;; This function calls:
  7173 ;;		___flneg
  7174 ;; This function is called by:
  7175 ;;		_atan
  7176 ;; This function uses a non-reentrant model
  7177 ;;
  7178                           
  7179                           	psect	text21
  7180  00637E                     __ptext21:
  7181                           	opt stack 0
  7182  00637E                     _fabs:
  7183                           	opt stack 21
  7184                           
  7185                           ;incstack = 0
  7186  00637E  AE23               	btfss	fabs@d+3,7,c
  7187  006380  D01B               	goto	l1336
  7188  006382  0060  F080  F01C   	movff	fabs@d,___flneg@f1
  7189  006388  0060  F084  F01D   	movff	fabs@d+1,___flneg@f1+1
  7190  00638E  0060  F088  F01E   	movff	fabs@d+2,___flneg@f1+2
  7191  006394  0060  F08C  F01F   	movff	fabs@d+3,___flneg@f1+3
  7192  00639A  ECFE  F032         	call	___flneg	;wreg free
  7193  00639E  0060  F070  F020   	movff	?___flneg,?_fabs
  7194  0063A4  0060  F074  F021   	movff	?___flneg+1,?_fabs+1
  7195  0063AA  0060  F078  F022   	movff	?___flneg+2,?_fabs+2
  7196  0063B0  0060  F07C  F023   	movff	?___flneg+3,?_fabs+3
  7197  0063B6  0012               	return	
  7198  0063B8                     l1336:
  7199  0063B8  0060  F080  F020   	movff	fabs@d,?_fabs
  7200  0063BE  0060  F084  F021   	movff	fabs@d+1,?_fabs+1
  7201  0063C4  0060  F088  F022   	movff	fabs@d+2,?_fabs+2
  7202  0063CA  0060  F08C  F023   	movff	fabs@d+3,?_fabs+3
  7203  0063D0  0012               	return		;funcret
  7204  0063D2                     __end_of_fabs:
  7205                           	opt stack 0
  7206                           
  7207 ;; *************** function ___flneg *****************
  7208 ;; Defined at:
  7209 ;;		line 15 in file "D:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\flneg.c"
  7210 ;; Parameters:    Size  Location     Type
  7211 ;;  f1              4   27[COMRAM] unsigned char 
  7212 ;; Auto vars:     Size  Location     Type
  7213 ;;		None
  7214 ;; Return value:  Size  Location     Type
  7215 ;;                  4   27[COMRAM] unsigned char 
  7216 ;; Registers used:
  7217 ;;		wreg, status,2, status,0
  7218 ;; Tracked objects:
  7219 ;;		On entry : 0/0
  7220 ;;		On exit  : 0/0
  7221 ;;		Unchanged: 0/0
  7222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
  7223 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  7224 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  7225 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  7226 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  7227 ;;Total ram usage:        4 bytes
  7228 ;; Hardware stack levels used:    1
  7229 ;; Hardware stack levels required when called:    6
  7230 ;; This function calls:
  7231 ;;		Nothing
  7232 ;; This function is called by:
  7233 ;;		_rad_calculation_auto
  7234 ;;		_rad_calculation_manual
  7235 ;;		_next_rad_calculation_manual
  7236 ;;		_steps_calculation
  7237 ;;		_next_steps_calculation
  7238 ;;		_atan
  7239 ;;		_fabs
  7240 ;;		_round
  7241 ;;		_sin
  7242 ;; This function uses a non-reentrant model
  7243 ;;
  7244                           
  7245                           	psect	text22
  7246  0065FC                     __ptext22:
  7247                           	opt stack 0
  7248  0065FC                     ___flneg:
  7249                           	opt stack 22
  7250                           
  7251                           ;incstack = 0
  7252  0065FC  501C               	movf	___flneg@f1,w,c
  7253  0065FE  101D               	iorwf	___flneg@f1+1,w,c
  7254  006600  101E               	iorwf	___flneg@f1+2,w,c
  7255  006602  101F               	iorwf	___flneg@f1+3,w,c
  7256  006604  B4D8               	btfsc	16344,2,c
  7257  006606  D008               	goto	l1347
  7258  006608  0E00               	movlw	0
  7259  00660A  1A1C               	xorwf	___flneg@f1,f,c
  7260  00660C  0E00               	movlw	0
  7261  00660E  1A1D               	xorwf	___flneg@f1+1,f,c
  7262  006610  0E00               	movlw	0
  7263  006612  1A1E               	xorwf	___flneg@f1+2,f,c
  7264  006614  0E80               	movlw	128
  7265  006616  1A1F               	xorwf	___flneg@f1+3,f,c
  7266  006618                     l1347:
  7267  006618  0060  F070  F01C   	movff	___flneg@f1,?___flneg
  7268  00661E  0060  F074  F01D   	movff	___flneg@f1+1,?___flneg+1
  7269  006624  0060  F078  F01E   	movff	___flneg@f1+2,?___flneg+2
  7270  00662A  0060  F07C  F01F   	movff	___flneg@f1+3,?___flneg+3
  7271  006630  0012               	return	
  7272  006632                     __end_of___flneg:
  7273                           	opt stack 0
  7274                           
  7275 ;; *************** function _eval_poly *****************
  7276 ;; Defined at:
  7277 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\evalpoly.c"
  7278 ;; Parameters:    Size  Location     Type
  7279 ;;  x               4   29[BANK0 ] unsigned char 
  7280 ;;  d               2   33[BANK0 ] PTR const 
  7281 ;;		 -> sin@coeff_a(20), sin@coeff_b(16), atan@coeff_a(24), atan@coeff_b(20), 
  7282 ;;  n               2   35[BANK0 ] int 
  7283 ;; Auto vars:     Size  Location     Type
  7284 ;;  res             4   41[BANK0 ] int 
  7285 ;; Return value:  Size  Location     Type
  7286 ;;                  4   29[BANK0 ] int 
  7287 ;; Registers used:
  7288 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7289 ;; Tracked objects:
  7290 ;;		On entry : 0/0
  7291 ;;		On exit  : 0/0
  7292 ;;		Unchanged: 0/0
  7293 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
  7294 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  7295 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  7296 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  7297 ;;      Totals:         0      16       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  7298 ;;Total ram usage:       16 bytes
  7299 ;; Hardware stack levels used:    1
  7300 ;; Hardware stack levels required when called:    7
  7301 ;; This function calls:
  7302 ;;		___fladd
  7303 ;;		___flmul
  7304 ;; This function is called by:
  7305 ;;		_atan
  7306 ;;		_sin
  7307 ;; This function uses a non-reentrant model
  7308 ;;
  7309                           
  7310                           	psect	text23
  7311  005976                     __ptext23:
  7312                           	opt stack 0
  7313  005976                     _eval_poly:
  7314                           	opt stack 21
  7315                           
  7316                           ;incstack = 0
  7317  005976  0060  F20C  F085   	movff	eval_poly@n,??_eval_poly
  7318  00597C  0060  F210  F086   	movff	eval_poly@n+1,??_eval_poly+1
  7319  005982  0100               	movlb	0	; () banked
  7320  005984  90D8               	bcf	16344,0,c
  7321  005986  3785               	rlcf	??_eval_poly& (0+255),f,b
  7322  005988  3786               	rlcf	(??_eval_poly+1)& (0+255),f,b
  7323  00598A  90D8               	bcf	16344,0,c
  7324  00598C  3785               	rlcf	??_eval_poly& (0+255),f,b
  7325  00598E  3786               	rlcf	(??_eval_poly+1)& (0+255),f,b
  7326  005990  0060  F204  F087   	movff	eval_poly@d,??_eval_poly+2
  7327  005996  0060  F208  F088   	movff	eval_poly@d+1,??_eval_poly+3
  7328  00599C  5185               	movf	??_eval_poly& (0+255),w,b
  7329  00599E  2787               	addwf	(??_eval_poly+2)& (0+255),f,b
  7330  0059A0  5186               	movf	(??_eval_poly+1)& (0+255),w,b
  7331  0059A2  2388               	addwfc	(??_eval_poly+3)& (0+255),f,b
  7332  0059A4  0060  F21F  FFF6   	movff	??_eval_poly+2,16374
  7333  0059AA  0060  F223  FFF7   	movff	??_eval_poly+3,16375
  7334  0059B0                     	if	0	;tblptru may be non-zero
  7335  0059B0                     	endif
  7336  0059B0                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  7337  0059B0  0E00               	movlw	low (__mediumconst shr (0+16))
  7338  0059B2  6EF8               	movwf	16376,c
  7339  0059B4                     	endif
  7340  0059B4  0009               	tblrd		*+
  7341  0059B6  006F FFD4  F089    	movff	16373,eval_poly@res
  7342  0059BC  0009               	tblrd		*+
  7343  0059BE  006F FFD4  F08A    	movff	16373,eval_poly@res+1
  7344  0059C4  0009               	tblrd		*+
  7345  0059C6  006F FFD4  F08B    	movff	16373,eval_poly@res+2
  7346  0059CC  000A               	tblrd		*-
  7347  0059CE  006F FFD4  F08C    	movff	16373,eval_poly@res+3
  7348  0059D4  D066               	goto	l1330
  7349  0059D6                     
  7350                           ; BSR set to: 0
  7351                           
  7352                           ; BSR set to: 0
  7353  0059D6  0060  F224  F068   	movff	eval_poly@res,___flmul@a
  7354  0059DC  0060  F228  F069   	movff	eval_poly@res+1,___flmul@a+1
  7355  0059E2  0060  F22C  F06A   	movff	eval_poly@res+2,___flmul@a+2
  7356  0059E8  0060  F230  F06B   	movff	eval_poly@res+3,___flmul@a+3
  7357  0059EE  0060  F1F4  F064   	movff	eval_poly@x,___flmul@b
  7358  0059F4  0060  F1F8  F065   	movff	eval_poly@x+1,___flmul@b+1
  7359  0059FA  0060  F1FC  F066   	movff	eval_poly@x+2,___flmul@b+2
  7360  005A00  0060  F200  F067   	movff	eval_poly@x+3,___flmul@b+3
  7361  005A06  EC9F  F01E         	call	___flmul	;wreg free
  7362  005A0A  0060  F190  F035   	movff	?___flmul,___fladd@b
  7363  005A10  0060  F194  F036   	movff	?___flmul+1,___fladd@b+1
  7364  005A16  0060  F198  F037   	movff	?___flmul+2,___fladd@b+2
  7365  005A1C  0060  F19C  F038   	movff	?___flmul+3,___fladd@b+3
  7366  005A22  0100               	movlb	0	; () banked
  7367  005A24  0783               	decf	eval_poly@n& (0+255),f,b
  7368  005A26  A0D8               	btfss	16344,0,c
  7369  005A28  0784               	decf	(eval_poly@n+1)& (0+255),f,b
  7370  005A2A  0060  F20C  F085   	movff	eval_poly@n,??_eval_poly
  7371  005A30  0060  F210  F086   	movff	eval_poly@n+1,??_eval_poly+1
  7372  005A36  90D8               	bcf	16344,0,c
  7373  005A38  3785               	rlcf	??_eval_poly& (0+255),f,b
  7374  005A3A  3786               	rlcf	(??_eval_poly+1)& (0+255),f,b
  7375  005A3C  90D8               	bcf	16344,0,c
  7376  005A3E  3785               	rlcf	??_eval_poly& (0+255),f,b
  7377  005A40  3786               	rlcf	(??_eval_poly+1)& (0+255),f,b
  7378  005A42  0060  F204  F087   	movff	eval_poly@d,??_eval_poly+2
  7379  005A48  0060  F208  F088   	movff	eval_poly@d+1,??_eval_poly+3
  7380  005A4E  5185               	movf	??_eval_poly& (0+255),w,b
  7381  005A50  2787               	addwf	(??_eval_poly+2)& (0+255),f,b
  7382  005A52  5186               	movf	(??_eval_poly+1)& (0+255),w,b
  7383  005A54  2388               	addwfc	(??_eval_poly+3)& (0+255),f,b
  7384  005A56  0060  F21F  FFF6   	movff	??_eval_poly+2,16374
  7385  005A5C  0060  F223  FFF7   	movff	??_eval_poly+3,16375
  7386  005A62                     	if	0	;tblptru may be non-zero
  7387  005A62                     	endif
  7388  005A62                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
  7389  005A62  0E00               	movlw	low (__mediumconst shr (0+16))
  7390  005A64  6EF8               	movwf	16376,c
  7391  005A66                     	endif
  7392  005A66  0009               	tblrd		*+
  7393  005A68  006F FFD4  F039    	movff	16373,___fladd@a
  7394  005A6E  0009               	tblrd		*+
  7395  005A70  006F FFD4  F03A    	movff	16373,___fladd@a+1
  7396  005A76  0009               	tblrd		*+
  7397  005A78  006F FFD4  F03B    	movff	16373,___fladd@a+2
  7398  005A7E  000A               	tblrd		*-
  7399  005A80  006F FFD4  F03C    	movff	16373,___fladd@a+3
  7400  005A86  EC78  F020         	call	___fladd	;wreg free
  7401  005A8A  0060  F0D4  F089   	movff	?___fladd,eval_poly@res
  7402  005A90  0060  F0D8  F08A   	movff	?___fladd+1,eval_poly@res+1
  7403  005A96  0060  F0DC  F08B   	movff	?___fladd+2,eval_poly@res+2
  7404  005A9C  0060  F0E0  F08C   	movff	?___fladd+3,eval_poly@res+3
  7405  005AA2                     l1330:
  7406  005AA2  0100               	movlb	0	; () banked
  7407  005AA4  5183               	movf	eval_poly@n& (0+255),w,b
  7408  005AA6  1184               	iorwf	(eval_poly@n+1)& (0+255),w,b
  7409  005AA8  A4D8               	btfss	16344,2,c
  7410  005AAA  D795               	goto	l1331
  7411                           
  7412                           ; BSR set to: 0
  7413  005AAC  0060  F224  F07D   	movff	eval_poly@res,?_eval_poly
  7414  005AB2  0060  F228  F07E   	movff	eval_poly@res+1,?_eval_poly+1
  7415  005AB8  0060  F22C  F07F   	movff	eval_poly@res+2,?_eval_poly+2
  7416  005ABE  0060  F230  F080   	movff	eval_poly@res+3,?_eval_poly+3
  7417                           
  7418                           ; BSR set to: 0
  7419  005AC4  0012               	return		;funcret
  7420  005AC6                     __end_of_eval_poly:
  7421                           	opt stack 0
  7422                           
  7423 ;; *************** function ___flmul *****************
  7424 ;; Defined at:
  7425 ;;		line 8 in file "D:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcmul.c"
  7426 ;; Parameters:    Size  Location     Type
  7427 ;;  b               4    4[BANK0 ] int 
  7428 ;;  a               4    8[BANK0 ] int 
  7429 ;; Auto vars:     Size  Location     Type
  7430 ;;  prod            4   23[BANK0 ] struct .
  7431 ;;  grs             4   18[BANK0 ] unsigned long 
  7432 ;;  temp            2   27[BANK0 ] struct .
  7433 ;;  bexp            1   22[BANK0 ] unsigned char 
  7434 ;;  aexp            1   17[BANK0 ] unsigned char 
  7435 ;;  sign            1   16[BANK0 ] unsigned char 
  7436 ;; Return value:  Size  Location     Type
  7437 ;;                  4    4[BANK0 ] unsigned char 
  7438 ;; Registers used:
  7439 ;;		wreg, status,2, status,0, prodl, prodh
  7440 ;; Tracked objects:
  7441 ;;		On entry : 0/0
  7442 ;;		On exit  : 0/0
  7443 ;;		Unchanged: 0/0
  7444 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
  7445 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  7446 ;;      Locals:         0      13       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  7447 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  7448 ;;      Totals:         0      25       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  7449 ;;Total ram usage:       25 bytes
  7450 ;; Hardware stack levels used:    1
  7451 ;; Hardware stack levels required when called:    6
  7452 ;; This function calls:
  7453 ;;		Nothing
  7454 ;; This function is called by:
  7455 ;;		_rad_calculation_auto
  7456 ;;		_rad_calculation_manual
  7457 ;;		_next_rad_calculation_manual
  7458 ;;		_steps_calculation
  7459 ;;		_next_steps_calculation
  7460 ;;		_atan
  7461 ;;		_eval_poly
  7462 ;;		_sin
  7463 ;; This function uses a non-reentrant model
  7464 ;;
  7465                           
  7466                           	psect	text24
  7467  003D3E                     __ptext24:
  7468                           	opt stack 0
  7469  003D3E                     ___flmul:
  7470                           	opt stack 23
  7471                           
  7472                           ; BSR set to: 0
  7473                           ;incstack = 0
  7474  003D3E  0100               	movlb	0	; () banked
  7475  003D40  5167               	movf	(___flmul@b+3)& (0+255),w,b
  7476  003D42  0B80               	andlw	128
  7477  003D44  6F70               	movwf	___flmul@sign& (0+255),b
  7478  003D46  5167               	movf	(___flmul@b+3)& (0+255),w,b
  7479  003D48  2567               	addwf	(___flmul@b+3)& (0+255),w,b
  7480  003D4A  6F76               	movwf	___flmul@bexp& (0+255),b
  7481                           
  7482                           ; BSR set to: 0
  7483  003D4C  BF66               	btfsc	(___flmul@b+2)& (0+255),7,b
  7484                           
  7485                           ; BSR set to: 0
  7486  003D4E  8176               	bsf	___flmul@bexp& (0+255),0,b
  7487                           
  7488                           ; BSR set to: 0
  7489                           
  7490                           ; BSR set to: 0
  7491  003D50  5176               	movf	___flmul@bexp& (0+255),w,b
  7492  003D52  B4D8               	btfsc	16344,2,c
  7493  003D54  D00D               	goto	l1680
  7494                           
  7495                           ; BSR set to: 0
  7496  003D56  2976               	incf	___flmul@bexp& (0+255),w,b
  7497  003D58  A4D8               	btfss	16344,2,c
  7498  003D5A  D008               	goto	l1681
  7499                           
  7500                           ; BSR set to: 0
  7501  003D5C  0E00               	movlw	0
  7502  003D5E  6F64               	movwf	___flmul@b& (0+255),b
  7503  003D60  0E00               	movlw	0
  7504  003D62  6F65               	movwf	(___flmul@b+1)& (0+255),b
  7505  003D64  0E00               	movlw	0
  7506  003D66  6F66               	movwf	(___flmul@b+2)& (0+255),b
  7507  003D68  0E00               	movlw	0
  7508  003D6A  6F67               	movwf	(___flmul@b+3)& (0+255),b
  7509  003D6C                     l1681:
  7510                           
  7511                           ; BSR set to: 0
  7512                           
  7513                           ; BSR set to: 0
  7514  003D6C  8F66               	bsf	(___flmul@b+2)& (0+255),7,b
  7515  003D6E  D008               	goto	l1682
  7516  003D70                     l1680:
  7517                           
  7518                           ; BSR set to: 0
  7519                           
  7520                           ; BSR set to: 0
  7521  003D70  0E00               	movlw	0
  7522  003D72  6F64               	movwf	___flmul@b& (0+255),b
  7523  003D74  0E00               	movlw	0
  7524  003D76  6F65               	movwf	(___flmul@b+1)& (0+255),b
  7525  003D78  0E00               	movlw	0
  7526  003D7A  6F66               	movwf	(___flmul@b+2)& (0+255),b
  7527  003D7C  0E00               	movlw	0
  7528  003D7E  6F67               	movwf	(___flmul@b+3)& (0+255),b
  7529  003D80                     l1682:
  7530                           
  7531                           ; BSR set to: 0
  7532                           
  7533                           ; BSR set to: 0
  7534  003D80  516B               	movf	(___flmul@a+3)& (0+255),w,b
  7535  003D82  0B80               	andlw	128
  7536  003D84  1B70               	xorwf	___flmul@sign& (0+255),f,b
  7537                           
  7538                           ; BSR set to: 0
  7539  003D86  516B               	movf	(___flmul@a+3)& (0+255),w,b
  7540  003D88  256B               	addwf	(___flmul@a+3)& (0+255),w,b
  7541  003D8A  6F71               	movwf	___flmul@aexp& (0+255),b
  7542                           
  7543                           ; BSR set to: 0
  7544  003D8C  BF6A               	btfsc	(___flmul@a+2)& (0+255),7,b
  7545                           
  7546                           ; BSR set to: 0
  7547  003D8E  8171               	bsf	___flmul@aexp& (0+255),0,b
  7548                           
  7549                           ; BSR set to: 0
  7550                           
  7551                           ; BSR set to: 0
  7552  003D90  5171               	movf	___flmul@aexp& (0+255),w,b
  7553  003D92  B4D8               	btfsc	16344,2,c
  7554  003D94  D00D               	goto	l1684
  7555                           
  7556                           ; BSR set to: 0
  7557  003D96  2971               	incf	___flmul@aexp& (0+255),w,b
  7558  003D98  A4D8               	btfss	16344,2,c
  7559  003D9A  D008               	goto	l1685
  7560                           
  7561                           ; BSR set to: 0
  7562  003D9C  0E00               	movlw	0
  7563  003D9E  6F68               	movwf	___flmul@a& (0+255),b
  7564  003DA0  0E00               	movlw	0
  7565  003DA2  6F69               	movwf	(___flmul@a+1)& (0+255),b
  7566  003DA4  0E00               	movlw	0
  7567  003DA6  6F6A               	movwf	(___flmul@a+2)& (0+255),b
  7568  003DA8  0E00               	movlw	0
  7569  003DAA  6F6B               	movwf	(___flmul@a+3)& (0+255),b
  7570  003DAC                     l1685:
  7571                           
  7572                           ; BSR set to: 0
  7573                           
  7574                           ; BSR set to: 0
  7575  003DAC  8F6A               	bsf	(___flmul@a+2)& (0+255),7,b
  7576  003DAE  D008               	goto	l1686
  7577  003DB0                     l1684:
  7578                           
  7579                           ; BSR set to: 0
  7580                           
  7581                           ; BSR set to: 0
  7582  003DB0  0E00               	movlw	0
  7583  003DB2  6F68               	movwf	___flmul@a& (0+255),b
  7584  003DB4  0E00               	movlw	0
  7585  003DB6  6F69               	movwf	(___flmul@a+1)& (0+255),b
  7586  003DB8  0E00               	movlw	0
  7587  003DBA  6F6A               	movwf	(___flmul@a+2)& (0+255),b
  7588  003DBC  0E00               	movlw	0
  7589  003DBE  6F6B               	movwf	(___flmul@a+3)& (0+255),b
  7590  003DC0                     l1686:
  7591                           
  7592                           ; BSR set to: 0
  7593  003DC0  5171               	movf	___flmul@aexp& (0+255),w,b
  7594  003DC2  B4D8               	btfsc	16344,2,c
  7595  003DC4  D003               	goto	u6030
  7596                           
  7597                           ; BSR set to: 0
  7598  003DC6  5176               	movf	___flmul@bexp& (0+255),w,b
  7599  003DC8  A4D8               	btfss	16344,2,c
  7600  003DCA  D009               	goto	l1687
  7601  003DCC                     u6030:
  7602                           
  7603                           ; BSR set to: 0
  7604                           
  7605                           ; BSR set to: 0
  7606  003DCC  0E00               	movlw	0
  7607  003DCE  6F64               	movwf	?___flmul& (0+255),b
  7608  003DD0  0E00               	movlw	0
  7609  003DD2  6F65               	movwf	(?___flmul+1)& (0+255),b
  7610  003DD4  0E00               	movlw	0
  7611  003DD6  6F66               	movwf	(?___flmul+2)& (0+255),b
  7612  003DD8  0E00               	movlw	0
  7613  003DDA  6F67               	movwf	(?___flmul+3)& (0+255),b
  7614                           
  7615                           ; BSR set to: 0
  7616  003DDC  0012               	return	
  7617  003DDE                     l1687:
  7618                           
  7619                           ; BSR set to: 0
  7620                           
  7621                           ; BSR set to: 0
  7622  003DDE  516A               	movf	(___flmul@a+2)& (0+255),w,b
  7623  003DE0  0364               	mulwf	___flmul@b& (0+255),b
  7624  003DE2  006F FFCC  F07B    	movff	16371,___flmul@temp
  7625  003DE8  006F FFD0  F07C    	movff	16372,___flmul@temp+1
  7626                           
  7627                           ; BSR set to: 0
  7628  003DEE  517B               	movf	___flmul@temp& (0+255),w,b
  7629  003DF0  6F72               	movwf	___flmul@grs& (0+255),b
  7630  003DF2  6B73               	clrf	(___flmul@grs+1)& (0+255),b
  7631  003DF4  6B74               	clrf	(___flmul@grs+2)& (0+255),b
  7632  003DF6  6B75               	clrf	(___flmul@grs+3)& (0+255),b
  7633                           
  7634                           ; BSR set to: 0
  7635  003DF8  517C               	movf	(___flmul@temp+1)& (0+255),w,b
  7636  003DFA  6F77               	movwf	___flmul@prod& (0+255),b
  7637  003DFC  6B78               	clrf	(___flmul@prod+1)& (0+255),b
  7638  003DFE  6B79               	clrf	(___flmul@prod+2)& (0+255),b
  7639  003E00  6B7A               	clrf	(___flmul@prod+3)& (0+255),b
  7640  003E02  5169               	movf	(___flmul@a+1)& (0+255),w,b
  7641  003E04  0365               	mulwf	(___flmul@b+1)& (0+255),b
  7642  003E06  006F FFCC  F07B    	movff	16371,___flmul@temp
  7643  003E0C  006F FFD0  F07C    	movff	16372,___flmul@temp+1
  7644                           
  7645                           ; BSR set to: 0
  7646  003E12  517B               	movf	___flmul@temp& (0+255),w,b
  7647  003E14  2772               	addwf	___flmul@grs& (0+255),f,b
  7648  003E16  0E00               	movlw	0
  7649  003E18  2373               	addwfc	(___flmul@grs+1)& (0+255),f,b
  7650  003E1A  2374               	addwfc	(___flmul@grs+2)& (0+255),f,b
  7651  003E1C  2375               	addwfc	(___flmul@grs+3)& (0+255),f,b
  7652                           
  7653                           ; BSR set to: 0
  7654  003E1E  517C               	movf	(___flmul@temp+1)& (0+255),w,b
  7655  003E20  2777               	addwf	___flmul@prod& (0+255),f,b
  7656  003E22  0E00               	movlw	0
  7657  003E24  2378               	addwfc	(___flmul@prod+1)& (0+255),f,b
  7658  003E26  2379               	addwfc	(___flmul@prod+2)& (0+255),f,b
  7659  003E28  237A               	addwfc	(___flmul@prod+3)& (0+255),f,b
  7660  003E2A  5168               	movf	___flmul@a& (0+255),w,b
  7661  003E2C  0366               	mulwf	(___flmul@b+2)& (0+255),b
  7662  003E2E  006F FFCC  F07B    	movff	16371,___flmul@temp
  7663  003E34  006F FFD0  F07C    	movff	16372,___flmul@temp+1
  7664                           
  7665                           ; BSR set to: 0
  7666  003E3A  517B               	movf	___flmul@temp& (0+255),w,b
  7667  003E3C  2772               	addwf	___flmul@grs& (0+255),f,b
  7668  003E3E  0E00               	movlw	0
  7669  003E40  2373               	addwfc	(___flmul@grs+1)& (0+255),f,b
  7670  003E42  2374               	addwfc	(___flmul@grs+2)& (0+255),f,b
  7671  003E44  2375               	addwfc	(___flmul@grs+3)& (0+255),f,b
  7672                           
  7673                           ; BSR set to: 0
  7674  003E46  517C               	movf	(___flmul@temp+1)& (0+255),w,b
  7675  003E48  2777               	addwf	___flmul@prod& (0+255),f,b
  7676  003E4A  0E00               	movlw	0
  7677  003E4C  2378               	addwfc	(___flmul@prod+1)& (0+255),f,b
  7678  003E4E  2379               	addwfc	(___flmul@prod+2)& (0+255),f,b
  7679  003E50  237A               	addwfc	(___flmul@prod+3)& (0+255),f,b
  7680                           
  7681                           ; BSR set to: 0
  7682  003E52  0060  F1D0  F075   	movff	___flmul@grs+2,___flmul@grs+3
  7683  003E58  0060  F1CC  F074   	movff	___flmul@grs+1,___flmul@grs+2
  7684  003E5E  0060  F1C8  F073   	movff	___flmul@grs,___flmul@grs+1
  7685  003E64  6B72               	clrf	___flmul@grs& (0+255),b
  7686                           
  7687                           ; BSR set to: 0
  7688  003E66  5168               	movf	___flmul@a& (0+255),w,b
  7689  003E68  0365               	mulwf	(___flmul@b+1)& (0+255),b
  7690  003E6A  006F FFCC  F07B    	movff	16371,___flmul@temp
  7691  003E70  006F FFD0  F07C    	movff	16372,___flmul@temp+1
  7692                           
  7693                           ; BSR set to: 0
  7694  003E76  517B               	movf	___flmul@temp& (0+255),w,b
  7695  003E78  2772               	addwf	___flmul@grs& (0+255),f,b
  7696  003E7A  517C               	movf	(___flmul@temp+1)& (0+255),w,b
  7697  003E7C  2373               	addwfc	(___flmul@grs+1)& (0+255),f,b
  7698  003E7E  0E00               	movlw	0
  7699  003E80  2374               	addwfc	(___flmul@grs+2)& (0+255),f,b
  7700  003E82  0E00               	movlw	0
  7701  003E84  2375               	addwfc	(___flmul@grs+3)& (0+255),f,b
  7702                           
  7703                           ; BSR set to: 0
  7704  003E86  5169               	movf	(___flmul@a+1)& (0+255),w,b
  7705  003E88  0364               	mulwf	___flmul@b& (0+255),b
  7706  003E8A  006F FFCC  F07B    	movff	16371,___flmul@temp
  7707  003E90  006F FFD0  F07C    	movff	16372,___flmul@temp+1
  7708                           
  7709                           ; BSR set to: 0
  7710  003E96  517B               	movf	___flmul@temp& (0+255),w,b
  7711  003E98  2772               	addwf	___flmul@grs& (0+255),f,b
  7712  003E9A  517C               	movf	(___flmul@temp+1)& (0+255),w,b
  7713  003E9C  2373               	addwfc	(___flmul@grs+1)& (0+255),f,b
  7714  003E9E  0E00               	movlw	0
  7715  003EA0  2374               	addwfc	(___flmul@grs+2)& (0+255),f,b
  7716  003EA2  0E00               	movlw	0
  7717  003EA4  2375               	addwfc	(___flmul@grs+3)& (0+255),f,b
  7718                           
  7719                           ; BSR set to: 0
  7720  003EA6  0060  F1D0  F075   	movff	___flmul@grs+2,___flmul@grs+3
  7721  003EAC  0060  F1CC  F074   	movff	___flmul@grs+1,___flmul@grs+2
  7722  003EB2  0060  F1C8  F073   	movff	___flmul@grs,___flmul@grs+1
  7723  003EB8  6B72               	clrf	___flmul@grs& (0+255),b
  7724  003EBA  5168               	movf	___flmul@a& (0+255),w,b
  7725  003EBC  0364               	mulwf	___flmul@b& (0+255),b
  7726  003EBE  006F FFCC  F07B    	movff	16371,___flmul@temp
  7727  003EC4  006F FFD0  F07C    	movff	16372,___flmul@temp+1
  7728                           
  7729                           ; BSR set to: 0
  7730  003ECA  517B               	movf	___flmul@temp& (0+255),w,b
  7731  003ECC  2772               	addwf	___flmul@grs& (0+255),f,b
  7732  003ECE  517C               	movf	(___flmul@temp+1)& (0+255),w,b
  7733  003ED0  2373               	addwfc	(___flmul@grs+1)& (0+255),f,b
  7734  003ED2  0E00               	movlw	0
  7735  003ED4  2374               	addwfc	(___flmul@grs+2)& (0+255),f,b
  7736  003ED6  0E00               	movlw	0
  7737  003ED8  2375               	addwfc	(___flmul@grs+3)& (0+255),f,b
  7738                           
  7739                           ; BSR set to: 0
  7740  003EDA  516A               	movf	(___flmul@a+2)& (0+255),w,b
  7741  003EDC  0365               	mulwf	(___flmul@b+1)& (0+255),b
  7742  003EDE  006F FFCC  F07B    	movff	16371,___flmul@temp
  7743  003EE4  006F FFD0  F07C    	movff	16372,___flmul@temp+1
  7744  003EEA  517B               	movf	___flmul@temp& (0+255),w,b
  7745  003EEC  2777               	addwf	___flmul@prod& (0+255),f,b
  7746  003EEE  517C               	movf	(___flmul@temp+1)& (0+255),w,b
  7747  003EF0  2378               	addwfc	(___flmul@prod+1)& (0+255),f,b
  7748  003EF2  0E00               	movlw	0
  7749  003EF4  2379               	addwfc	(___flmul@prod+2)& (0+255),f,b
  7750  003EF6  0E00               	movlw	0
  7751  003EF8  237A               	addwfc	(___flmul@prod+3)& (0+255),f,b
  7752                           
  7753                           ; BSR set to: 0
  7754  003EFA  5169               	movf	(___flmul@a+1)& (0+255),w,b
  7755  003EFC  0366               	mulwf	(___flmul@b+2)& (0+255),b
  7756  003EFE  006F FFCC  F07B    	movff	16371,___flmul@temp
  7757  003F04  006F FFD0  F07C    	movff	16372,___flmul@temp+1
  7758                           
  7759                           ; BSR set to: 0
  7760  003F0A  517B               	movf	___flmul@temp& (0+255),w,b
  7761  003F0C  2777               	addwf	___flmul@prod& (0+255),f,b
  7762  003F0E  517C               	movf	(___flmul@temp+1)& (0+255),w,b
  7763  003F10  2378               	addwfc	(___flmul@prod+1)& (0+255),f,b
  7764  003F12  0E00               	movlw	0
  7765  003F14  2379               	addwfc	(___flmul@prod+2)& (0+255),f,b
  7766  003F16  0E00               	movlw	0
  7767  003F18  237A               	addwfc	(___flmul@prod+3)& (0+255),f,b
  7768  003F1A  516A               	movf	(___flmul@a+2)& (0+255),w,b
  7769  003F1C  0366               	mulwf	(___flmul@b+2)& (0+255),b
  7770  003F1E  006F FFCC  F07B    	movff	16371,___flmul@temp
  7771  003F24  006F FFD0  F07C    	movff	16372,___flmul@temp+1
  7772                           
  7773                           ; BSR set to: 0
  7774  003F2A  517B               	movf	___flmul@temp& (0+255),w,b
  7775  003F2C  6F6C               	movwf	??___flmul& (0+255),b
  7776  003F2E  517C               	movf	(___flmul@temp+1)& (0+255),w,b
  7777  003F30  6F6D               	movwf	(??___flmul+1)& (0+255),b
  7778  003F32  6B6E               	clrf	(??___flmul+2)& (0+255),b
  7779  003F34  6B6F               	clrf	(??___flmul+3)& (0+255),b
  7780  003F36  0060  F1B8  F06F   	movff	??___flmul+2,??___flmul+3
  7781  003F3C  0060  F1B4  F06E   	movff	??___flmul+1,??___flmul+2
  7782  003F42  0060  F1B0  F06D   	movff	??___flmul,??___flmul+1
  7783  003F48  6B6C               	clrf	??___flmul& (0+255),b
  7784  003F4A  516C               	movf	??___flmul& (0+255),w,b
  7785  003F4C  2777               	addwf	___flmul@prod& (0+255),f,b
  7786  003F4E  516D               	movf	(??___flmul+1)& (0+255),w,b
  7787  003F50  2378               	addwfc	(___flmul@prod+1)& (0+255),f,b
  7788  003F52  516E               	movf	(??___flmul+2)& (0+255),w,b
  7789  003F54  2379               	addwfc	(___flmul@prod+2)& (0+255),f,b
  7790  003F56  516F               	movf	(??___flmul+3)& (0+255),w,b
  7791  003F58  237A               	addwfc	(___flmul@prod+3)& (0+255),f,b
  7792                           
  7793                           ; BSR set to: 0
  7794  003F5A  0060  F1C8  F06C   	movff	___flmul@grs,??___flmul
  7795  003F60  0060  F1CC  F06D   	movff	___flmul@grs+1,??___flmul+1
  7796  003F66  0060  F1D0  F06E   	movff	___flmul@grs+2,??___flmul+2
  7797  003F6C  0060  F1D4  F06F   	movff	___flmul@grs+3,??___flmul+3
  7798  003F72  0E19               	movlw	25
  7799  003F74  D005               	goto	u6040
  7800  003F76                     u6045:
  7801  003F76  90D8               	bcf	16344,0,c
  7802  003F78  336F               	rrcf	(??___flmul+3)& (0+255),f,b
  7803  003F7A  336E               	rrcf	(??___flmul+2)& (0+255),f,b
  7804  003F7C  336D               	rrcf	(??___flmul+1)& (0+255),f,b
  7805  003F7E  336C               	rrcf	??___flmul& (0+255),f,b
  7806  003F80                     u6040:
  7807  003F80  2EE8               	decfsz	16360,f,c
  7808  003F82  D7F9               	goto	u6045
  7809  003F84  516C               	movf	??___flmul& (0+255),w,b
  7810  003F86  2777               	addwf	___flmul@prod& (0+255),f,b
  7811  003F88  516D               	movf	(??___flmul+1)& (0+255),w,b
  7812  003F8A  2378               	addwfc	(___flmul@prod+1)& (0+255),f,b
  7813  003F8C  516E               	movf	(??___flmul+2)& (0+255),w,b
  7814  003F8E  2379               	addwfc	(___flmul@prod+2)& (0+255),f,b
  7815  003F90  516F               	movf	(??___flmul+3)& (0+255),w,b
  7816  003F92  237A               	addwfc	(___flmul@prod+3)& (0+255),f,b
  7817                           
  7818                           ; BSR set to: 0
  7819  003F94  0060  F1D0  F075   	movff	___flmul@grs+2,___flmul@grs+3
  7820  003F9A  0060  F1CC  F074   	movff	___flmul@grs+1,___flmul@grs+2
  7821  003FA0  0060  F1C8  F073   	movff	___flmul@grs,___flmul@grs+1
  7822  003FA6  6B72               	clrf	___flmul@grs& (0+255),b
  7823                           
  7824                           ; BSR set to: 0
  7825  003FA8  5171               	movf	___flmul@aexp& (0+255),w,b
  7826  003FAA  0060  F1D8  F06C   	movff	___flmul@bexp,??___flmul
  7827  003FB0  6B6D               	clrf	(??___flmul+1)& (0+255),b
  7828  003FB2  276C               	addwf	??___flmul& (0+255),f,b
  7829  003FB4  0E00               	movlw	0
  7830  003FB6  236D               	addwfc	(??___flmul+1)& (0+255),f,b
  7831  003FB8  0E82               	movlw	130
  7832  003FBA  256C               	addwf	??___flmul& (0+255),w,b
  7833  003FBC  6F7B               	movwf	___flmul@temp& (0+255),b
  7834  003FBE  0EFF               	movlw	255
  7835  003FC0  216D               	addwfc	(??___flmul+1)& (0+255),w,b
  7836  003FC2  6F7C               	movwf	(___flmul@temp+1)& (0+255),b
  7837  003FC4  D00F               	goto	l1691
  7838  003FC6                     
  7839                           ; BSR set to: 0
  7840                           
  7841                           ; BSR set to: 0
  7842  003FC6  90D8               	bcf	16344,0,c
  7843  003FC8  3777               	rlcf	___flmul@prod& (0+255),f,b
  7844  003FCA  3778               	rlcf	(___flmul@prod+1)& (0+255),f,b
  7845  003FCC  3779               	rlcf	(___flmul@prod+2)& (0+255),f,b
  7846  003FCE  377A               	rlcf	(___flmul@prod+3)& (0+255),f,b
  7847                           
  7848                           ; BSR set to: 0
  7849  003FD0  BF75               	btfsc	(___flmul@grs+3)& (0+255),7,b
  7850                           
  7851                           ; BSR set to: 0
  7852  003FD2  8177               	bsf	___flmul@prod& (0+255),0,b
  7853                           
  7854                           ; BSR set to: 0
  7855  003FD4  90D8               	bcf	16344,0,c
  7856  003FD6  3772               	rlcf	___flmul@grs& (0+255),f,b
  7857  003FD8  3773               	rlcf	(___flmul@grs+1)& (0+255),f,b
  7858  003FDA  3774               	rlcf	(___flmul@grs+2)& (0+255),f,b
  7859  003FDC  3775               	rlcf	(___flmul@grs+3)& (0+255),f,b
  7860  003FDE  077B               	decf	___flmul@temp& (0+255),f,b
  7861  003FE0  A0D8               	btfss	16344,0,c
  7862  003FE2  077C               	decf	(___flmul@temp+1)& (0+255),f,b
  7863  003FE4                     l1691:
  7864                           
  7865                           ; BSR set to: 0
  7866                           
  7867                           ; BSR set to: 0
  7868  003FE4  AF79               	btfss	(___flmul@prod+2)& (0+255),7,b
  7869  003FE6  D7EF               	goto	l1692
  7870                           
  7871                           ; BSR set to: 0
  7872                           
  7873                           ; BSR set to: 0
  7874  003FE8  0E00               	movlw	0
  7875  003FEA  6F71               	movwf	___flmul@aexp& (0+255),b
  7876                           
  7877                           ; BSR set to: 0
  7878  003FEC  AF75               	btfss	(___flmul@grs+3)& (0+255),7,b
  7879  003FEE  D016               	goto	l1698
  7880                           
  7881                           ; BSR set to: 0
  7882  003FF0  0EFF               	movlw	255
  7883  003FF2  1572               	andwf	___flmul@grs& (0+255),w,b
  7884  003FF4  6F6C               	movwf	??___flmul& (0+255),b
  7885  003FF6  0EFF               	movlw	255
  7886  003FF8  1573               	andwf	(___flmul@grs+1)& (0+255),w,b
  7887  003FFA  6F6D               	movwf	(??___flmul+1)& (0+255),b
  7888  003FFC  0EFF               	movlw	255
  7889  003FFE  1574               	andwf	(___flmul@grs+2)& (0+255),w,b
  7890  004000  6F6E               	movwf	(??___flmul+2)& (0+255),b
  7891  004002  0E7F               	movlw	127
  7892  004004  1575               	andwf	(___flmul@grs+3)& (0+255),w,b
  7893  004006  6F6F               	movwf	(??___flmul+3)& (0+255),b
  7894  004008  516C               	movf	??___flmul& (0+255),w,b
  7895  00400A  116D               	iorwf	(??___flmul+1)& (0+255),w,b
  7896  00400C  116E               	iorwf	(??___flmul+2)& (0+255),w,b
  7897  00400E  116F               	iorwf	(??___flmul+3)& (0+255),w,b
  7898  004010  A4D8               	btfss	16344,2,c
  7899  004012  D002               	goto	u6090
  7900                           
  7901                           ; BSR set to: 0
  7902                           
  7903                           ; BSR set to: 0
  7904  004014  A177               	btfss	___flmul@prod& (0+255),0,b
  7905  004016  D002               	goto	l1698
  7906  004018                     u6090:
  7907                           
  7908                           ; BSR set to: 0
  7909  004018  0E01               	movlw	1
  7910  00401A  6F71               	movwf	___flmul@aexp& (0+255),b
  7911  00401C                     l1698:
  7912                           
  7913                           ; BSR set to: 0
  7914                           
  7915                           ; BSR set to: 0
  7916                           
  7917                           ; BSR set to: 0
  7918  00401C  5171               	movf	___flmul@aexp& (0+255),w,b
  7919  00401E  B4D8               	btfsc	16344,2,c
  7920  004020  D027               	goto	l1700
  7921                           
  7922                           ; BSR set to: 0
  7923  004022  0E01               	movlw	1
  7924  004024  2777               	addwf	___flmul@prod& (0+255),f,b
  7925  004026  0E00               	movlw	0
  7926  004028  2378               	addwfc	(___flmul@prod+1)& (0+255),f,b
  7927  00402A  2379               	addwfc	(___flmul@prod+2)& (0+255),f,b
  7928  00402C  237A               	addwfc	(___flmul@prod+3)& (0+255),f,b
  7929                           
  7930                           ; BSR set to: 0
  7931  00402E  A17A               	btfss	(___flmul@prod+3)& (0+255),0,b
  7932  004030  D01F               	goto	l1700
  7933                           
  7934                           ; BSR set to: 0
  7935  004032  0060  F1DC  F06C   	movff	___flmul@prod,??___flmul
  7936  004038  0060  F1E0  F06D   	movff	___flmul@prod+1,??___flmul+1
  7937  00403E  0060  F1E4  F06E   	movff	___flmul@prod+2,??___flmul+2
  7938  004044  0060  F1E8  F06F   	movff	___flmul@prod+3,??___flmul+3
  7939  00404A  356F               	rlcf	(??___flmul+3)& (0+255),w,b
  7940  00404C  336F               	rrcf	(??___flmul+3)& (0+255),f,b
  7941  00404E  336E               	rrcf	(??___flmul+2)& (0+255),f,b
  7942  004050  336D               	rrcf	(??___flmul+1)& (0+255),f,b
  7943  004052  336C               	rrcf	??___flmul& (0+255),f,b
  7944  004054  0060  F1B0  F077   	movff	??___flmul,___flmul@prod
  7945  00405A  0060  F1B4  F078   	movff	??___flmul+1,___flmul@prod+1
  7946  004060  0060  F1B8  F079   	movff	??___flmul+2,___flmul@prod+2
  7947  004066  0060  F1BC  F07A   	movff	??___flmul+3,___flmul@prod+3
  7948                           
  7949                           ; BSR set to: 0
  7950  00406C  4B7B               	infsnz	___flmul@temp& (0+255),f,b
  7951  00406E  2B7C               	incf	(___flmul@temp+1)& (0+255),f,b
  7952  004070                     l1700:
  7953                           
  7954                           ; BSR set to: 0
  7955                           
  7956                           ; BSR set to: 0
  7957                           
  7958                           ; BSR set to: 0
  7959  004070  BF7C               	btfsc	(___flmul@temp+1)& (0+255),7,b
  7960  004072  D00D               	goto	l1701
  7961  004074  517C               	movf	(___flmul@temp+1)& (0+255),w,b
  7962  004076  E103               	bnz	u6120
  7963  004078  297B               	incf	___flmul@temp& (0+255),w,b
  7964  00407A  A0D8               	btfss	16344,0,c
  7965  00407C  D008               	goto	l1701
  7966  00407E                     u6120:
  7967                           
  7968                           ; BSR set to: 0
  7969  00407E  0E00               	movlw	0
  7970  004080  6F77               	movwf	___flmul@prod& (0+255),b
  7971  004082  0E00               	movlw	0
  7972  004084  6F78               	movwf	(___flmul@prod+1)& (0+255),b
  7973  004086  0E80               	movlw	128
  7974  004088  6F79               	movwf	(___flmul@prod+2)& (0+255),b
  7975  00408A  0E7F               	movlw	127
  7976  00408C  D021               	goto	L12
  7977  00408E                     l1701:
  7978                           
  7979                           ; BSR set to: 0
  7980                           
  7981                           ; BSR set to: 0
  7982  00408E  BF7C               	btfsc	(___flmul@temp+1)& (0+255),7,b
  7983  004090  D005               	goto	u6130
  7984  004092  517C               	movf	(___flmul@temp+1)& (0+255),w,b
  7985  004094  E10E               	bnz	l1703
  7986  004096  057B               	decf	___flmul@temp& (0+255),w,b
  7987  004098  B0D8               	btfsc	16344,0,c
  7988  00409A  D00B               	goto	l1703
  7989  00409C                     u6130:
  7990                           
  7991                           ; BSR set to: 0
  7992  00409C  0E00               	movlw	0
  7993  00409E  6F77               	movwf	___flmul@prod& (0+255),b
  7994  0040A0  0E00               	movlw	0
  7995  0040A2  6F78               	movwf	(___flmul@prod+1)& (0+255),b
  7996  0040A4  0E00               	movlw	0
  7997  0040A6  6F79               	movwf	(___flmul@prod+2)& (0+255),b
  7998  0040A8  0E00               	movlw	0
  7999  0040AA  6F7A               	movwf	(___flmul@prod+3)& (0+255),b
  8000  0040AC  0E00               	movlw	0
  8001  0040AE  6F70               	movwf	___flmul@sign& (0+255),b
  8002  0040B0  D010               	goto	l1704
  8003  0040B2                     l1703:
  8004                           
  8005                           ; BSR set to: 0
  8006  0040B2  0060  F1EC  F076   	movff	___flmul@temp,___flmul@bexp
  8007                           
  8008                           ; BSR set to: 0
  8009  0040B8  0EFF               	movlw	255
  8010  0040BA  1777               	andwf	___flmul@prod& (0+255),f,b
  8011  0040BC  0EFF               	movlw	255
  8012  0040BE  1778               	andwf	(___flmul@prod+1)& (0+255),f,b
  8013  0040C0  0E7F               	movlw	127
  8014  0040C2  1779               	andwf	(___flmul@prod+2)& (0+255),f,b
  8015  0040C4  0E00               	movlw	0
  8016  0040C6  177A               	andwf	(___flmul@prod+3)& (0+255),f,b
  8017                           
  8018                           ; BSR set to: 0
  8019  0040C8  B176               	btfsc	___flmul@bexp& (0+255),0,b
  8020                           
  8021                           ; BSR set to: 0
  8022  0040CA  8F79               	bsf	(___flmul@prod+2)& (0+255),7,b
  8023                           
  8024                           ; BSR set to: 0
  8025                           
  8026                           ; BSR set to: 0
  8027  0040CC  90D8               	bcf	16344,0,c
  8028  0040CE  3176               	rrcf	___flmul@bexp& (0+255),w,b
  8029  0040D0                     L12:
  8030  0040D0  6F7A               	movwf	(___flmul@prod+3)& (0+255),b
  8031  0040D2                     l1704:
  8032                           
  8033                           ; BSR set to: 0
  8034                           
  8035                           ; BSR set to: 0
  8036                           
  8037                           ; BSR set to: 0
  8038  0040D2  5170               	movf	___flmul@sign& (0+255),w,b
  8039  0040D4  137A               	iorwf	(___flmul@prod+3)& (0+255),f,b
  8040                           
  8041                           ; BSR set to: 0
  8042  0040D6  0060  F1DC  F064   	movff	___flmul@prod,?___flmul
  8043  0040DC  0060  F1E0  F065   	movff	___flmul@prod+1,?___flmul+1
  8044  0040E2  0060  F1E4  F066   	movff	___flmul@prod+2,?___flmul+2
  8045  0040E8  0060  F1E8  F067   	movff	___flmul@prod+3,?___flmul+3
  8046  0040EE  0012               	return	
  8047  0040F0                     __end_of___flmul:
  8048                           	opt stack 0
  8049                           
  8050 ;; *************** function ___fladd *****************
  8051 ;; Defined at:
  8052 ;;		line 10 in file "D:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcadd.c"
  8053 ;; Parameters:    Size  Location     Type
  8054 ;;  b               4   52[COMRAM] unsigned char 
  8055 ;;  a               4   56[COMRAM] unsigned char 
  8056 ;; Auto vars:     Size  Location     Type
  8057 ;;  grs             1    3[BANK0 ] unsigned char 
  8058 ;;  bexp            1    2[BANK0 ] unsigned char 
  8059 ;;  aexp            1    1[BANK0 ] unsigned char 
  8060 ;;  signs           1    0[BANK0 ] unsigned char 
  8061 ;; Return value:  Size  Location     Type
  8062 ;;                  4   52[COMRAM] unsigned char 
  8063 ;; Registers used:
  8064 ;;		wreg, status,2, status,0
  8065 ;; Tracked objects:
  8066 ;;		On entry : 0/0
  8067 ;;		On exit  : 0/0
  8068 ;;		Unchanged: 0/0
  8069 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
  8070 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  8071 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  8072 ;;      Temps:          8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  8073 ;;      Totals:        16       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  8074 ;;Total ram usage:       20 bytes
  8075 ;; Hardware stack levels used:    1
  8076 ;; Hardware stack levels required when called:    6
  8077 ;; This function calls:
  8078 ;;		Nothing
  8079 ;; This function is called by:
  8080 ;;		_rad_calculation_auto
  8081 ;;		_rad_calculation_manual
  8082 ;;		_next_rad_calculation_manual
  8083 ;;		_steps_calculation
  8084 ;;		_next_steps_calculation
  8085 ;;		_real_rad_calculation
  8086 ;;		_main
  8087 ;;		_atan
  8088 ;;		_cos
  8089 ;;		_eval_poly
  8090 ;;		_round
  8091 ;;		_sin
  8092 ;;		___flsub
  8093 ;;		_floor
  8094 ;; This function uses a non-reentrant model
  8095 ;;
  8096                           
  8097                           	psect	text25
  8098  0040F0                     __ptext25:
  8099                           	opt stack 0
  8100  0040F0                     ___fladd:
  8101                           	opt stack 22
  8102                           
  8103                           ; BSR set to: 0
  8104                           ;incstack = 0
  8105  0040F0  5038               	movf	___fladd@b+3,w,c
  8106  0040F2  0B80               	andlw	128
  8107  0040F4  0100               	movlb	0	; () banked
  8108  0040F6  6F60               	movwf	___fladd@signs& (0+255),b
  8109  0040F8  5038               	movf	___fladd@b+3,w,c
  8110  0040FA  2438               	addwf	___fladd@b+3,w,c
  8111  0040FC  6F62               	movwf	___fladd@bexp& (0+255),b
  8112                           
  8113                           ; BSR set to: 0
  8114  0040FE  BE37               	btfsc	___fladd@b+2,7,c
  8115                           
  8116                           ; BSR set to: 0
  8117  004100  8162               	bsf	___fladd@bexp& (0+255),0,b
  8118                           
  8119                           ; BSR set to: 0
  8120                           
  8121                           ; BSR set to: 0
  8122  004102  5162               	movf	___fladd@bexp& (0+255),w,b
  8123  004104  B4D8               	btfsc	16344,2,c
  8124  004106  D00D               	goto	l1589
  8125                           
  8126                           ; BSR set to: 0
  8127  004108  2962               	incf	___fladd@bexp& (0+255),w,b
  8128  00410A  A4D8               	btfss	16344,2,c
  8129  00410C  D008               	goto	l1590
  8130                           
  8131                           ; BSR set to: 0
  8132  00410E  0E00               	movlw	0
  8133  004110  6E35               	movwf	___fladd@b,c
  8134  004112  0E00               	movlw	0
  8135  004114  6E36               	movwf	___fladd@b+1,c
  8136  004116  0E00               	movlw	0
  8137  004118  6E37               	movwf	___fladd@b+2,c
  8138  00411A  0E00               	movlw	0
  8139  00411C  6E38               	movwf	___fladd@b+3,c
  8140  00411E                     l1590:
  8141                           
  8142                           ; BSR set to: 0
  8143                           
  8144                           ; BSR set to: 0
  8145  00411E  8E37               	bsf	___fladd@b+2,7,c
  8146  004120  D006               	goto	L13
  8147  004122                     l1589:
  8148                           
  8149                           ; BSR set to: 0
  8150                           
  8151                           ; BSR set to: 0
  8152  004122  0E00               	movlw	0
  8153  004124  6E35               	movwf	___fladd@b,c
  8154  004126  0E00               	movlw	0
  8155  004128  6E36               	movwf	___fladd@b+1,c
  8156  00412A  0E00               	movlw	0
  8157  00412C  6E37               	movwf	___fladd@b+2,c
  8158  00412E                     L13:
  8159  00412E  0E00               	movlw	0
  8160  004130  6E38               	movwf	___fladd@b+3,c
  8161                           
  8162                           ; BSR set to: 0
  8163                           
  8164                           ; BSR set to: 0
  8165  004132  503C               	movf	___fladd@a+3,w,c
  8166  004134  0B80               	andlw	128
  8167  004136  6F61               	movwf	___fladd@aexp& (0+255),b
  8168                           
  8169                           ; BSR set to: 0
  8170  004138  5160               	movf	___fladd@signs& (0+255),w,b
  8171  00413A  1961               	xorwf	___fladd@aexp& (0+255),w,b
  8172  00413C  A4D8               	btfss	16344,2,c
  8173                           
  8174                           ; BSR set to: 0
  8175  00413E  8D60               	bsf	___fladd@signs& (0+255),6,b
  8176                           
  8177                           ; BSR set to: 0
  8178                           
  8179                           ; BSR set to: 0
  8180  004140  503C               	movf	___fladd@a+3,w,c
  8181  004142  243C               	addwf	___fladd@a+3,w,c
  8182  004144  6F61               	movwf	___fladd@aexp& (0+255),b
  8183                           
  8184                           ; BSR set to: 0
  8185  004146  BE3B               	btfsc	___fladd@a+2,7,c
  8186                           
  8187                           ; BSR set to: 0
  8188  004148  8161               	bsf	___fladd@aexp& (0+255),0,b
  8189                           
  8190                           ; BSR set to: 0
  8191                           
  8192                           ; BSR set to: 0
  8193  00414A  5161               	movf	___fladd@aexp& (0+255),w,b
  8194  00414C  B4D8               	btfsc	16344,2,c
  8195  00414E  D00D               	goto	l1594
  8196                           
  8197                           ; BSR set to: 0
  8198  004150  2961               	incf	___fladd@aexp& (0+255),w,b
  8199  004152  A4D8               	btfss	16344,2,c
  8200  004154  D008               	goto	l1595
  8201                           
  8202                           ; BSR set to: 0
  8203  004156  0E00               	movlw	0
  8204  004158  6E39               	movwf	___fladd@a,c
  8205  00415A  0E00               	movlw	0
  8206  00415C  6E3A               	movwf	___fladd@a+1,c
  8207  00415E  0E00               	movlw	0
  8208  004160  6E3B               	movwf	___fladd@a+2,c
  8209  004162  0E00               	movlw	0
  8210  004164  6E3C               	movwf	___fladd@a+3,c
  8211  004166                     l1595:
  8212                           
  8213                           ; BSR set to: 0
  8214                           
  8215                           ; BSR set to: 0
  8216  004166  8E3B               	bsf	___fladd@a+2,7,c
  8217  004168  D006               	goto	L14
  8218  00416A                     l1594:
  8219                           
  8220                           ; BSR set to: 0
  8221                           
  8222                           ; BSR set to: 0
  8223  00416A  0E00               	movlw	0
  8224  00416C  6E39               	movwf	___fladd@a,c
  8225  00416E  0E00               	movlw	0
  8226  004170  6E3A               	movwf	___fladd@a+1,c
  8227  004172  0E00               	movlw	0
  8228  004174  6E3B               	movwf	___fladd@a+2,c
  8229  004176                     L14:
  8230  004176  0E00               	movlw	0
  8231  004178  6E3C               	movwf	___fladd@a+3,c
  8232                           
  8233                           ; BSR set to: 0
  8234                           
  8235                           ; BSR set to: 0
  8236  00417A  5162               	movf	___fladd@bexp& (0+255),w,b
  8237  00417C  5D61               	subwf	___fladd@aexp& (0+255),w,b
  8238  00417E  B0D8               	btfsc	16344,0,c
  8239  004180  D031               	goto	l1597
  8240                           
  8241                           ; BSR set to: 0
  8242  004182  AD60               	btfss	___fladd@signs& (0+255),6,b
  8243  004184  D002               	goto	l1598
  8244                           
  8245                           ; BSR set to: 0
  8246  004186  0E80               	movlw	128
  8247  004188  1B60               	xorwf	___fladd@signs& (0+255),f,b
  8248  00418A                     l1598:
  8249                           
  8250                           ; BSR set to: 0
  8251                           
  8252                           ; BSR set to: 0
  8253  00418A  0060  F188  F063   	movff	___fladd@bexp,___fladd@grs
  8254                           
  8255                           ; BSR set to: 0
  8256  004190  0060  F184  F062   	movff	___fladd@aexp,___fladd@bexp
  8257                           
  8258                           ; BSR set to: 0
  8259  004196  0060  F18C  F061   	movff	___fladd@grs,___fladd@aexp
  8260                           
  8261                           ; BSR set to: 0
  8262  00419C  0060  F0D4  F063   	movff	___fladd@b,___fladd@grs
  8263                           
  8264                           ; BSR set to: 0
  8265  0041A2  0060  F0E4  F035   	movff	___fladd@a,___fladd@b
  8266                           
  8267                           ; BSR set to: 0
  8268  0041A8  0060  F18C  F039   	movff	___fladd@grs,___fladd@a
  8269                           
  8270                           ; BSR set to: 0
  8271  0041AE  0060  F0D8  F063   	movff	___fladd@b+1,___fladd@grs
  8272                           
  8273                           ; BSR set to: 0
  8274  0041B4  0060  F0E8  F036   	movff	___fladd@a+1,___fladd@b+1
  8275                           
  8276                           ; BSR set to: 0
  8277  0041BA  0060  F18C  F03A   	movff	___fladd@grs,___fladd@a+1
  8278                           
  8279                           ; BSR set to: 0
  8280  0041C0  0060  F0DC  F063   	movff	___fladd@b+2,___fladd@grs
  8281                           
  8282                           ; BSR set to: 0
  8283  0041C6  0060  F0EC  F037   	movff	___fladd@a+2,___fladd@b+2
  8284                           
  8285                           ; BSR set to: 0
  8286  0041CC  0060  F18C  F03B   	movff	___fladd@grs,___fladd@a+2
  8287                           
  8288                           ; BSR set to: 0
  8289  0041D2  0060  F0E0  F063   	movff	___fladd@b+3,___fladd@grs
  8290                           
  8291                           ; BSR set to: 0
  8292  0041D8  0060  F0F0  F038   	movff	___fladd@a+3,___fladd@b+3
  8293                           
  8294                           ; BSR set to: 0
  8295  0041DE  0060  F18C  F03C   	movff	___fladd@grs,___fladd@a+3
  8296  0041E4                     l1597:
  8297                           
  8298                           ; BSR set to: 0
  8299                           
  8300                           ; BSR set to: 0
  8301  0041E4  0E00               	movlw	0
  8302  0041E6  6F63               	movwf	___fladd@grs& (0+255),b
  8303                           
  8304                           ; BSR set to: 0
  8305  0041E8  5162               	movf	___fladd@bexp& (0+255),w,b
  8306  0041EA  6E3D               	movwf	??___fladd& (0+255),c
  8307  0041EC  6A3E               	clrf	(??___fladd+1)& (0+255),c
  8308  0041EE  1E3D               	comf	??___fladd,f,c
  8309  0041F0  1E3E               	comf	??___fladd+1,f,c
  8310  0041F2  4A3D               	infsnz	??___fladd,f,c
  8311  0041F4  2A3E               	incf	??___fladd+1,f,c
  8312  0041F6  5161               	movf	___fladd@aexp& (0+255),w,b
  8313  0041F8  6E3F               	movwf	(??___fladd+2)& (0+255),c
  8314  0041FA  6A40               	clrf	(??___fladd+3)& (0+255),c
  8315  0041FC  503D               	movf	??___fladd,w,c
  8316  0041FE  263F               	addwf	??___fladd+2,f,c
  8317  004200  503E               	movf	??___fladd+1,w,c
  8318  004202  2240               	addwfc	??___fladd+3,f,c
  8319  004204  BE40               	btfsc	??___fladd+3,7,c
  8320  004206  D02D               	goto	l1601
  8321  004208  5040               	movf	??___fladd+3,w,c
  8322  00420A  E104               	bnz	u5660
  8323  00420C  0E1A               	movlw	26
  8324  00420E  5C3F               	subwf	??___fladd+2,w,c
  8325  004210  A0D8               	btfss	16344,0,c
  8326  004212  D027               	goto	l1601
  8327  004214                     u5660:
  8328                           
  8329                           ; BSR set to: 0
  8330  004214  5035               	movf	___fladd@b,w,c
  8331  004216  1036               	iorwf	___fladd@b+1,w,c
  8332  004218  1037               	iorwf	___fladd@b+2,w,c
  8333  00421A  1038               	iorwf	___fladd@b+3,w,c
  8334  00421C  B4D8               	btfsc	16344,2,c
  8335  00421E  D002               	goto	u5670
  8336  004220  0E01               	movlw	1
  8337  004222  D001               	goto	u5680
  8338  004224                     u5670:
  8339  004224  0E00               	movlw	0
  8340  004226                     u5680:
  8341  004226  6F63               	movwf	___fladd@grs& (0+255),b
  8342                           
  8343                           ; BSR set to: 0
  8344  004228  0E00               	movlw	0
  8345  00422A  6E35               	movwf	___fladd@b,c
  8346  00422C  0E00               	movlw	0
  8347  00422E  6E36               	movwf	___fladd@b+1,c
  8348  004230  0E00               	movlw	0
  8349  004232  6E37               	movwf	___fladd@b+2,c
  8350  004234  0E00               	movlw	0
  8351  004236  6E38               	movwf	___fladd@b+3,c
  8352                           
  8353                           ; BSR set to: 0
  8354  004238  0060  F184  F062   	movff	___fladd@aexp,___fladd@bexp
  8355  00423E  D015               	goto	u5710
  8356  004240                     l1602:
  8357                           
  8358                           ; BSR set to: 0
  8359  004240  A163               	btfss	___fladd@grs& (0+255),0,b
  8360  004242  D005               	goto	l1603
  8361                           
  8362                           ; BSR set to: 0
  8363  004244  90D8               	bcf	16344,0,c
  8364  004246  3163               	rrcf	___fladd@grs& (0+255),w,b
  8365  004248  0901               	iorlw	1
  8366  00424A  6F63               	movwf	___fladd@grs& (0+255),b
  8367  00424C  D002               	goto	l1604
  8368  00424E                     l1603:
  8369                           
  8370                           ; BSR set to: 0
  8371                           
  8372                           ; BSR set to: 0
  8373  00424E  90D8               	bcf	16344,0,c
  8374  004250  3363               	rrcf	___fladd@grs& (0+255),f,b
  8375  004252                     l1604:
  8376                           
  8377                           ; BSR set to: 0
  8378                           
  8379                           ; BSR set to: 0
  8380  004252  B035               	btfsc	___fladd@b,0,c
  8381                           
  8382                           ; BSR set to: 0
  8383  004254  8F63               	bsf	___fladd@grs& (0+255),7,b
  8384                           
  8385                           ; BSR set to: 0
  8386                           
  8387                           ; BSR set to: 0
  8388  004256  3438               	rlcf	___fladd@b+3,w,c
  8389  004258  3238               	rrcf	___fladd@b+3,f,c
  8390  00425A  3237               	rrcf	___fladd@b+2,f,c
  8391  00425C  3236               	rrcf	___fladd@b+1,f,c
  8392  00425E  3235               	rrcf	___fladd@b,f,c
  8393                           
  8394                           ; BSR set to: 0
  8395  004260  2B62               	incf	___fladd@bexp& (0+255),f,b
  8396  004262                     l1601:
  8397                           
  8398                           ; BSR set to: 0
  8399  004262  5161               	movf	___fladd@aexp& (0+255),w,b
  8400  004264  5D62               	subwf	___fladd@bexp& (0+255),w,b
  8401  004266  A0D8               	btfss	16344,0,c
  8402  004268  D7EB               	goto	l1602
  8403  00426A                     u5710:
  8404                           
  8405                           ; BSR set to: 0
  8406                           
  8407                           ; BSR set to: 0
  8408  00426A  BD60               	btfsc	___fladd@signs& (0+255),6,b
  8409  00426C  D029               	goto	l1607
  8410                           
  8411                           ; BSR set to: 0
  8412  00426E  5162               	movf	___fladd@bexp& (0+255),w,b
  8413  004270  A4D8               	btfss	16344,2,c
  8414  004272  D009               	goto	l1608
  8415                           
  8416                           ; BSR set to: 0
  8417  004274  0E00               	movlw	0
  8418  004276  6E35               	movwf	?___fladd,c
  8419  004278  0E00               	movlw	0
  8420  00427A  6E36               	movwf	?___fladd+1,c
  8421  00427C  0E00               	movlw	0
  8422  00427E  6E37               	movwf	?___fladd+2,c
  8423  004280  0E00               	movlw	0
  8424  004282  6E38               	movwf	?___fladd+3,c
  8425                           
  8426                           ; BSR set to: 0
  8427  004284  0012               	return	
  8428  004286                     l1608:
  8429                           
  8430                           ; BSR set to: 0
  8431                           
  8432                           ; BSR set to: 0
  8433  004286  5039               	movf	___fladd@a,w,c
  8434  004288  2635               	addwf	___fladd@b,f,c
  8435  00428A  503A               	movf	___fladd@a+1,w,c
  8436  00428C  2236               	addwfc	___fladd@b+1,f,c
  8437  00428E  503B               	movf	___fladd@a+2,w,c
  8438  004290  2237               	addwfc	___fladd@b+2,f,c
  8439  004292  503C               	movf	___fladd@a+3,w,c
  8440  004294  2238               	addwfc	___fladd@b+3,f,c
  8441                           
  8442                           ; BSR set to: 0
  8443  004296  A038               	btfss	___fladd@b+3,0,c
  8444  004298  D087               	goto	u5840
  8445                           
  8446                           ; BSR set to: 0
  8447  00429A  A163               	btfss	___fladd@grs& (0+255),0,b
  8448  00429C  D006               	goto	l1611
  8449                           
  8450                           ; BSR set to: 0
  8451  00429E  90D8               	bcf	16344,0,c
  8452  0042A0  3363               	rrcf	___fladd@grs& (0+255),f,b
  8453  0042A2  5163               	movf	___fladd@grs& (0+255),w,b
  8454  0042A4  0901               	iorlw	1
  8455  0042A6  6F63               	movwf	___fladd@grs& (0+255),b
  8456  0042A8  D002               	goto	l1612
  8457  0042AA                     l1611:
  8458                           
  8459                           ; BSR set to: 0
  8460                           
  8461                           ; BSR set to: 0
  8462  0042AA  90D8               	bcf	16344,0,c
  8463  0042AC  3363               	rrcf	___fladd@grs& (0+255),f,b
  8464  0042AE                     l1612:
  8465                           
  8466                           ; BSR set to: 0
  8467                           
  8468                           ; BSR set to: 0
  8469  0042AE  B035               	btfsc	___fladd@b,0,c
  8470                           
  8471                           ; BSR set to: 0
  8472  0042B0  8F63               	bsf	___fladd@grs& (0+255),7,b
  8473                           
  8474                           ; BSR set to: 0
  8475                           
  8476                           ; BSR set to: 0
  8477  0042B2  3438               	rlcf	___fladd@b+3,w,c
  8478  0042B4  3238               	rrcf	___fladd@b+3,f,c
  8479  0042B6  3237               	rrcf	___fladd@b+2,f,c
  8480  0042B8  3236               	rrcf	___fladd@b+1,f,c
  8481  0042BA  3235               	rrcf	___fladd@b,f,c
  8482                           
  8483                           ; BSR set to: 0
  8484  0042BC  2B62               	incf	___fladd@bexp& (0+255),f,b
  8485                           
  8486                           ; BSR set to: 0
  8487  0042BE  D074               	goto	u5840
  8488  0042C0                     l1607:
  8489                           
  8490                           ; BSR set to: 0
  8491                           
  8492                           ; BSR set to: 0
  8493  0042C0  5039               	movf	___fladd@a,w,c
  8494  0042C2  5C35               	subwf	___fladd@b,w,c
  8495  0042C4  503A               	movf	___fladd@a+1,w,c
  8496  0042C6  5836               	subwfb	___fladd@b+1,w,c
  8497  0042C8  503B               	movf	___fladd@a+2,w,c
  8498  0042CA  5837               	subwfb	___fladd@b+2,w,c
  8499  0042CC  5038               	movf	___fladd@b+3,w,c
  8500  0042CE  0A80               	xorlw	128
  8501  0042D0  6E3D               	movwf	??___fladd& (0+255),c
  8502  0042D2  503C               	movf	___fladd@a+3,w,c
  8503  0042D4  0A80               	xorlw	128
  8504  0042D6  583D               	subwfb	??___fladd& (0+255),w,c
  8505  0042D8  B0D8               	btfsc	16344,0,c
  8506  0042DA  D03A               	goto	l1615
  8507                           
  8508                           ; BSR set to: 0
  8509  0042DC  0060  F0D4  F03D   	movff	___fladd@b,??___fladd
  8510  0042E2  0060  F0D8  F03E   	movff	___fladd@b+1,??___fladd+1
  8511  0042E8  0060  F0DC  F03F   	movff	___fladd@b+2,??___fladd+2
  8512  0042EE  0060  F0E0  F040   	movff	___fladd@b+3,??___fladd+3
  8513  0042F4  1E3D               	comf	??___fladd,f,c
  8514  0042F6  1E3E               	comf	??___fladd+1,f,c
  8515  0042F8  1E3F               	comf	??___fladd+2,f,c
  8516  0042FA  1E40               	comf	??___fladd+3,f,c
  8517  0042FC  2A3D               	incf	??___fladd,f,c
  8518  0042FE  0E00               	movlw	0
  8519  004300  223E               	addwfc	??___fladd+1,f,c
  8520  004302  223F               	addwfc	??___fladd+2,f,c
  8521  004304  2240               	addwfc	??___fladd+3,f,c
  8522  004306  5039               	movf	___fladd@a,w,c
  8523  004308  243D               	addwf	??___fladd,w,c
  8524  00430A  6E41               	movwf	(??___fladd+4)& (0+255),c
  8525  00430C  503A               	movf	___fladd@a+1,w,c
  8526  00430E  203E               	addwfc	??___fladd+1,w,c
  8527  004310  6E42               	movwf	(??___fladd+5)& (0+255),c
  8528  004312  503B               	movf	___fladd@a+2,w,c
  8529  004314  203F               	addwfc	??___fladd+2,w,c
  8530  004316  6E43               	movwf	(??___fladd+6)& (0+255),c
  8531  004318  503C               	movf	___fladd@a+3,w,c
  8532  00431A  2040               	addwfc	??___fladd+3,w,c
  8533  00431C  6E44               	movwf	(??___fladd+7)& (0+255),c
  8534  00431E  0EFF               	movlw	255
  8535  004320  2441               	addwf	??___fladd+4,w,c
  8536  004322  6E35               	movwf	___fladd@b,c
  8537  004324  0EFF               	movlw	255
  8538  004326  2042               	addwfc	??___fladd+5,w,c
  8539  004328  6E36               	movwf	___fladd@b+1,c
  8540  00432A  0EFF               	movlw	255
  8541  00432C  2043               	addwfc	??___fladd+6,w,c
  8542  00432E  6E37               	movwf	___fladd@b+2,c
  8543  004330  0EFF               	movlw	255
  8544  004332  2044               	addwfc	??___fladd+7,w,c
  8545  004334  6E38               	movwf	___fladd@b+3,c
  8546  004336  0E80               	movlw	128
  8547  004338  1B60               	xorwf	___fladd@signs& (0+255),f,b
  8548                           
  8549                           ; BSR set to: 0
  8550  00433A  6D63               	negf	___fladd@grs& (0+255),b
  8551                           
  8552                           ; BSR set to: 0
  8553  00433C  5163               	movf	___fladd@grs& (0+255),w,b
  8554  00433E  A4D8               	btfss	16344,2,c
  8555  004340  D00F               	goto	l1617
  8556                           
  8557                           ; BSR set to: 0
  8558  004342  0E01               	movlw	1
  8559  004344  2635               	addwf	___fladd@b,f,c
  8560  004346  0E00               	movlw	0
  8561  004348  2236               	addwfc	___fladd@b+1,f,c
  8562  00434A  2237               	addwfc	___fladd@b+2,f,c
  8563  00434C  2238               	addwfc	___fladd@b+3,f,c
  8564                           
  8565                           ; BSR set to: 0
  8566  00434E  D008               	goto	l1617
  8567  004350                     l1615:
  8568                           
  8569                           ; BSR set to: 0
  8570                           
  8571                           ; BSR set to: 0
  8572  004350  5039               	movf	___fladd@a,w,c
  8573  004352  5E35               	subwf	___fladd@b,f,c
  8574  004354  503A               	movf	___fladd@a+1,w,c
  8575  004356  5A36               	subwfb	___fladd@b+1,f,c
  8576  004358  503B               	movf	___fladd@a+2,w,c
  8577  00435A  5A37               	subwfb	___fladd@b+2,f,c
  8578  00435C  503C               	movf	___fladd@a+3,w,c
  8579  00435E  5A38               	subwfb	___fladd@b+3,f,c
  8580  004360                     l1617:
  8581                           
  8582                           ; BSR set to: 0
  8583  004360  5035               	movf	___fladd@b,w,c
  8584  004362  1036               	iorwf	___fladd@b+1,w,c
  8585  004364  1037               	iorwf	___fladd@b+2,w,c
  8586  004366  1038               	iorwf	___fladd@b+3,w,c
  8587  004368  A4D8               	btfss	16344,2,c
  8588  00436A  D01C               	goto	l1624
  8589                           
  8590                           ; BSR set to: 0
  8591  00436C  5163               	movf	___fladd@grs& (0+255),w,b
  8592  00436E  A4D8               	btfss	16344,2,c
  8593  004370  D019               	goto	l1624
  8594                           
  8595                           ; BSR set to: 0
  8596  004372  0E00               	movlw	0
  8597  004374  6E35               	movwf	?___fladd,c
  8598  004376  0E00               	movlw	0
  8599  004378  6E36               	movwf	?___fladd+1,c
  8600  00437A  0E00               	movlw	0
  8601  00437C  6E37               	movwf	?___fladd+2,c
  8602  00437E  0E00               	movlw	0
  8603  004380  6E38               	movwf	?___fladd+3,c
  8604                           
  8605                           ; BSR set to: 0
  8606  004382  0012               	return	
  8607  004384                     
  8608                           ; BSR set to: 0
  8609                           
  8610                           ; BSR set to: 0
  8611  004384  90D8               	bcf	16344,0,c
  8612  004386  3635               	rlcf	___fladd@b,f,c
  8613  004388  3636               	rlcf	___fladd@b+1,f,c
  8614  00438A  3637               	rlcf	___fladd@b+2,f,c
  8615  00438C  3638               	rlcf	___fladd@b+3,f,c
  8616                           
  8617                           ; BSR set to: 0
  8618  00438E  BF63               	btfsc	___fladd@grs& (0+255),7,b
  8619                           
  8620                           ; BSR set to: 0
  8621  004390  8035               	bsf	___fladd@b,0,c
  8622                           
  8623                           ; BSR set to: 0
  8624                           
  8625                           ; BSR set to: 0
  8626  004392  A163               	btfss	___fladd@grs& (0+255),0,b
  8627  004394  D002               	goto	l1622
  8628                           
  8629                           ; BSR set to: 0
  8630  004396  80D8               	bsf	16344,0,c
  8631  004398  D001               	goto	L15
  8632  00439A                     l1622:
  8633                           
  8634                           ; BSR set to: 0
  8635                           
  8636                           ; BSR set to: 0
  8637  00439A  90D8               	bcf	16344,0,c
  8638  00439C                     L15:
  8639  00439C  3763               	rlcf	___fladd@grs& (0+255),f,b
  8640                           
  8641                           ; BSR set to: 0
  8642                           
  8643                           ; BSR set to: 0
  8644  00439E  5162               	movf	___fladd@bexp& (0+255),w,b
  8645  0043A0  A4D8               	btfss	16344,2,c
  8646                           
  8647                           ; BSR set to: 0
  8648  0043A2  0762               	decf	___fladd@bexp& (0+255),f,b
  8649  0043A4                     l1624:
  8650                           
  8651                           ; BSR set to: 0
  8652                           
  8653                           ; BSR set to: 0
  8654                           
  8655                           ; BSR set to: 0
  8656  0043A4  AE37               	btfss	___fladd@b+2,7,c
  8657  0043A6  D7EE               	goto	l1620
  8658  0043A8                     u5840:
  8659                           
  8660                           ; BSR set to: 0
  8661                           
  8662                           ; BSR set to: 0
  8663                           
  8664                           ; BSR set to: 0
  8665  0043A8  0E00               	movlw	0
  8666  0043AA  6F61               	movwf	___fladd@aexp& (0+255),b
  8667                           
  8668                           ; BSR set to: 0
  8669  0043AC  AF63               	btfss	___fladd@grs& (0+255),7,b
  8670  0043AE  D00B               	goto	l1629
  8671                           
  8672                           ; BSR set to: 0
  8673  0043B0  0060  F18C  F03D   	movff	___fladd@grs,??___fladd
  8674  0043B6  0E7F               	movlw	127
  8675  0043B8  163D               	andwf	??___fladd,f,c
  8676  0043BA  A4D8               	btfss	16344,2,c
  8677  0043BC  D002               	goto	u5870
  8678                           
  8679                           ; BSR set to: 0
  8680                           
  8681                           ; BSR set to: 0
  8682  0043BE  A035               	btfss	___fladd@b,0,c
  8683  0043C0  D002               	goto	l1629
  8684  0043C2                     u5870:
  8685                           
  8686                           ; BSR set to: 0
  8687  0043C2  0E01               	movlw	1
  8688  0043C4  6F61               	movwf	___fladd@aexp& (0+255),b
  8689  0043C6                     l1629:
  8690                           
  8691                           ; BSR set to: 0
  8692                           
  8693                           ; BSR set to: 0
  8694                           
  8695                           ; BSR set to: 0
  8696  0043C6  5161               	movf	___fladd@aexp& (0+255),w,b
  8697  0043C8  B4D8               	btfsc	16344,2,c
  8698  0043CA  D028               	goto	l1632
  8699                           
  8700                           ; BSR set to: 0
  8701  0043CC  0E01               	movlw	1
  8702  0043CE  2635               	addwf	___fladd@b,f,c
  8703  0043D0  0E00               	movlw	0
  8704  0043D2  2236               	addwfc	___fladd@b+1,f,c
  8705  0043D4  2237               	addwfc	___fladd@b+2,f,c
  8706  0043D6  2238               	addwfc	___fladd@b+3,f,c
  8707                           
  8708                           ; BSR set to: 0
  8709  0043D8  A038               	btfss	___fladd@b+3,0,c
  8710  0043DA  D020               	goto	l1632
  8711                           
  8712                           ; BSR set to: 0
  8713  0043DC  0060  F0D4  F03D   	movff	___fladd@b,??___fladd
  8714  0043E2  0060  F0D8  F03E   	movff	___fladd@b+1,??___fladd+1
  8715  0043E8  0060  F0DC  F03F   	movff	___fladd@b+2,??___fladd+2
  8716  0043EE  0060  F0E0  F040   	movff	___fladd@b+3,??___fladd+3
  8717  0043F4  3440               	rlcf	??___fladd+3,w,c
  8718  0043F6  3240               	rrcf	??___fladd+3,f,c
  8719  0043F8  323F               	rrcf	??___fladd+2,f,c
  8720  0043FA  323E               	rrcf	??___fladd+1,f,c
  8721  0043FC  323D               	rrcf	??___fladd,f,c
  8722  0043FE  0060  F0F4  F035   	movff	??___fladd,___fladd@b
  8723  004404  0060  F0F8  F036   	movff	??___fladd+1,___fladd@b+1
  8724  00440A  0060  F0FC  F037   	movff	??___fladd+2,___fladd@b+2
  8725  004410  0060  F100  F038   	movff	??___fladd+3,___fladd@b+3
  8726  004416  2962               	incf	___fladd@bexp& (0+255),w,b
  8727  004418  A4D8               	btfss	16344,2,c
  8728                           
  8729                           ; BSR set to: 0
  8730  00441A  2B62               	incf	___fladd@bexp& (0+255),f,b
  8731  00441C                     l1632:
  8732                           
  8733                           ; BSR set to: 0
  8734                           
  8735                           ; BSR set to: 0
  8736                           
  8737                           ; BSR set to: 0
  8738                           
  8739                           ; BSR set to: 0
  8740  00441C  2962               	incf	___fladd@bexp& (0+255),w,b
  8741  00441E  B4D8               	btfsc	16344,2,c
  8742  004420  D003               	goto	u5920
  8743                           
  8744                           ; BSR set to: 0
  8745  004422  5162               	movf	___fladd@bexp& (0+255),w,b
  8746  004424  A4D8               	btfss	16344,2,c
  8747  004426  D00D               	goto	l1636
  8748  004428                     u5920:
  8749                           
  8750                           ; BSR set to: 0
  8751                           
  8752                           ; BSR set to: 0
  8753  004428  0E00               	movlw	0
  8754  00442A  6E35               	movwf	___fladd@b,c
  8755  00442C  0E00               	movlw	0
  8756  00442E  6E36               	movwf	___fladd@b+1,c
  8757  004430  0E00               	movlw	0
  8758  004432  6E37               	movwf	___fladd@b+2,c
  8759  004434  0E00               	movlw	0
  8760  004436  6E38               	movwf	___fladd@b+3,c
  8761  004438  5162               	movf	___fladd@bexp& (0+255),w,b
  8762  00443A  A4D8               	btfss	16344,2,c
  8763  00443C  D002               	goto	l1636
  8764                           
  8765                           ; BSR set to: 0
  8766  00443E  0E00               	movlw	0
  8767  004440  6F60               	movwf	___fladd@signs& (0+255),b
  8768  004442                     l1636:
  8769                           
  8770                           ; BSR set to: 0
  8771                           
  8772                           ; BSR set to: 0
  8773                           
  8774                           ; BSR set to: 0
  8775  004442  A162               	btfss	___fladd@bexp& (0+255),0,b
  8776  004444  D002               	goto	l1637
  8777                           
  8778                           ; BSR set to: 0
  8779  004446  8E37               	bsf	___fladd@b+2,7,c
  8780  004448  D001               	goto	l1638
  8781  00444A                     l1637:
  8782                           
  8783                           ; BSR set to: 0
  8784                           
  8785                           ; BSR set to: 0
  8786  00444A  9E37               	bcf	___fladd@b+2,7,c
  8787  00444C                     l1638:
  8788                           
  8789                           ; BSR set to: 0
  8790                           
  8791                           ; BSR set to: 0
  8792  00444C  90D8               	bcf	16344,0,c
  8793  00444E  3162               	rrcf	___fladd@bexp& (0+255),w,b
  8794  004450  6E38               	movwf	___fladd@b+3,c
  8795                           
  8796                           ; BSR set to: 0
  8797  004452  BF60               	btfsc	___fladd@signs& (0+255),7,b
  8798                           
  8799                           ; BSR set to: 0
  8800  004454  8E38               	bsf	___fladd@b+3,7,c
  8801                           
  8802                           ; BSR set to: 0
  8803                           
  8804                           ; BSR set to: 0
  8805  004456  0060  F0D4  F035   	movff	___fladd@b,?___fladd
  8806  00445C  0060  F0D8  F036   	movff	___fladd@b+1,?___fladd+1
  8807  004462  0060  F0DC  F037   	movff	___fladd@b+2,?___fladd+2
  8808  004468  0060  F0E0  F038   	movff	___fladd@b+3,?___fladd+3
  8809  00446E  0012               	return	
  8810  004470                     __end_of___fladd:
  8811                           	opt stack 0
  8812                           
  8813 ;; *************** function ___flge *****************
  8814 ;; Defined at:
  8815 ;;		line 4 in file "D:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\flge.c"
  8816 ;; Parameters:    Size  Location     Type
  8817 ;;  ff1             4   13[COMRAM] unsigned char 
  8818 ;;  ff2             4   17[COMRAM] unsigned char 
  8819 ;; Auto vars:     Size  Location     Type
  8820 ;;		None
  8821 ;; Return value:  Size  Location     Type
  8822 ;;		None               void
  8823 ;; Registers used:
  8824 ;;		wreg, status,2, status,0
  8825 ;; Tracked objects:
  8826 ;;		On entry : 0/0
  8827 ;;		On exit  : 0/0
  8828 ;;		Unchanged: 0/0
  8829 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
  8830 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  8831 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  8832 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  8833 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  8834 ;;Total ram usage:       12 bytes
  8835 ;; Hardware stack levels used:    1
  8836 ;; Hardware stack levels required when called:    6
  8837 ;; This function calls:
  8838 ;;		Nothing
  8839 ;; This function is called by:
  8840 ;;		_atan
  8841 ;;		_cos
  8842 ;;		_sin
  8843 ;;		_floor
  8844 ;; This function uses a non-reentrant model
  8845 ;;
  8846                           
  8847                           	psect	text26
  8848  005AC6                     __ptext26:
  8849                           	opt stack 0
  8850  005AC6                     ___flge:
  8851                           	opt stack 22
  8852                           
  8853                           ; BSR set to: 0
  8854                           ;incstack = 0
  8855  005AC6  0E00               	movlw	0
  8856  005AC8  140E               	andwf	___flge@ff1,w,c
  8857  005ACA  6E16               	movwf	??___flge& (0+255),c
  8858  005ACC  0E00               	movlw	0
  8859  005ACE  140F               	andwf	___flge@ff1+1,w,c
  8860  005AD0  6E17               	movwf	(??___flge+1)& (0+255),c
  8861  005AD2  0E80               	movlw	128
  8862  005AD4  1410               	andwf	___flge@ff1+2,w,c
  8863  005AD6  6E18               	movwf	(??___flge+2)& (0+255),c
  8864  005AD8  0E7F               	movlw	127
  8865  005ADA  1411               	andwf	___flge@ff1+3,w,c
  8866  005ADC  6E19               	movwf	(??___flge+3)& (0+255),c
  8867  005ADE  5016               	movf	??___flge,w,c
  8868  005AE0  1017               	iorwf	??___flge+1,w,c
  8869  005AE2  1018               	iorwf	??___flge+2,w,c
  8870  005AE4  1019               	iorwf	??___flge+3,w,c
  8871  005AE6  A4D8               	btfss	16344,2,c
  8872  005AE8  D008               	goto	l1340
  8873  005AEA  0E00               	movlw	0
  8874  005AEC  6E0E               	movwf	___flge@ff1,c
  8875  005AEE  0E00               	movlw	0
  8876  005AF0  6E0F               	movwf	___flge@ff1+1,c
  8877  005AF2  0E00               	movlw	0
  8878  005AF4  6E10               	movwf	___flge@ff1+2,c
  8879  005AF6  0E00               	movlw	0
  8880  005AF8  6E11               	movwf	___flge@ff1+3,c
  8881  005AFA                     l1340:
  8882  005AFA  0E00               	movlw	0
  8883  005AFC  1412               	andwf	___flge@ff2,w,c
  8884  005AFE  6E16               	movwf	??___flge& (0+255),c
  8885  005B00  0E00               	movlw	0
  8886  005B02  1413               	andwf	___flge@ff2+1,w,c
  8887  005B04  6E17               	movwf	(??___flge+1)& (0+255),c
  8888  005B06  0E80               	movlw	128
  8889  005B08  1414               	andwf	___flge@ff2+2,w,c
  8890  005B0A  6E18               	movwf	(??___flge+2)& (0+255),c
  8891  005B0C  0E7F               	movlw	127
  8892  005B0E  1415               	andwf	___flge@ff2+3,w,c
  8893  005B10  6E19               	movwf	(??___flge+3)& (0+255),c
  8894  005B12  5016               	movf	??___flge,w,c
  8895  005B14  1017               	iorwf	??___flge+1,w,c
  8896  005B16  1018               	iorwf	??___flge+2,w,c
  8897  005B18  1019               	iorwf	??___flge+3,w,c
  8898  005B1A  A4D8               	btfss	16344,2,c
  8899  005B1C  D008               	goto	l1341
  8900  005B1E  0E00               	movlw	0
  8901  005B20  6E12               	movwf	___flge@ff2,c
  8902  005B22  0E00               	movlw	0
  8903  005B24  6E13               	movwf	___flge@ff2+1,c
  8904  005B26  0E00               	movlw	0
  8905  005B28  6E14               	movwf	___flge@ff2+2,c
  8906  005B2A  0E00               	movlw	0
  8907  005B2C  6E15               	movwf	___flge@ff2+3,c
  8908  005B2E                     l1341:
  8909  005B2E  AE11               	btfss	___flge@ff1+3,7,c
  8910  005B30  D021               	goto	l1342
  8911  005B32  0060  F038  F016   	movff	___flge@ff1,??___flge
  8912  005B38  0060  F03C  F017   	movff	___flge@ff1+1,??___flge+1
  8913  005B3E  0060  F040  F018   	movff	___flge@ff1+2,??___flge+2
  8914  005B44  0060  F044  F019   	movff	___flge@ff1+3,??___flge+3
  8915  005B4A  1E16               	comf	??___flge,f,c
  8916  005B4C  1E17               	comf	??___flge+1,f,c
  8917  005B4E  1E18               	comf	??___flge+2,f,c
  8918  005B50  1E19               	comf	??___flge+3,f,c
  8919  005B52  2A16               	incf	??___flge,f,c
  8920  005B54  0E00               	movlw	0
  8921  005B56  2217               	addwfc	??___flge+1,f,c
  8922  005B58  2218               	addwfc	??___flge+2,f,c
  8923  005B5A  2219               	addwfc	??___flge+3,f,c
  8924  005B5C  0E00               	movlw	0
  8925  005B5E  2416               	addwf	??___flge,w,c
  8926  005B60  6E0E               	movwf	___flge@ff1,c
  8927  005B62  0E00               	movlw	0
  8928  005B64  2017               	addwfc	??___flge+1,w,c
  8929  005B66  6E0F               	movwf	___flge@ff1+1,c
  8930  005B68  0E00               	movlw	0
  8931  005B6A  2018               	addwfc	??___flge+2,w,c
  8932  005B6C  6E10               	movwf	___flge@ff1+2,c
  8933  005B6E  0E80               	movlw	128
  8934  005B70  2019               	addwfc	??___flge+3,w,c
  8935  005B72  6E11               	movwf	___flge@ff1+3,c
  8936  005B74                     l1342:
  8937  005B74  AE15               	btfss	___flge@ff2+3,7,c
  8938  005B76  D021               	goto	l1343
  8939  005B78  0060  F048  F016   	movff	___flge@ff2,??___flge
  8940  005B7E  0060  F04C  F017   	movff	___flge@ff2+1,??___flge+1
  8941  005B84  0060  F050  F018   	movff	___flge@ff2+2,??___flge+2
  8942  005B8A  0060  F054  F019   	movff	___flge@ff2+3,??___flge+3
  8943  005B90  1E16               	comf	??___flge,f,c
  8944  005B92  1E17               	comf	??___flge+1,f,c
  8945  005B94  1E18               	comf	??___flge+2,f,c
  8946  005B96  1E19               	comf	??___flge+3,f,c
  8947  005B98  2A16               	incf	??___flge,f,c
  8948  005B9A  0E00               	movlw	0
  8949  005B9C  2217               	addwfc	??___flge+1,f,c
  8950  005B9E  2218               	addwfc	??___flge+2,f,c
  8951  005BA0  2219               	addwfc	??___flge+3,f,c
  8952  005BA2  0E00               	movlw	0
  8953  005BA4  2416               	addwf	??___flge,w,c
  8954  005BA6  6E12               	movwf	___flge@ff2,c
  8955  005BA8  0E00               	movlw	0
  8956  005BAA  2017               	addwfc	??___flge+1,w,c
  8957  005BAC  6E13               	movwf	___flge@ff2+1,c
  8958  005BAE  0E00               	movlw	0
  8959  005BB0  2018               	addwfc	??___flge+2,w,c
  8960  005BB2  6E14               	movwf	___flge@ff2+2,c
  8961  005BB4  0E80               	movlw	128
  8962  005BB6  2019               	addwfc	??___flge+3,w,c
  8963  005BB8  6E15               	movwf	___flge@ff2+3,c
  8964  005BBA                     l1343:
  8965  005BBA  0E00               	movlw	0
  8966  005BBC  1A0E               	xorwf	___flge@ff1,f,c
  8967  005BBE  0E00               	movlw	0
  8968  005BC0  1A0F               	xorwf	___flge@ff1+1,f,c
  8969  005BC2  0E00               	movlw	0
  8970  005BC4  1A10               	xorwf	___flge@ff1+2,f,c
  8971  005BC6  0E80               	movlw	128
  8972  005BC8  1A11               	xorwf	___flge@ff1+3,f,c
  8973  005BCA  0E00               	movlw	0
  8974  005BCC  1A12               	xorwf	___flge@ff2,f,c
  8975  005BCE  0E00               	movlw	0
  8976  005BD0  1A13               	xorwf	___flge@ff2+1,f,c
  8977  005BD2  0E00               	movlw	0
  8978  005BD4  1A14               	xorwf	___flge@ff2+2,f,c
  8979  005BD6  0E80               	movlw	128
  8980  005BD8  1A15               	xorwf	___flge@ff2+3,f,c
  8981  005BDA  5012               	movf	___flge@ff2,w,c
  8982  005BDC  5C0E               	subwf	___flge@ff1,w,c
  8983  005BDE  5013               	movf	___flge@ff2+1,w,c
  8984  005BE0  580F               	subwfb	___flge@ff1+1,w,c
  8985  005BE2  5014               	movf	___flge@ff2+2,w,c
  8986  005BE4  5810               	subwfb	___flge@ff1+2,w,c
  8987  005BE6  5015               	movf	___flge@ff2+3,w,c
  8988  005BE8  5811               	subwfb	___flge@ff1+3,w,c
  8989  005BEA  B0D8               	btfsc	16344,0,c
  8990  005BEC  D002               	goto	l5892
  8991  005BEE  90D8               	bcf	16344,0,c
  8992  005BF0  0012               	return	
  8993  005BF2                     l5892:
  8994  005BF2  80D8               	bsf	16344,0,c
  8995  005BF4  0012               	return	
  8996  005BF6                     __end_of___flge:
  8997                           	opt stack 0
  8998                           
  8999 ;; *************** function ___fldiv *****************
  9000 ;; Defined at:
  9001 ;;		line 11 in file "D:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\sprcdiv.c"
  9002 ;; Parameters:    Size  Location     Type
  9003 ;;  b               4   27[COMRAM] unsigned char 
  9004 ;;  a               4   31[COMRAM] unsigned char 
  9005 ;; Auto vars:     Size  Location     Type
  9006 ;;  grs             4   46[COMRAM] unsigned long 
  9007 ;;  rem             4   40[COMRAM] unsigned long 
  9008 ;;  new_exp         2   44[COMRAM] int 
  9009 ;;  aexp            1   51[COMRAM] unsigned char 
  9010 ;;  bexp            1   50[COMRAM] unsigned char 
  9011 ;;  sign            1   39[COMRAM] unsigned char 
  9012 ;; Return value:  Size  Location     Type
  9013 ;;                  4   27[COMRAM] unsigned char 
  9014 ;; Registers used:
  9015 ;;		wreg, status,2, status,0
  9016 ;; Tracked objects:
  9017 ;;		On entry : 0/0
  9018 ;;		On exit  : 0/0
  9019 ;;		Unchanged: 0/0
  9020 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
  9021 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  9022 ;;      Locals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  9023 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  9024 ;;      Totals:        25       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  9025 ;;Total ram usage:       25 bytes
  9026 ;; Hardware stack levels used:    1
  9027 ;; Hardware stack levels required when called:    6
  9028 ;; This function calls:
  9029 ;;		Nothing
  9030 ;; This function is called by:
  9031 ;;		_rad_calculation_auto
  9032 ;;		_rad_calculation_manual
  9033 ;;		_next_rad_calculation_manual
  9034 ;;		_real_rad_calculation
  9035 ;;		_atan
  9036 ;;		_sin
  9037 ;; This function uses a non-reentrant model
  9038 ;;
  9039                           
  9040                           	psect	text27
  9041  004A8A                     __ptext27:
  9042                           	opt stack 0
  9043  004A8A                     ___fldiv:
  9044                           	opt stack 23
  9045                           
  9046                           ;incstack = 0
  9047  004A8A  501F               	movf	___fldiv@b+3,w,c
  9048  004A8C  0B80               	andlw	128
  9049  004A8E  6E28               	movwf	___fldiv@sign,c
  9050  004A90  501F               	movf	___fldiv@b+3,w,c
  9051  004A92  241F               	addwf	___fldiv@b+3,w,c
  9052  004A94  6E33               	movwf	___fldiv@bexp,c
  9053  004A96  BE1E               	btfsc	___fldiv@b+2,7,c
  9054  004A98  8033               	bsf	___fldiv@bexp,0,c
  9055  004A9A  5033               	movf	___fldiv@bexp,w,c
  9056  004A9C  B4D8               	btfsc	16344,2,c
  9057  004A9E  D00D               	goto	l1646
  9058  004AA0  2833               	incf	___fldiv@bexp,w,c
  9059  004AA2  A4D8               	btfss	16344,2,c
  9060  004AA4  D008               	goto	l1647
  9061  004AA6  0E00               	movlw	0
  9062  004AA8  6E1C               	movwf	___fldiv@b,c
  9063  004AAA  0E00               	movlw	0
  9064  004AAC  6E1D               	movwf	___fldiv@b+1,c
  9065  004AAE  0E00               	movlw	0
  9066  004AB0  6E1E               	movwf	___fldiv@b+2,c
  9067  004AB2  0E00               	movlw	0
  9068  004AB4  6E1F               	movwf	___fldiv@b+3,c
  9069  004AB6                     l1647:
  9070  004AB6  8E1E               	bsf	___fldiv@b+2,7,c
  9071  004AB8  D006               	goto	L16
  9072  004ABA                     l1646:
  9073  004ABA  0E00               	movlw	0
  9074  004ABC  6E1C               	movwf	___fldiv@b,c
  9075  004ABE  0E00               	movlw	0
  9076  004AC0  6E1D               	movwf	___fldiv@b+1,c
  9077  004AC2  0E00               	movlw	0
  9078  004AC4  6E1E               	movwf	___fldiv@b+2,c
  9079  004AC6                     L16:
  9080  004AC6  0E00               	movlw	0
  9081  004AC8  6E1F               	movwf	___fldiv@b+3,c
  9082  004ACA  5023               	movf	___fldiv@a+3,w,c
  9083  004ACC  0B80               	andlw	128
  9084  004ACE  1A28               	xorwf	___fldiv@sign,f,c
  9085  004AD0  5023               	movf	___fldiv@a+3,w,c
  9086  004AD2  2423               	addwf	___fldiv@a+3,w,c
  9087  004AD4  6E34               	movwf	___fldiv@aexp,c
  9088  004AD6  BE22               	btfsc	___fldiv@a+2,7,c
  9089  004AD8  8034               	bsf	___fldiv@aexp,0,c
  9090  004ADA  5034               	movf	___fldiv@aexp,w,c
  9091  004ADC  B4D8               	btfsc	16344,2,c
  9092  004ADE  D00D               	goto	l1650
  9093  004AE0  2834               	incf	___fldiv@aexp,w,c
  9094  004AE2  A4D8               	btfss	16344,2,c
  9095  004AE4  D008               	goto	l1651
  9096  004AE6  0E00               	movlw	0
  9097  004AE8  6E20               	movwf	___fldiv@a,c
  9098  004AEA  0E00               	movlw	0
  9099  004AEC  6E21               	movwf	___fldiv@a+1,c
  9100  004AEE  0E00               	movlw	0
  9101  004AF0  6E22               	movwf	___fldiv@a+2,c
  9102  004AF2  0E00               	movlw	0
  9103  004AF4  6E23               	movwf	___fldiv@a+3,c
  9104  004AF6                     l1651:
  9105  004AF6  8E22               	bsf	___fldiv@a+2,7,c
  9106  004AF8  D006               	goto	L17
  9107  004AFA                     l1650:
  9108  004AFA  0E00               	movlw	0
  9109  004AFC  6E20               	movwf	___fldiv@a,c
  9110  004AFE  0E00               	movlw	0
  9111  004B00  6E21               	movwf	___fldiv@a+1,c
  9112  004B02  0E00               	movlw	0
  9113  004B04  6E22               	movwf	___fldiv@a+2,c
  9114  004B06                     L17:
  9115  004B06  0E00               	movlw	0
  9116  004B08  6E23               	movwf	___fldiv@a+3,c
  9117  004B0A  5020               	movf	___fldiv@a,w,c
  9118  004B0C  1021               	iorwf	___fldiv@a+1,w,c
  9119  004B0E  1022               	iorwf	___fldiv@a+2,w,c
  9120  004B10  1023               	iorwf	___fldiv@a+3,w,c
  9121  004B12  A4D8               	btfss	16344,2,c
  9122  004B14  D019               	goto	l1653
  9123  004B16  0E00               	movlw	0
  9124  004B18  6E1C               	movwf	___fldiv@b,c
  9125  004B1A  0E00               	movlw	0
  9126  004B1C  6E1D               	movwf	___fldiv@b+1,c
  9127  004B1E  0E00               	movlw	0
  9128  004B20  6E1E               	movwf	___fldiv@b+2,c
  9129  004B22  0E00               	movlw	0
  9130  004B24  6E1F               	movwf	___fldiv@b+3,c
  9131  004B26  0E80               	movlw	128
  9132  004B28  121E               	iorwf	___fldiv@b+2,f,c
  9133  004B2A  0E7F               	movlw	127
  9134  004B2C  121F               	iorwf	___fldiv@b+3,f,c
  9135  004B2E  0060  F070  F01C   	movff	___fldiv@b,?___fldiv
  9136  004B34  0060  F074  F01D   	movff	___fldiv@b+1,?___fldiv+1
  9137  004B3A  0060  F078  F01E   	movff	___fldiv@b+2,?___fldiv+2
  9138  004B40  0060  F07C  F01F   	movff	___fldiv@b+3,?___fldiv+3
  9139  004B46  0012               	return	
  9140  004B48                     l1653:
  9141  004B48  5033               	movf	___fldiv@bexp,w,c
  9142  004B4A  A4D8               	btfss	16344,2,c
  9143  004B4C  D015               	goto	l1655
  9144  004B4E  0E00               	movlw	0
  9145  004B50  6E1C               	movwf	___fldiv@b,c
  9146  004B52  0E00               	movlw	0
  9147  004B54  6E1D               	movwf	___fldiv@b+1,c
  9148  004B56  0E00               	movlw	0
  9149  004B58  6E1E               	movwf	___fldiv@b+2,c
  9150  004B5A  0E00               	movlw	0
  9151  004B5C  6E1F               	movwf	___fldiv@b+3,c
  9152  004B5E  0060  F070  F01C   	movff	___fldiv@b,?___fldiv
  9153  004B64  0060  F074  F01D   	movff	___fldiv@b+1,?___fldiv+1
  9154  004B6A  0060  F078  F01E   	movff	___fldiv@b+2,?___fldiv+2
  9155  004B70  0060  F07C  F01F   	movff	___fldiv@b+3,?___fldiv+3
  9156  004B76  0012               	return	
  9157  004B78                     l1655:
  9158  004B78  5034               	movf	___fldiv@aexp,w,c
  9159  004B7A  6E24               	movwf	??___fldiv& (0+255),c
  9160  004B7C  6A25               	clrf	(??___fldiv+1)& (0+255),c
  9161  004B7E  1E24               	comf	??___fldiv,f,c
  9162  004B80  1E25               	comf	??___fldiv+1,f,c
  9163  004B82  4A24               	infsnz	??___fldiv,f,c
  9164  004B84  2A25               	incf	??___fldiv+1,f,c
  9165  004B86  5033               	movf	___fldiv@bexp,w,c
  9166  004B88  6E26               	movwf	(??___fldiv+2)& (0+255),c
  9167  004B8A  6A27               	clrf	(??___fldiv+3)& (0+255),c
  9168  004B8C  5024               	movf	??___fldiv,w,c
  9169  004B8E  2626               	addwf	??___fldiv+2,f,c
  9170  004B90  5025               	movf	??___fldiv+1,w,c
  9171  004B92  2227               	addwfc	??___fldiv+3,f,c
  9172  004B94  0E7F               	movlw	127
  9173  004B96  2426               	addwf	??___fldiv+2,w,c
  9174  004B98  6E2D               	movwf	___fldiv@new_exp,c
  9175  004B9A  0E00               	movlw	0
  9176  004B9C  2027               	addwfc	??___fldiv+3,w,c
  9177  004B9E  6E2E               	movwf	___fldiv@new_exp+1,c
  9178  004BA0  0060  F070  F029   	movff	___fldiv@b,___fldiv@rem
  9179  004BA6  0060  F074  F02A   	movff	___fldiv@b+1,___fldiv@rem+1
  9180  004BAC  0060  F078  F02B   	movff	___fldiv@b+2,___fldiv@rem+2
  9181  004BB2  0060  F07C  F02C   	movff	___fldiv@b+3,___fldiv@rem+3
  9182  004BB8  0E00               	movlw	0
  9183  004BBA  6E1C               	movwf	___fldiv@b,c
  9184  004BBC  0E00               	movlw	0
  9185  004BBE  6E1D               	movwf	___fldiv@b+1,c
  9186  004BC0  0E00               	movlw	0
  9187  004BC2  6E1E               	movwf	___fldiv@b+2,c
  9188  004BC4  0E00               	movlw	0
  9189  004BC6  6E1F               	movwf	___fldiv@b+3,c
  9190  004BC8  0E00               	movlw	0
  9191  004BCA  6E2F               	movwf	___fldiv@grs,c
  9192  004BCC  0E00               	movlw	0
  9193  004BCE  6E30               	movwf	___fldiv@grs+1,c
  9194  004BD0  0E00               	movlw	0
  9195  004BD2  6E31               	movwf	___fldiv@grs+2,c
  9196  004BD4  0E00               	movlw	0
  9197  004BD6  6E32               	movwf	___fldiv@grs+3,c
  9198  004BD8  0E00               	movlw	0
  9199  004BDA  6E34               	movwf	___fldiv@aexp,c
  9200  004BDC  D028               	goto	l1656
  9201  004BDE  5034               	movf	___fldiv@aexp,w,c
  9202  004BE0  B4D8               	btfsc	16344,2,c
  9203  004BE2  D011               	goto	l1658
  9204  004BE4  90D8               	bcf	16344,0,c
  9205  004BE6  3629               	rlcf	___fldiv@rem,f,c
  9206  004BE8  362A               	rlcf	___fldiv@rem+1,f,c
  9207  004BEA  362B               	rlcf	___fldiv@rem+2,f,c
  9208  004BEC  362C               	rlcf	___fldiv@rem+3,f,c
  9209  004BEE  90D8               	bcf	16344,0,c
  9210  004BF0  361C               	rlcf	___fldiv@b,f,c
  9211  004BF2  361D               	rlcf	___fldiv@b+1,f,c
  9212  004BF4  361E               	rlcf	___fldiv@b+2,f,c
  9213  004BF6  361F               	rlcf	___fldiv@b+3,f,c
  9214  004BF8  BE32               	btfsc	___fldiv@grs+3,7,c
  9215  004BFA  801C               	bsf	___fldiv@b,0,c
  9216  004BFC  90D8               	bcf	16344,0,c
  9217  004BFE  362F               	rlcf	___fldiv@grs,f,c
  9218  004C00  3630               	rlcf	___fldiv@grs+1,f,c
  9219  004C02  3631               	rlcf	___fldiv@grs+2,f,c
  9220  004C04  3632               	rlcf	___fldiv@grs+3,f,c
  9221  004C06                     l1658:
  9222  004C06  5020               	movf	___fldiv@a,w,c
  9223  004C08  5C29               	subwf	___fldiv@rem,w,c
  9224  004C0A  5021               	movf	___fldiv@a+1,w,c
  9225  004C0C  582A               	subwfb	___fldiv@rem+1,w,c
  9226  004C0E  5022               	movf	___fldiv@a+2,w,c
  9227  004C10  582B               	subwfb	___fldiv@rem+2,w,c
  9228  004C12  5023               	movf	___fldiv@a+3,w,c
  9229  004C14  582C               	subwfb	___fldiv@rem+3,w,c
  9230  004C16  A0D8               	btfss	16344,0,c
  9231  004C18  D009               	goto	l1660
  9232  004C1A  8C32               	bsf	___fldiv@grs+3,6,c
  9233  004C1C  5020               	movf	___fldiv@a,w,c
  9234  004C1E  5E29               	subwf	___fldiv@rem,f,c
  9235  004C20  5021               	movf	___fldiv@a+1,w,c
  9236  004C22  5A2A               	subwfb	___fldiv@rem+1,f,c
  9237  004C24  5022               	movf	___fldiv@a+2,w,c
  9238  004C26  5A2B               	subwfb	___fldiv@rem+2,f,c
  9239  004C28  5023               	movf	___fldiv@a+3,w,c
  9240  004C2A  5A2C               	subwfb	___fldiv@rem+3,f,c
  9241  004C2C                     l1660:
  9242  004C2C  2A34               	incf	___fldiv@aexp,f,c
  9243  004C2E                     l1656:
  9244  004C2E  0E19               	movlw	25
  9245  004C30  6434               	cpfsgt	___fldiv@aexp,c
  9246  004C32  D7D5               	goto	l1657
  9247  004C34  5029               	movf	___fldiv@rem,w,c
  9248  004C36  102A               	iorwf	___fldiv@rem+1,w,c
  9249  004C38  102B               	iorwf	___fldiv@rem+2,w,c
  9250  004C3A  102C               	iorwf	___fldiv@rem+3,w,c
  9251  004C3C  B4D8               	btfsc	16344,2,c
  9252  004C3E  D011               	goto	l1663
  9253  004C40  802F               	bsf	___fldiv@grs,0,c
  9254  004C42  D00F               	goto	l1663
  9255  004C44  90D8               	bcf	16344,0,c
  9256  004C46  361C               	rlcf	___fldiv@b,f,c
  9257  004C48  361D               	rlcf	___fldiv@b+1,f,c
  9258  004C4A  361E               	rlcf	___fldiv@b+2,f,c
  9259  004C4C  361F               	rlcf	___fldiv@b+3,f,c
  9260  004C4E  BE32               	btfsc	___fldiv@grs+3,7,c
  9261  004C50  801C               	bsf	___fldiv@b,0,c
  9262  004C52  90D8               	bcf	16344,0,c
  9263  004C54  362F               	rlcf	___fldiv@grs,f,c
  9264  004C56  3630               	rlcf	___fldiv@grs+1,f,c
  9265  004C58  3631               	rlcf	___fldiv@grs+2,f,c
  9266  004C5A  3632               	rlcf	___fldiv@grs+3,f,c
  9267  004C5C  062D               	decf	___fldiv@new_exp,f,c
  9268  004C5E  A0D8               	btfss	16344,0,c
  9269  004C60  062E               	decf	___fldiv@new_exp+1,f,c
  9270  004C62                     l1663:
  9271  004C62  AE1E               	btfss	___fldiv@b+2,7,c
  9272  004C64  D7EF               	goto	l1664
  9273  004C66  0E00               	movlw	0
  9274  004C68  6E34               	movwf	___fldiv@aexp,c
  9275  004C6A  AE32               	btfss	___fldiv@grs+3,7,c
  9276  004C6C  D016               	goto	l1670
  9277  004C6E  0EFF               	movlw	255
  9278  004C70  142F               	andwf	___fldiv@grs,w,c
  9279  004C72  6E24               	movwf	??___fldiv& (0+255),c
  9280  004C74  0EFF               	movlw	255
  9281  004C76  1430               	andwf	___fldiv@grs+1,w,c
  9282  004C78  6E25               	movwf	(??___fldiv+1)& (0+255),c
  9283  004C7A  0EFF               	movlw	255
  9284  004C7C  1431               	andwf	___fldiv@grs+2,w,c
  9285  004C7E  6E26               	movwf	(??___fldiv+2)& (0+255),c
  9286  004C80  0E7F               	movlw	127
  9287  004C82  1432               	andwf	___fldiv@grs+3,w,c
  9288  004C84  6E27               	movwf	(??___fldiv+3)& (0+255),c
  9289  004C86  5024               	movf	??___fldiv,w,c
  9290  004C88  1025               	iorwf	??___fldiv+1,w,c
  9291  004C8A  1026               	iorwf	??___fldiv+2,w,c
  9292  004C8C  1027               	iorwf	??___fldiv+3,w,c
  9293  004C8E  A4D8               	btfss	16344,2,c
  9294  004C90  D002               	goto	u6560
  9295  004C92  A01C               	btfss	___fldiv@b,0,c
  9296  004C94  D002               	goto	l1670
  9297  004C96                     u6560:
  9298  004C96  0E01               	movlw	1
  9299  004C98  6E34               	movwf	___fldiv@aexp,c
  9300  004C9A                     l1670:
  9301  004C9A  5034               	movf	___fldiv@aexp,w,c
  9302  004C9C  B4D8               	btfsc	16344,2,c
  9303  004C9E  D027               	goto	l1672
  9304  004CA0  0E01               	movlw	1
  9305  004CA2  261C               	addwf	___fldiv@b,f,c
  9306  004CA4  0E00               	movlw	0
  9307  004CA6  221D               	addwfc	___fldiv@b+1,f,c
  9308  004CA8  221E               	addwfc	___fldiv@b+2,f,c
  9309  004CAA  221F               	addwfc	___fldiv@b+3,f,c
  9310  004CAC  A01F               	btfss	___fldiv@b+3,0,c
  9311  004CAE  D01F               	goto	l1672
  9312  004CB0  0060  F070  F024   	movff	___fldiv@b,??___fldiv
  9313  004CB6  0060  F074  F025   	movff	___fldiv@b+1,??___fldiv+1
  9314  004CBC  0060  F078  F026   	movff	___fldiv@b+2,??___fldiv+2
  9315  004CC2  0060  F07C  F027   	movff	___fldiv@b+3,??___fldiv+3
  9316  004CC8  3427               	rlcf	??___fldiv+3,w,c
  9317  004CCA  3227               	rrcf	??___fldiv+3,f,c
  9318  004CCC  3226               	rrcf	??___fldiv+2,f,c
  9319  004CCE  3225               	rrcf	??___fldiv+1,f,c
  9320  004CD0  3224               	rrcf	??___fldiv,f,c
  9321  004CD2  0060  F090  F01C   	movff	??___fldiv,___fldiv@b
  9322  004CD8  0060  F094  F01D   	movff	??___fldiv+1,___fldiv@b+1
  9323  004CDE  0060  F098  F01E   	movff	??___fldiv+2,___fldiv@b+2
  9324  004CE4  0060  F09C  F01F   	movff	??___fldiv+3,___fldiv@b+3
  9325  004CEA  4A2D               	infsnz	___fldiv@new_exp,f,c
  9326  004CEC  2A2E               	incf	___fldiv@new_exp+1,f,c
  9327  004CEE                     l1672:
  9328  004CEE  BE2E               	btfsc	___fldiv@new_exp+1,7,c
  9329  004CF0  D010               	goto	l1673
  9330  004CF2  502E               	movf	___fldiv@new_exp+1,w,c
  9331  004CF4  E103               	bnz	u6590
  9332  004CF6  282D               	incf	___fldiv@new_exp,w,c
  9333  004CF8  A0D8               	btfss	16344,0,c
  9334  004CFA  D00B               	goto	l1673
  9335  004CFC                     u6590:
  9336  004CFC  0E00               	movlw	0
  9337  004CFE  6E2E               	movwf	___fldiv@new_exp+1,c
  9338  004D00  682D               	setf	___fldiv@new_exp,c
  9339  004D02  0E00               	movlw	0
  9340  004D04  6E1C               	movwf	___fldiv@b,c
  9341  004D06  0E00               	movlw	0
  9342  004D08  6E1D               	movwf	___fldiv@b+1,c
  9343  004D0A  0E00               	movlw	0
  9344  004D0C  6E1E               	movwf	___fldiv@b+2,c
  9345  004D0E  0E00               	movlw	0
  9346  004D10  6E1F               	movwf	___fldiv@b+3,c
  9347  004D12                     l1673:
  9348  004D12  BE2E               	btfsc	___fldiv@new_exp+1,7,c
  9349  004D14  D005               	goto	u6600
  9350  004D16  502E               	movf	___fldiv@new_exp+1,w,c
  9351  004D18  E111               	bnz	l6472
  9352  004D1A  042D               	decf	___fldiv@new_exp,w,c
  9353  004D1C  B0D8               	btfsc	16344,0,c
  9354  004D1E  D00E               	goto	l1674
  9355  004D20                     u6600:
  9356  004D20  0E00               	movlw	0
  9357  004D22  6E2E               	movwf	___fldiv@new_exp+1,c
  9358  004D24  0E00               	movlw	0
  9359  004D26  6E2D               	movwf	___fldiv@new_exp,c
  9360  004D28  0E00               	movlw	0
  9361  004D2A  6E1C               	movwf	___fldiv@b,c
  9362  004D2C  0E00               	movlw	0
  9363  004D2E  6E1D               	movwf	___fldiv@b+1,c
  9364  004D30  0E00               	movlw	0
  9365  004D32  6E1E               	movwf	___fldiv@b+2,c
  9366  004D34  0E00               	movlw	0
  9367  004D36  6E1F               	movwf	___fldiv@b+3,c
  9368  004D38  0E00               	movlw	0
  9369  004D3A  6E28               	movwf	___fldiv@sign,c
  9370  004D3C                     l1674:
  9371  004D3C                     l6472:
  9372  004D3C  0060  F0B4  F033   	movff	___fldiv@new_exp,___fldiv@bexp
  9373  004D42  A033               	btfss	___fldiv@bexp,0,c
  9374  004D44  D002               	goto	l1675
  9375  004D46  8E1E               	bsf	___fldiv@b+2,7,c
  9376  004D48  D001               	goto	l1676
  9377  004D4A                     l1675:
  9378  004D4A  9E1E               	bcf	___fldiv@b+2,7,c
  9379  004D4C                     l1676:
  9380  004D4C  90D8               	bcf	16344,0,c
  9381  004D4E  3033               	rrcf	___fldiv@bexp,w,c
  9382  004D50  6E1F               	movwf	___fldiv@b+3,c
  9383  004D52  5028               	movf	___fldiv@sign,w,c
  9384  004D54  121F               	iorwf	___fldiv@b+3,f,c
  9385  004D56  0060  F070  F01C   	movff	___fldiv@b,?___fldiv
  9386  004D5C  0060  F074  F01D   	movff	___fldiv@b+1,?___fldiv+1
  9387  004D62  0060  F078  F01E   	movff	___fldiv@b+2,?___fldiv+2
  9388  004D68  0060  F07C  F01F   	movff	___fldiv@b+3,?___fldiv+3
  9389  004D6E  0012               	return	
  9390  004D70                     __end_of___fldiv:
  9391                           	opt stack 0
  9392                           
  9393 ;; *************** function _elbow_shoulder_motors_off *****************
  9394 ;; Defined at:
  9395 ;;		line 29 in file "RoboticArm.c"
  9396 ;; Parameters:    Size  Location     Type
  9397 ;;		None
  9398 ;; Auto vars:     Size  Location     Type
  9399 ;;		None
  9400 ;; Return value:  Size  Location     Type
  9401 ;;                  1    wreg      void 
  9402 ;; Registers used:
  9403 ;;		None
  9404 ;; Tracked objects:
  9405 ;;		On entry : 0/0
  9406 ;;		On exit  : 0/0
  9407 ;;		Unchanged: 0/0
  9408 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
  9409 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  9410 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  9411 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  9412 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  9413 ;;Total ram usage:        0 bytes
  9414 ;; Hardware stack levels used:    1
  9415 ;; Hardware stack levels required when called:    6
  9416 ;; This function calls:
  9417 ;;		Nothing
  9418 ;; This function is called by:
  9419 ;;		_main
  9420 ;; This function uses a non-reentrant model
  9421 ;;
  9422                           
  9423                           	psect	text28
  9424  006AFA                     __ptext28:
  9425                           	opt stack 0
  9426  006AFA                     _elbow_shoulder_motors_off:
  9427                           	opt stack 24
  9428                           
  9429                           ;RoboticArm.c: 31: LATC0 = LATC2 = LATC1 = LATC3 = 0;
  9430                           
  9431                           ;incstack = 0
  9432  006AFA  013F               	movlb	63	; () banked
  9433  006AFC  97BC               	bcf	188,3,b	;volatile
  9434  006AFE  93BC               	bcf	188,1,b	;volatile
  9435  006B00  95BC               	bcf	188,2,b	;volatile
  9436  006B02  91BC               	bcf	188,0,b	;volatile
  9437                           
  9438                           ;RoboticArm.c: 32: LATA2 = LATA0 = LATA3 = LATA1 = 0;
  9439  006B04  93BA               	bcf	186,1,b	;volatile
  9440  006B06  97BA               	bcf	186,3,b	;volatile
  9441  006B08  91BA               	bcf	186,0,b	;volatile
  9442  006B0A  95BA               	bcf	186,2,b	;volatile
  9443                           
  9444                           ; BSR set to: 63
  9445  006B0C  0012               	return		;funcret
  9446  006B0E                     __end_of_elbow_shoulder_motors_off:
  9447                           	opt stack 0
  9448                           
  9449 ;; *************** function _base_motors_off *****************
  9450 ;; Defined at:
  9451 ;;		line 36 in file "RoboticArm.c"
  9452 ;; Parameters:    Size  Location     Type
  9453 ;;		None
  9454 ;; Auto vars:     Size  Location     Type
  9455 ;;		None
  9456 ;; Return value:  Size  Location     Type
  9457 ;;                  1    wreg      void 
  9458 ;; Registers used:
  9459 ;;		None
  9460 ;; Tracked objects:
  9461 ;;		On entry : 0/0
  9462 ;;		On exit  : 0/0
  9463 ;;		Unchanged: 0/0
  9464 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
  9465 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  9466 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  9467 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  9468 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  9469 ;;Total ram usage:        0 bytes
  9470 ;; Hardware stack levels used:    1
  9471 ;; Hardware stack levels required when called:    6
  9472 ;; This function calls:
  9473 ;;		Nothing
  9474 ;; This function is called by:
  9475 ;;		_main
  9476 ;; This function uses a non-reentrant model
  9477 ;;
  9478                           
  9479                           	psect	text29
  9480  006B44                     __ptext29:
  9481                           	opt stack 0
  9482  006B44                     _base_motors_off:
  9483                           	opt stack 24
  9484                           
  9485                           ;RoboticArm.c: 38: LATD3 = LATD0 = LATD2 = LATD1 = 0;
  9486                           
  9487                           ; BSR set to: 63
  9488                           ;incstack = 0
  9489  006B44  013F               	movlb	63	; () banked
  9490  006B46  93BD               	bcf	189,1,b	;volatile
  9491  006B48  95BD               	bcf	189,2,b	;volatile
  9492  006B4A  91BD               	bcf	189,0,b	;volatile
  9493  006B4C  97BD               	bcf	189,3,b	;volatile
  9494                           
  9495                           ; BSR set to: 63
  9496  006B4E  0012               	return		;funcret
  9497  006B50                     __end_of_base_motors_off:
  9498                           	opt stack 0
  9499                           
  9500 ;; *************** function _SwitchToRxMode *****************
  9501 ;; Defined at:
  9502 ;;		line 213 in file "RFM70_init_Rx.c"
  9503 ;; Parameters:    Size  Location     Type
  9504 ;;		None
  9505 ;; Auto vars:     Size  Location     Type
  9506 ;;  value           1   17[COMRAM] unsigned char 
  9507 ;; Return value:  Size  Location     Type
  9508 ;;                  1    wreg      void 
  9509 ;; Registers used:
  9510 ;;		wreg, status,2, status,0, cstack
  9511 ;; Tracked objects:
  9512 ;;		On entry : 0/0
  9513 ;;		On exit  : 0/0
  9514 ;;		Unchanged: 0/0
  9515 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
  9516 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  9517 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  9518 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  9519 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  9520 ;;Total ram usage:        1 bytes
  9521 ;; Hardware stack levels used:    1
  9522 ;; Hardware stack levels required when called:    8
  9523 ;; This function calls:
  9524 ;;		_SPI_Read_Reg
  9525 ;;		_SPI_Write_Reg
  9526 ;; This function is called by:
  9527 ;;		_main
  9528 ;; This function uses a non-reentrant model
  9529 ;;
  9530                           
  9531                           	psect	text30
  9532  0064C4                     __ptext30:
  9533                           	opt stack 0
  9534  0064C4                     _SwitchToRxMode:
  9535                           	opt stack 22
  9536                           
  9537                           ;RFM70_init_Rx.c: 215: unsigned char value;
  9538                           ;RFM70_init_Rx.c: 217: SPI_Write_Reg(0xE2,0);
  9539                           
  9540                           ; BSR set to: 63
  9541                           ;incstack = 0
  9542  0064C4  0E00               	movlw	0
  9543  0064C6  6E0F               	movwf	SPI_Write_Reg@value,c
  9544  0064C8  0EE2               	movlw	226
  9545  0064CA  EC11  F035         	call	_SPI_Write_Reg
  9546                           
  9547                           ;RFM70_init_Rx.c: 219: value=SPI_Read_Reg(0x07);
  9548  0064CE  0E07               	movlw	7
  9549  0064D0  EC02  F035         	call	_SPI_Read_Reg
  9550  0064D4  6E12               	movwf	SwitchToRxMode@value,c
  9551                           
  9552                           ;RFM70_init_Rx.c: 220: SPI_Write_Reg(0x20|0x07, value);
  9553  0064D6  0060  F048  F00F   	movff	SwitchToRxMode@value,SPI_Write_Reg@value
  9554  0064DC  0E27               	movlw	39
  9555  0064DE  EC11  F035         	call	_SPI_Write_Reg
  9556                           
  9557                           ;RFM70_init_Rx.c: 222: RB2=0;
  9558  0064E2  013F               	movlb	63	; () banked
  9559  0064E4  95CB               	bcf	203,2,b	;volatile
  9560                           
  9561                           ;RFM70_init_Rx.c: 224: value=SPI_Read_Reg(0x00);
  9562  0064E6  0E00               	movlw	0
  9563  0064E8  EC02  F035         	call	_SPI_Read_Reg
  9564  0064EC  6E12               	movwf	SwitchToRxMode@value,c
  9565                           
  9566                           ;RFM70_init_Rx.c: 226: value=value|0x01;
  9567  0064EE  5012               	movf	SwitchToRxMode@value,w,c
  9568  0064F0  0901               	iorlw	1
  9569  0064F2  6E12               	movwf	SwitchToRxMode@value,c
  9570                           
  9571                           ;RFM70_init_Rx.c: 227: SPI_Write_Reg(0x20 | 0x00, value);
  9572  0064F4  0060  F048  F00F   	movff	SwitchToRxMode@value,SPI_Write_Reg@value
  9573  0064FA  0E20               	movlw	32
  9574  0064FC  EC11  F035         	call	_SPI_Write_Reg
  9575                           
  9576                           ;RFM70_init_Rx.c: 228: RB2=1;
  9577  006500  013F               	movlb	63	; () banked
  9578  006502  85CB               	bsf	203,2,b	;volatile
  9579                           
  9580                           ; BSR set to: 63
  9581  006504  0012               	return		;funcret
  9582  006506                     __end_of_SwitchToRxMode:
  9583                           	opt stack 0
  9584                           
  9585 ;; *************** function _SYSTEM_Initialize *****************
  9586 ;; Defined at:
  9587 ;;		line 50 in file "mcc_generated_files/mcc.c"
  9588 ;; Parameters:    Size  Location     Type
  9589 ;;		None
  9590 ;; Auto vars:     Size  Location     Type
  9591 ;;		None
  9592 ;; Return value:  Size  Location     Type
  9593 ;;                  1    wreg      void 
  9594 ;; Registers used:
  9595 ;;		wreg, status,2, cstack
  9596 ;; Tracked objects:
  9597 ;;		On entry : 0/0
  9598 ;;		On exit  : 0/0
  9599 ;;		Unchanged: 0/0
  9600 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
  9601 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  9602 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  9603 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  9604 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  9605 ;;Total ram usage:        0 bytes
  9606 ;; Hardware stack levels used:    1
  9607 ;; Hardware stack levels required when called:    7
  9608 ;; This function calls:
  9609 ;;		_EXT_INT_Initialize
  9610 ;;		_INTERRUPT_Initialize
  9611 ;;		_OSCILLATOR_Initialize
  9612 ;;		_PIN_MANAGER_Initialize
  9613 ;;		_PMD_Initialize
  9614 ;;		_SPI1_Initialize
  9615 ;;		_TMR1_Initialize
  9616 ;;		_TMR2_Initialize
  9617 ;;		_TMR3_Initialize
  9618 ;;		_TMR4_Initialize
  9619 ;;		_TMR5_Initialize
  9620 ;;		_TMR6_Initialize
  9621 ;; This function is called by:
  9622 ;;		_main
  9623 ;; This function uses a non-reentrant model
  9624 ;;
  9625                           
  9626                           	psect	text31
  9627  00669C                     __ptext31:
  9628                           	opt stack 0
  9629  00669C                     _SYSTEM_Initialize:
  9630                           	opt stack 23
  9631                           
  9632                           ;mcc.c: 52: OSCILLATOR_Initialize();
  9633                           
  9634                           ; BSR set to: 63
  9635                           ;incstack = 0
  9636  00669C  EC37  F035         	call	_OSCILLATOR_Initialize	;wreg free
  9637                           
  9638                           ;mcc.c: 53: PIN_MANAGER_Initialize();
  9639  0066A0  EC83  F030         	call	_PIN_MANAGER_Initialize	;wreg free
  9640                           
  9641                           ;mcc.c: 54: INTERRUPT_Initialize();
  9642  0066A4  EC12  F032         	call	_INTERRUPT_Initialize	;wreg free
  9643                           
  9644                           ;mcc.c: 55: PMD_Initialize();
  9645  0066A8  ECAE  F034         	call	_PMD_Initialize	;wreg free
  9646                           
  9647                           ;mcc.c: 56: TMR6_Initialize();
  9648  0066AC  EC42  F034         	call	_TMR6_Initialize	;wreg free
  9649                           
  9650                           ;mcc.c: 57: TMR3_Initialize();
  9651  0066B0  EC78  F034         	call	_TMR3_Initialize	;wreg free
  9652                           
  9653                           ;mcc.c: 58: TMR4_Initialize();
  9654  0066B4  EC66  F034         	call	_TMR4_Initialize	;wreg free
  9655                           
  9656                           ;mcc.c: 59: TMR5_Initialize();
  9657  0066B8  EC54  F034         	call	_TMR5_Initialize	;wreg free
  9658                           
  9659                           ;mcc.c: 60: TMR2_Initialize();
  9660  0066BC  EC8A  F034         	call	_TMR2_Initialize	;wreg free
  9661                           
  9662                           ;mcc.c: 61: TMR1_Initialize();
  9663  0066C0  EC9C  F034         	call	_TMR1_Initialize	;wreg free
  9664                           
  9665                           ;mcc.c: 62: EXT_INT_Initialize();
  9666  0066C4  EC9B  F035         	call	_EXT_INT_Initialize	;wreg free
  9667                           
  9668                           ;mcc.c: 63: SPI1_Initialize();
  9669  0066C8  EC2B  F035         	call	_SPI1_Initialize	;wreg free
  9670  0066CC  0012               	return		;funcret
  9671  0066CE                     __end_of_SYSTEM_Initialize:
  9672                           	opt stack 0
  9673                           
  9674 ;; *************** function _TMR6_Initialize *****************
  9675 ;; Defined at:
  9676 ;;		line 15 in file "mcc_generated_files/tmr6.c"
  9677 ;; Parameters:    Size  Location     Type
  9678 ;;		None
  9679 ;; Auto vars:     Size  Location     Type
  9680 ;;		None
  9681 ;; Return value:  Size  Location     Type
  9682 ;;                  1    wreg      void 
  9683 ;; Registers used:
  9684 ;;		wreg, status,2
  9685 ;; Tracked objects:
  9686 ;;		On entry : 0/0
  9687 ;;		On exit  : 0/0
  9688 ;;		Unchanged: 0/0
  9689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
  9690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  9691 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  9692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  9693 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  9694 ;;Total ram usage:        0 bytes
  9695 ;; Hardware stack levels used:    1
  9696 ;; Hardware stack levels required when called:    6
  9697 ;; This function calls:
  9698 ;;		Nothing
  9699 ;; This function is called by:
  9700 ;;		_SYSTEM_Initialize
  9701 ;; This function uses a non-reentrant model
  9702 ;;
  9703                           
  9704                           	psect	text32
  9705  006884                     __ptext32:
  9706                           	opt stack 0
  9707  006884                     _TMR6_Initialize:
  9708                           	opt stack 23
  9709                           
  9710                           ;tmr6.c: 20: T6CLKCON = 0x04;
  9711                           
  9712                           ;incstack = 0
  9713  006884  0E04               	movlw	4
  9714  006886  013F               	movlb	63	; () banked
  9715  006888  6F96               	movwf	150,b	;volatile
  9716                           
  9717                           ;tmr6.c: 23: T6HLT = 0xA0;
  9718  00688A  0EA0               	movlw	160
  9719  00688C  6F95               	movwf	149,b	;volatile
  9720                           
  9721                           ;tmr6.c: 26: T6RST = 0x00;
  9722  00688E  0E00               	movlw	0
  9723  006890  6F97               	movwf	151,b	;volatile
  9724                           
  9725                           ;tmr6.c: 29: T6PR = 0x9A;
  9726  006892  0E9A               	movlw	154
  9727  006894  6F93               	movwf	147,b	;volatile
  9728                           
  9729                           ;tmr6.c: 32: T6TMR = 0x00;
  9730  006896  0E00               	movlw	0
  9731  006898  6F92               	movwf	146,b	;volatile
  9732                           
  9733                           ; BSR set to: 63
  9734                           ;tmr6.c: 35: PIR9bits.TMR6IF = 0;
  9735  00689A  0139               	movlb	57	; () banked
  9736  00689C  91A9               	bcf	169,0,b	;volatile
  9737                           
  9738                           ; BSR set to: 57
  9739                           ;tmr6.c: 38: PIE9bits.TMR6IE = 1;
  9740  00689E  8199               	bsf	153,0,b	;volatile
  9741                           
  9742                           ;tmr6.c: 41: T6CON = 0x00;
  9743  0068A0  0E00               	movlw	0
  9744  0068A2  013F               	movlb	63	; () banked
  9745  0068A4  6F94               	movwf	148,b	;volatile
  9746                           
  9747                           ; BSR set to: 63
  9748  0068A6  0012               	return		;funcret
  9749  0068A8                     __end_of_TMR6_Initialize:
  9750                           	opt stack 0
  9751                           
  9752 ;; *************** function _TMR5_Initialize *****************
  9753 ;; Defined at:
  9754 ;;		line 15 in file "mcc_generated_files/tmr5.c"
  9755 ;; Parameters:    Size  Location     Type
  9756 ;;		None
  9757 ;; Auto vars:     Size  Location     Type
  9758 ;;		None
  9759 ;; Return value:  Size  Location     Type
  9760 ;;                  1    wreg      void 
  9761 ;; Registers used:
  9762 ;;		wreg, status,2
  9763 ;; Tracked objects:
  9764 ;;		On entry : 0/0
  9765 ;;		On exit  : 0/0
  9766 ;;		Unchanged: 0/0
  9767 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
  9768 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  9769 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  9770 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  9771 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  9772 ;;Total ram usage:        0 bytes
  9773 ;; Hardware stack levels used:    1
  9774 ;; Hardware stack levels required when called:    6
  9775 ;; This function calls:
  9776 ;;		Nothing
  9777 ;; This function is called by:
  9778 ;;		_SYSTEM_Initialize
  9779 ;; This function uses a non-reentrant model
  9780 ;;
  9781                           
  9782                           	psect	text33
  9783  0068A8                     __ptext33:
  9784                           	opt stack 0
  9785  0068A8                     _TMR5_Initialize:
  9786                           	opt stack 23
  9787                           
  9788                           ;tmr5.c: 20: T5GCON = 0x00;
  9789                           
  9790                           ; BSR set to: 63
  9791                           ;incstack = 0
  9792  0068A8  0E00               	movlw	0
  9793  0068AA  013F               	movlb	63	; () banked
  9794  0068AC  6F9B               	movwf	155,b	;volatile
  9795                           
  9796                           ;tmr5.c: 23: T5GATE = 0x00;
  9797  0068AE  0E00               	movlw	0
  9798  0068B0  6F9C               	movwf	156,b	;volatile
  9799                           
  9800                           ;tmr5.c: 26: T5CLK = 0x02;
  9801  0068B2  0E02               	movlw	2
  9802  0068B4  6F9D               	movwf	157,b	;volatile
  9803                           
  9804                           ;tmr5.c: 29: TMR5H = 0x63;
  9805  0068B6  0E63               	movlw	99
  9806  0068B8  6F99               	movwf	153,b	;volatile
  9807                           
  9808                           ;tmr5.c: 32: TMR5L = 0xC0;
  9809  0068BA  0EC0               	movlw	192
  9810  0068BC  6F98               	movwf	152,b	;volatile
  9811                           
  9812                           ; BSR set to: 63
  9813                           ;tmr5.c: 35: PIR8bits.TMR5IF = 0;
  9814  0068BE  0139               	movlb	57	; () banked
  9815  0068C0  9DA8               	bcf	168,6,b	;volatile
  9816                           
  9817                           ; BSR set to: 57
  9818                           ;tmr5.c: 38: PIE8bits.TMR5IE = 1;
  9819  0068C2  8D98               	bsf	152,6,b	;volatile
  9820                           
  9821                           ;tmr5.c: 41: T5CON = 0x32;
  9822  0068C4  0E32               	movlw	50
  9823  0068C6  013F               	movlb	63	; () banked
  9824  0068C8  6F9A               	movwf	154,b	;volatile
  9825                           
  9826                           ; BSR set to: 63
  9827  0068CA  0012               	return		;funcret
  9828  0068CC                     __end_of_TMR5_Initialize:
  9829                           	opt stack 0
  9830                           
  9831 ;; *************** function _TMR4_Initialize *****************
  9832 ;; Defined at:
  9833 ;;		line 15 in file "mcc_generated_files/tmr4.c"
  9834 ;; Parameters:    Size  Location     Type
  9835 ;;		None
  9836 ;; Auto vars:     Size  Location     Type
  9837 ;;		None
  9838 ;; Return value:  Size  Location     Type
  9839 ;;                  1    wreg      void 
  9840 ;; Registers used:
  9841 ;;		wreg, status,2
  9842 ;; Tracked objects:
  9843 ;;		On entry : 0/0
  9844 ;;		On exit  : 0/0
  9845 ;;		Unchanged: 0/0
  9846 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
  9847 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  9848 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  9849 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  9850 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  9851 ;;Total ram usage:        0 bytes
  9852 ;; Hardware stack levels used:    1
  9853 ;; Hardware stack levels required when called:    6
  9854 ;; This function calls:
  9855 ;;		Nothing
  9856 ;; This function is called by:
  9857 ;;		_SYSTEM_Initialize
  9858 ;; This function uses a non-reentrant model
  9859 ;;
  9860                           
  9861                           	psect	text34
  9862  0068CC                     __ptext34:
  9863                           	opt stack 0
  9864  0068CC                     _TMR4_Initialize:
  9865                           	opt stack 23
  9866                           
  9867                           ;tmr4.c: 20: T4CLKCON = 0x04;
  9868                           
  9869                           ; BSR set to: 63
  9870                           ;incstack = 0
  9871  0068CC  0E04               	movlw	4
  9872  0068CE  013F               	movlb	63	; () banked
  9873  0068D0  6FA2               	movwf	162,b	;volatile
  9874                           
  9875                           ;tmr4.c: 23: T4HLT = 0xA0;
  9876  0068D2  0EA0               	movlw	160
  9877  0068D4  6FA1               	movwf	161,b	;volatile
  9878                           
  9879                           ;tmr4.c: 26: T4RST = 0x00;
  9880  0068D6  0E00               	movlw	0
  9881  0068D8  6FA3               	movwf	163,b	;volatile
  9882                           
  9883                           ;tmr4.c: 29: T4PR = 0x9A;
  9884  0068DA  0E9A               	movlw	154
  9885  0068DC  6F9F               	movwf	159,b	;volatile
  9886                           
  9887                           ;tmr4.c: 32: T4TMR = 0x00;
  9888  0068DE  0E00               	movlw	0
  9889  0068E0  6F9E               	movwf	158,b	;volatile
  9890                           
  9891                           ; BSR set to: 63
  9892                           ;tmr4.c: 35: PIR7bits.TMR4IF = 0;
  9893  0068E2  0139               	movlb	57	; () banked
  9894  0068E4  91A7               	bcf	167,0,b	;volatile
  9895                           
  9896                           ; BSR set to: 57
  9897                           ;tmr4.c: 38: PIE7bits.TMR4IE = 1;
  9898  0068E6  8197               	bsf	151,0,b	;volatile
  9899                           
  9900                           ;tmr4.c: 41: T4CON = 0x00;
  9901  0068E8  0E00               	movlw	0
  9902  0068EA  013F               	movlb	63	; () banked
  9903  0068EC  6FA0               	movwf	160,b	;volatile
  9904                           
  9905                           ; BSR set to: 63
  9906  0068EE  0012               	return		;funcret
  9907  0068F0                     __end_of_TMR4_Initialize:
  9908                           	opt stack 0
  9909                           
  9910 ;; *************** function _TMR3_Initialize *****************
  9911 ;; Defined at:
  9912 ;;		line 15 in file "mcc_generated_files/tmr3.c"
  9913 ;; Parameters:    Size  Location     Type
  9914 ;;		None
  9915 ;; Auto vars:     Size  Location     Type
  9916 ;;		None
  9917 ;; Return value:  Size  Location     Type
  9918 ;;                  1    wreg      void 
  9919 ;; Registers used:
  9920 ;;		wreg, status,2
  9921 ;; Tracked objects:
  9922 ;;		On entry : 0/0
  9923 ;;		On exit  : 0/0
  9924 ;;		Unchanged: 0/0
  9925 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
  9926 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  9927 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  9928 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  9929 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
  9930 ;;Total ram usage:        0 bytes
  9931 ;; Hardware stack levels used:    1
  9932 ;; Hardware stack levels required when called:    6
  9933 ;; This function calls:
  9934 ;;		Nothing
  9935 ;; This function is called by:
  9936 ;;		_SYSTEM_Initialize
  9937 ;; This function uses a non-reentrant model
  9938 ;;
  9939                           
  9940                           	psect	text35
  9941  0068F0                     __ptext35:
  9942                           	opt stack 0
  9943  0068F0                     _TMR3_Initialize:
  9944                           	opt stack 23
  9945                           
  9946                           ;tmr3.c: 20: T3GCON = 0x00;
  9947                           
  9948                           ; BSR set to: 63
  9949                           ;incstack = 0
  9950  0068F0  0E00               	movlw	0
  9951  0068F2  013F               	movlb	63	; () banked
  9952  0068F4  6FA7               	movwf	167,b	;volatile
  9953                           
  9954                           ;tmr3.c: 23: T3GATE = 0x00;
  9955  0068F6  0E00               	movlw	0
  9956  0068F8  6FA8               	movwf	168,b	;volatile
  9957                           
  9958                           ;tmr3.c: 26: T3CLK = 0x02;
  9959  0068FA  0E02               	movlw	2
  9960  0068FC  6FA9               	movwf	169,b	;volatile
  9961                           
  9962                           ;tmr3.c: 29: TMR3H = 0x63;
  9963  0068FE  0E63               	movlw	99
  9964  006900  6FA5               	movwf	165,b	;volatile
  9965                           
  9966                           ;tmr3.c: 32: TMR3L = 0xC0;
  9967  006902  0EC0               	movlw	192
  9968  006904  6FA4               	movwf	164,b	;volatile
  9969                           
  9970                           ; BSR set to: 63
  9971                           ;tmr3.c: 35: PIR6bits.TMR3IF = 0;
  9972  006906  0139               	movlb	57	; () banked
  9973  006908  9DA6               	bcf	166,6,b	;volatile
  9974                           
  9975                           ; BSR set to: 57
  9976                           ;tmr3.c: 38: PIE6bits.TMR3IE = 1;
  9977  00690A  8D96               	bsf	150,6,b	;volatile
  9978                           
  9979                           ;tmr3.c: 41: T3CON = 0x32;
  9980  00690C  0E32               	movlw	50
  9981  00690E  013F               	movlb	63	; () banked
  9982  006910  6FA6               	movwf	166,b	;volatile
  9983                           
  9984                           ; BSR set to: 63
  9985  006912  0012               	return		;funcret
  9986  006914                     __end_of_TMR3_Initialize:
  9987                           	opt stack 0
  9988                           
  9989 ;; *************** function _TMR2_Initialize *****************
  9990 ;; Defined at:
  9991 ;;		line 15 in file "mcc_generated_files/tmr2.c"
  9992 ;; Parameters:    Size  Location     Type
  9993 ;;		None
  9994 ;; Auto vars:     Size  Location     Type
  9995 ;;		None
  9996 ;; Return value:  Size  Location     Type
  9997 ;;                  1    wreg      void 
  9998 ;; Registers used:
  9999 ;;		wreg, status,2
 10000 ;; Tracked objects:
 10001 ;;		On entry : 0/0
 10002 ;;		On exit  : 0/0
 10003 ;;		Unchanged: 0/0
 10004 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
 10005 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 10006 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 10007 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 10008 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 10009 ;;Total ram usage:        0 bytes
 10010 ;; Hardware stack levels used:    1
 10011 ;; Hardware stack levels required when called:    6
 10012 ;; This function calls:
 10013 ;;		Nothing
 10014 ;; This function is called by:
 10015 ;;		_SYSTEM_Initialize
 10016 ;; This function uses a non-reentrant model
 10017 ;;
 10018                           
 10019                           	psect	text36
 10020  006914                     __ptext36:
 10021                           	opt stack 0
 10022  006914                     _TMR2_Initialize:
 10023                           	opt stack 23
 10024                           
 10025                           ;tmr2.c: 20: T2CLKCON = 0x04;
 10026                           
 10027                           ; BSR set to: 63
 10028                           ;incstack = 0
 10029  006914  0E04               	movlw	4
 10030  006916  013F               	movlb	63	; () banked
 10031  006918  6FAE               	movwf	174,b	;volatile
 10032                           
 10033                           ;tmr2.c: 23: T2HLT = 0xA0;
 10034  00691A  0EA0               	movlw	160
 10035  00691C  6FAD               	movwf	173,b	;volatile
 10036                           
 10037                           ;tmr2.c: 26: T2RST = 0x00;
 10038  00691E  0E00               	movlw	0
 10039  006920  6FAF               	movwf	175,b	;volatile
 10040                           
 10041                           ;tmr2.c: 29: T2PR = 0x9A;
 10042  006922  0E9A               	movlw	154
 10043  006924  6FAB               	movwf	171,b	;volatile
 10044                           
 10045                           ;tmr2.c: 32: T2TMR = 0x00;
 10046  006926  0E00               	movlw	0
 10047  006928  6FAA               	movwf	170,b	;volatile
 10048                           
 10049                           ; BSR set to: 63
 10050                           ;tmr2.c: 35: PIR4bits.TMR2IF = 0;
 10051  00692A  0139               	movlb	57	; () banked
 10052  00692C  95A4               	bcf	164,2,b	;volatile
 10053                           
 10054                           ; BSR set to: 57
 10055                           ;tmr2.c: 38: PIE4bits.TMR2IE = 1;
 10056  00692E  8594               	bsf	148,2,b	;volatile
 10057                           
 10058                           ;tmr2.c: 41: T2CON = 0x00;
 10059  006930  0E00               	movlw	0
 10060  006932  013F               	movlb	63	; () banked
 10061  006934  6FAC               	movwf	172,b	;volatile
 10062                           
 10063                           ; BSR set to: 63
 10064  006936  0012               	return		;funcret
 10065  006938                     __end_of_TMR2_Initialize:
 10066                           	opt stack 0
 10067                           
 10068 ;; *************** function _TMR1_Initialize *****************
 10069 ;; Defined at:
 10070 ;;		line 15 in file "mcc_generated_files/tmr1.c"
 10071 ;; Parameters:    Size  Location     Type
 10072 ;;		None
 10073 ;; Auto vars:     Size  Location     Type
 10074 ;;		None
 10075 ;; Return value:  Size  Location     Type
 10076 ;;                  1    wreg      void 
 10077 ;; Registers used:
 10078 ;;		wreg, status,2
 10079 ;; Tracked objects:
 10080 ;;		On entry : 0/0
 10081 ;;		On exit  : 0/0
 10082 ;;		Unchanged: 0/0
 10083 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
 10084 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 10085 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 10086 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 10087 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 10088 ;;Total ram usage:        0 bytes
 10089 ;; Hardware stack levels used:    1
 10090 ;; Hardware stack levels required when called:    6
 10091 ;; This function calls:
 10092 ;;		Nothing
 10093 ;; This function is called by:
 10094 ;;		_SYSTEM_Initialize
 10095 ;; This function uses a non-reentrant model
 10096 ;;
 10097                           
 10098                           	psect	text37
 10099  006938                     __ptext37:
 10100                           	opt stack 0
 10101  006938                     _TMR1_Initialize:
 10102                           	opt stack 23
 10103                           
 10104                           ;tmr1.c: 20: T1GCON = 0x00;
 10105                           
 10106                           ; BSR set to: 63
 10107                           ;incstack = 0
 10108  006938  0E00               	movlw	0
 10109  00693A  013F               	movlb	63	; () banked
 10110  00693C  6FB3               	movwf	179,b	;volatile
 10111                           
 10112                           ;tmr1.c: 23: T1GATE = 0x00;
 10113  00693E  0E00               	movlw	0
 10114  006940  6FB4               	movwf	180,b	;volatile
 10115                           
 10116                           ;tmr1.c: 26: T1CLK = 0x02;
 10117  006942  0E02               	movlw	2
 10118  006944  6FB5               	movwf	181,b	;volatile
 10119                           
 10120                           ;tmr1.c: 29: TMR1H = 0x63;
 10121  006946  0E63               	movlw	99
 10122  006948  6FB1               	movwf	177,b	;volatile
 10123                           
 10124                           ;tmr1.c: 32: TMR1L = 0xC0;
 10125  00694A  0EC0               	movlw	192
 10126  00694C  6FB0               	movwf	176,b	;volatile
 10127                           
 10128                           ; BSR set to: 63
 10129                           ;tmr1.c: 35: PIR4bits.TMR1IF = 0;
 10130  00694E  0139               	movlb	57	; () banked
 10131  006950  91A4               	bcf	164,0,b	;volatile
 10132                           
 10133                           ; BSR set to: 57
 10134                           ;tmr1.c: 38: PIE4bits.TMR1IE = 1;
 10135  006952  8194               	bsf	148,0,b	;volatile
 10136                           
 10137                           ;tmr1.c: 42: T1CON = 0x32;
 10138  006954  0E32               	movlw	50
 10139  006956  013F               	movlb	63	; () banked
 10140  006958  6FB2               	movwf	178,b	;volatile
 10141                           
 10142                           ; BSR set to: 63
 10143  00695A  0012               	return		;funcret
 10144  00695C                     __end_of_TMR1_Initialize:
 10145                           	opt stack 0
 10146                           
 10147 ;; *************** function _SPI1_Initialize *****************
 10148 ;; Defined at:
 10149 ;;		line 21 in file "mcc_generated_files/spi1.c"
 10150 ;; Parameters:    Size  Location     Type
 10151 ;;		None
 10152 ;; Auto vars:     Size  Location     Type
 10153 ;;		None
 10154 ;; Return value:  Size  Location     Type
 10155 ;;                  1    wreg      void 
 10156 ;; Registers used:
 10157 ;;		wreg, status,2
 10158 ;; Tracked objects:
 10159 ;;		On entry : 0/0
 10160 ;;		On exit  : 0/0
 10161 ;;		Unchanged: 0/0
 10162 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
 10163 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 10164 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 10165 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 10166 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 10167 ;;Total ram usage:        0 bytes
 10168 ;; Hardware stack levels used:    1
 10169 ;; Hardware stack levels required when called:    6
 10170 ;; This function calls:
 10171 ;;		Nothing
 10172 ;; This function is called by:
 10173 ;;		_SYSTEM_Initialize
 10174 ;; This function uses a non-reentrant model
 10175 ;;
 10176                           
 10177                           	psect	text38
 10178  006A56                     __ptext38:
 10179                           	opt stack 0
 10180  006A56                     _SPI1_Initialize:
 10181                           	opt stack 23
 10182                           
 10183                           ;spi1.c: 25: SPI1CON1 = 0x40;
 10184                           
 10185                           ; BSR set to: 63
 10186                           ;incstack = 0
 10187  006A56  0E40               	movlw	64
 10188  006A58  013D               	movlb	61	; () banked
 10189  006A5A  6F15               	movwf	21,b	;volatile
 10190                           
 10191                           ;spi1.c: 27: SPI1CON2 = 0x03;
 10192  006A5C  0E03               	movlw	3
 10193  006A5E  6F16               	movwf	22,b	;volatile
 10194                           
 10195                           ;spi1.c: 30: SPI1BAUD = 31;
 10196  006A60  0E1F               	movlw	31
 10197  006A62  6F19               	movwf	25,b	;volatile
 10198                           
 10199                           ;spi1.c: 33: SPI1CLK = 0x01;
 10200  006A64  0E01               	movlw	1
 10201  006A66  6F1C               	movwf	28,b	;volatile
 10202                           
 10203                           ;spi1.c: 36: SPI1CON0 = 0x83;
 10204  006A68  0E83               	movlw	131
 10205  006A6A  6F14               	movwf	20,b	;volatile
 10206                           
 10207                           ; BSR set to: 61
 10208  006A6C  0012               	return		;funcret
 10209  006A6E                     __end_of_SPI1_Initialize:
 10210                           	opt stack 0
 10211                           
 10212 ;; *************** function _PMD_Initialize *****************
 10213 ;; Defined at:
 10214 ;;		line 80 in file "mcc_generated_files/mcc.c"
 10215 ;; Parameters:    Size  Location     Type
 10216 ;;		None
 10217 ;; Auto vars:     Size  Location     Type
 10218 ;;		None
 10219 ;; Return value:  Size  Location     Type
 10220 ;;                  1    wreg      void 
 10221 ;; Registers used:
 10222 ;;		wreg, status,2
 10223 ;; Tracked objects:
 10224 ;;		On entry : 0/0
 10225 ;;		On exit  : 0/0
 10226 ;;		Unchanged: 0/0
 10227 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
 10228 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 10229 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 10230 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 10231 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 10232 ;;Total ram usage:        0 bytes
 10233 ;; Hardware stack levels used:    1
 10234 ;; Hardware stack levels required when called:    6
 10235 ;; This function calls:
 10236 ;;		Nothing
 10237 ;; This function is called by:
 10238 ;;		_SYSTEM_Initialize
 10239 ;; This function uses a non-reentrant model
 10240 ;;
 10241                           
 10242                           	psect	text39
 10243  00695C                     __ptext39:
 10244                           	opt stack 0
 10245  00695C                     _PMD_Initialize:
 10246                           	opt stack 23
 10247                           
 10248                           ;mcc.c: 83: PMD0 = 0x00;
 10249                           
 10250                           ; BSR set to: 61
 10251                           ;incstack = 0
 10252  00695C  0E00               	movlw	0
 10253  00695E  0139               	movlb	57	; () banked
 10254  006960  6FC0               	movwf	192,b	;volatile
 10255                           
 10256                           ;mcc.c: 85: PMD1 = 0x00;
 10257  006962  0E00               	movlw	0
 10258  006964  6FC1               	movwf	193,b	;volatile
 10259                           
 10260                           ;mcc.c: 87: PMD2 = 0x00;
 10261  006966  0E00               	movlw	0
 10262  006968  6FC2               	movwf	194,b	;volatile
 10263                           
 10264                           ;mcc.c: 89: PMD3 = 0x00;
 10265  00696A  0E00               	movlw	0
 10266  00696C  6FC3               	movwf	195,b	;volatile
 10267                           
 10268                           ;mcc.c: 91: PMD4 = 0x00;
 10269  00696E  0E00               	movlw	0
 10270  006970  6FC4               	movwf	196,b	;volatile
 10271                           
 10272                           ;mcc.c: 93: PMD5 = 0x00;
 10273  006972  0E00               	movlw	0
 10274  006974  6FC5               	movwf	197,b	;volatile
 10275                           
 10276                           ;mcc.c: 95: PMD6 = 0x00;
 10277  006976  0E00               	movlw	0
 10278  006978  6FC6               	movwf	198,b	;volatile
 10279                           
 10280                           ;mcc.c: 97: PMD7 = 0x00;
 10281  00697A  0E00               	movlw	0
 10282  00697C  6FC7               	movwf	199,b	;volatile
 10283                           
 10284                           ; BSR set to: 57
 10285  00697E  0012               	return		;funcret
 10286  006980                     __end_of_PMD_Initialize:
 10287                           	opt stack 0
 10288                           
 10289 ;; *************** function _PIN_MANAGER_Initialize *****************
 10290 ;; Defined at:
 10291 ;;		line 51 in file "mcc_generated_files/pin_manager.c"
 10292 ;; Parameters:    Size  Location     Type
 10293 ;;		None
 10294 ;; Auto vars:     Size  Location     Type
 10295 ;;		None
 10296 ;; Return value:  Size  Location     Type
 10297 ;;                  1    wreg      void 
 10298 ;; Registers used:
 10299 ;;		wreg, status,2
 10300 ;; Tracked objects:
 10301 ;;		On entry : 0/0
 10302 ;;		On exit  : 0/0
 10303 ;;		Unchanged: 0/0
 10304 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
 10305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 10306 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 10307 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 10308 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 10309 ;;Total ram usage:        0 bytes
 10310 ;; Hardware stack levels used:    1
 10311 ;; Hardware stack levels required when called:    6
 10312 ;; This function calls:
 10313 ;;		Nothing
 10314 ;; This function is called by:
 10315 ;;		_SYSTEM_Initialize
 10316 ;; This function uses a non-reentrant model
 10317 ;;
 10318                           
 10319                           	psect	text40
 10320  006106                     __ptext40:
 10321                           	opt stack 0
 10322  006106                     _PIN_MANAGER_Initialize:
 10323                           	opt stack 23
 10324                           
 10325                           ;pin_manager.c: 56: LATE = 0x00;
 10326                           
 10327                           ; BSR set to: 57
 10328                           ;incstack = 0
 10329  006106  0E00               	movlw	0
 10330  006108  013F               	movlb	63	; () banked
 10331  00610A  6FBE               	movwf	190,b	;volatile
 10332                           
 10333                           ;pin_manager.c: 57: LATD = 0x00;
 10334  00610C  0E00               	movlw	0
 10335  00610E  6FBD               	movwf	189,b	;volatile
 10336                           
 10337                           ;pin_manager.c: 58: LATA = 0x00;
 10338  006110  0E00               	movlw	0
 10339  006112  6FBA               	movwf	186,b	;volatile
 10340                           
 10341                           ;pin_manager.c: 59: LATB = 0x00;
 10342  006114  0E00               	movlw	0
 10343  006116  6FBB               	movwf	187,b	;volatile
 10344                           
 10345                           ;pin_manager.c: 60: LATC = 0x00;
 10346  006118  0E00               	movlw	0
 10347  00611A  6FBC               	movwf	188,b	;volatile
 10348                           
 10349                           ;pin_manager.c: 65: TRISE = 0x04;
 10350  00611C  0E04               	movlw	4
 10351  00611E  6FC6               	movwf	198,b	;volatile
 10352                           
 10353                           ;pin_manager.c: 66: TRISA = 0x00;
 10354  006120  0E00               	movlw	0
 10355  006122  6FC2               	movwf	194,b	;volatile
 10356                           
 10357                           ;pin_manager.c: 67: TRISB = 0xE1;
 10358  006124  0EE1               	movlw	225
 10359  006126  6FC3               	movwf	195,b	;volatile
 10360                           
 10361                           ;pin_manager.c: 68: TRISC = 0x00;
 10362  006128  0E00               	movlw	0
 10363  00612A  6FC4               	movwf	196,b	;volatile
 10364                           
 10365                           ;pin_manager.c: 69: TRISD = 0x00;
 10366  00612C  0E00               	movlw	0
 10367  00612E  6FC5               	movwf	197,b	;volatile
 10368                           
 10369                           ;pin_manager.c: 74: ANSELD = 0x00;
 10370  006130  0E00               	movlw	0
 10371  006132  013A               	movlb	58	; () banked
 10372  006134  6F70               	movwf	112,b	;volatile
 10373                           
 10374                           ;pin_manager.c: 75: ANSELC = 0x00;
 10375  006136  0E00               	movlw	0
 10376  006138  6F60               	movwf	96,b	;volatile
 10377                           
 10378                           ;pin_manager.c: 76: ANSELB = 0xC0;
 10379  00613A  0EC0               	movlw	192
 10380  00613C  6F50               	movwf	80,b	;volatile
 10381                           
 10382                           ;pin_manager.c: 77: ANSELE = 0x00;
 10383  00613E  0E00               	movlw	0
 10384  006140  6F80               	movwf	128,b	;volatile
 10385                           
 10386                           ;pin_manager.c: 78: ANSELA = 0x00;
 10387  006142  0E00               	movlw	0
 10388  006144  6F40               	movwf	64,b	;volatile
 10389                           
 10390                           ;pin_manager.c: 83: WPUD = 0x00;
 10391  006146  0E00               	movlw	0
 10392  006148  6F71               	movwf	113,b	;volatile
 10393                           
 10394                           ;pin_manager.c: 84: WPUE = 0x04;
 10395  00614A  0E04               	movlw	4
 10396  00614C  6F81               	movwf	129,b	;volatile
 10397                           
 10398                           ;pin_manager.c: 85: WPUB = 0x00;
 10399  00614E  0E00               	movlw	0
 10400  006150  6F51               	movwf	81,b	;volatile
 10401                           
 10402                           ;pin_manager.c: 86: WPUA = 0x00;
 10403  006152  0E00               	movlw	0
 10404  006154  6F41               	movwf	65,b	;volatile
 10405                           
 10406                           ;pin_manager.c: 87: WPUC = 0x00;
 10407  006156  0E00               	movlw	0
 10408  006158  6F61               	movwf	97,b	;volatile
 10409                           
 10410                           ;pin_manager.c: 92: RB1I2C = 0x00;
 10411  00615A  0E00               	movlw	0
 10412  00615C  6F5A               	movwf	90,b	;volatile
 10413                           
 10414                           ;pin_manager.c: 93: RB2I2C = 0x00;
 10415  00615E  0E00               	movlw	0
 10416  006160  6F5B               	movwf	91,b	;volatile
 10417                           
 10418                           ;pin_manager.c: 94: RC3I2C = 0x00;
 10419  006162  0E00               	movlw	0
 10420  006164  6F6A               	movwf	106,b	;volatile
 10421                           
 10422                           ;pin_manager.c: 95: RC4I2C = 0x00;
 10423  006166  0E00               	movlw	0
 10424  006168  6F6B               	movwf	107,b	;volatile
 10425                           
 10426                           ;pin_manager.c: 96: RD0I2C = 0x00;
 10427  00616A  0E00               	movlw	0
 10428  00616C  6F7A               	movwf	122,b	;volatile
 10429                           
 10430                           ;pin_manager.c: 97: RD1I2C = 0x00;
 10431  00616E  0E00               	movlw	0
 10432  006170  6F7B               	movwf	123,b	;volatile
 10433                           
 10434                           ;pin_manager.c: 102: ODCONE = 0x00;
 10435  006172  0E00               	movlw	0
 10436  006174  6F82               	movwf	130,b	;volatile
 10437                           
 10438                           ;pin_manager.c: 103: ODCONA = 0x00;
 10439  006176  0E00               	movlw	0
 10440  006178  6F42               	movwf	66,b	;volatile
 10441                           
 10442                           ;pin_manager.c: 104: ODCONB = 0x00;
 10443  00617A  0E00               	movlw	0
 10444  00617C  6F52               	movwf	82,b	;volatile
 10445                           
 10446                           ;pin_manager.c: 105: ODCONC = 0x00;
 10447  00617E  0E00               	movlw	0
 10448  006180  6F62               	movwf	98,b	;volatile
 10449                           
 10450                           ;pin_manager.c: 106: ODCOND = 0x00;
 10451  006182  0E00               	movlw	0
 10452  006184  6F72               	movwf	114,b	;volatile
 10453                           
 10454                           ; BSR set to: 58
 10455                           ;pin_manager.c: 111: SLRCONA = 0xFF;
 10456  006186  6943               	setf	67,b	;volatile
 10457                           
 10458                           ; BSR set to: 58
 10459                           ;pin_manager.c: 112: SLRCONB = 0xFF;
 10460  006188  6953               	setf	83,b	;volatile
 10461                           
 10462                           ; BSR set to: 58
 10463                           ;pin_manager.c: 113: SLRCONC = 0xFF;
 10464  00618A  6963               	setf	99,b	;volatile
 10465                           
 10466                           ; BSR set to: 58
 10467                           ;pin_manager.c: 114: SLRCOND = 0xFF;
 10468  00618C  6973               	setf	115,b	;volatile
 10469                           
 10470                           ;pin_manager.c: 115: SLRCONE = 0x07;
 10471  00618E  0E07               	movlw	7
 10472  006190  6F83               	movwf	131,b	;volatile
 10473                           
 10474                           ;pin_manager.c: 117: INLVLB = 0x00;
 10475  006192  0E00               	movlw	0
 10476  006194  6F54               	movwf	84,b	;volatile
 10477                           
 10478                           ;pin_manager.c: 126: SPI1SCKPPS = 0x09;
 10479  006196  0E09               	movlw	9
 10480  006198  6FDE               	movwf	222,b	;volatile
 10481                           
 10482                           ;pin_manager.c: 127: RB1PPS = 0x1E;
 10483  00619A  0E1E               	movlw	30
 10484  00619C  6F09               	movwf	9,b	;volatile
 10485                           
 10486                           ;pin_manager.c: 128: INT0PPS = 0x0D;
 10487  00619E  0E0D               	movlw	13
 10488  0061A0  6FC0               	movwf	192,b	;volatile
 10489                           
 10490                           ;pin_manager.c: 129: RB4PPS = 0x1F;
 10491  0061A2  0E1F               	movlw	31
 10492  0061A4  6F0C               	movwf	12,b	;volatile
 10493                           
 10494                           ;pin_manager.c: 130: SPI1SDIPPS = 0x08;
 10495  0061A6  0E08               	movlw	8
 10496  0061A8  6FDF               	movwf	223,b	;volatile
 10497                           
 10498                           ; BSR set to: 58
 10499  0061AA  0012               	return		;funcret
 10500  0061AC                     __end_of_PIN_MANAGER_Initialize:
 10501                           	opt stack 0
 10502                           
 10503 ;; *************** function _OSCILLATOR_Initialize *****************
 10504 ;; Defined at:
 10505 ;;		line 66 in file "mcc_generated_files/mcc.c"
 10506 ;; Parameters:    Size  Location     Type
 10507 ;;		None
 10508 ;; Auto vars:     Size  Location     Type
 10509 ;;		None
 10510 ;; Return value:  Size  Location     Type
 10511 ;;                  1    wreg      void 
 10512 ;; Registers used:
 10513 ;;		wreg, status,2
 10514 ;; Tracked objects:
 10515 ;;		On entry : 0/0
 10516 ;;		On exit  : 0/0
 10517 ;;		Unchanged: 0/0
 10518 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
 10519 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 10520 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 10521 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 10522 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 10523 ;;Total ram usage:        0 bytes
 10524 ;; Hardware stack levels used:    1
 10525 ;; Hardware stack levels required when called:    6
 10526 ;; This function calls:
 10527 ;;		Nothing
 10528 ;; This function is called by:
 10529 ;;		_SYSTEM_Initialize
 10530 ;; This function uses a non-reentrant model
 10531 ;;
 10532                           
 10533                           	psect	text41
 10534  006A6E                     __ptext41:
 10535                           	opt stack 0
 10536  006A6E                     _OSCILLATOR_Initialize:
 10537                           	opt stack 23
 10538                           
 10539                           ;mcc.c: 69: OSCCON1 = 0x60;
 10540                           
 10541                           ; BSR set to: 58
 10542                           ;incstack = 0
 10543  006A6E  0E60               	movlw	96
 10544  006A70  0139               	movlb	57	; () banked
 10545  006A72  6FD9               	movwf	217,b	;volatile
 10546                           
 10547                           ;mcc.c: 71: OSCCON3 = 0x00;
 10548  006A74  0E00               	movlw	0
 10549  006A76  6FDB               	movwf	219,b	;volatile
 10550                           
 10551                           ;mcc.c: 73: OSCEN = 0x00;
 10552  006A78  0E00               	movlw	0
 10553  006A7A  6FDD               	movwf	221,b	;volatile
 10554                           
 10555                           ;mcc.c: 75: OSCFRQ = 0x08;
 10556  006A7C  0E08               	movlw	8
 10557  006A7E  6FDF               	movwf	223,b	;volatile
 10558                           
 10559                           ;mcc.c: 77: OSCTUNE = 0x00;
 10560  006A80  0E00               	movlw	0
 10561  006A82  6FDE               	movwf	222,b	;volatile
 10562                           
 10563                           ; BSR set to: 57
 10564  006A84  0012               	return		;funcret
 10565  006A86                     __end_of_OSCILLATOR_Initialize:
 10566                           	opt stack 0
 10567                           
 10568 ;; *************** function _INTERRUPT_Initialize *****************
 10569 ;; Defined at:
 10570 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 10571 ;; Parameters:    Size  Location     Type
 10572 ;;		None
 10573 ;; Auto vars:     Size  Location     Type
 10574 ;;  state           1   13[COMRAM] unsigned char 
 10575 ;; Return value:  Size  Location     Type
 10576 ;;                  1    wreg      void 
 10577 ;; Registers used:
 10578 ;;		wreg, status,2
 10579 ;; Tracked objects:
 10580 ;;		On entry : 0/0
 10581 ;;		On exit  : 0/0
 10582 ;;		Unchanged: 0/0
 10583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
 10584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 10585 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 10586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 10587 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 10588 ;;Total ram usage:        1 bytes
 10589 ;; Hardware stack levels used:    1
 10590 ;; Hardware stack levels required when called:    6
 10591 ;; This function calls:
 10592 ;;		Nothing
 10593 ;; This function is called by:
 10594 ;;		_SYSTEM_Initialize
 10595 ;; This function uses a non-reentrant model
 10596 ;;
 10597                           
 10598                           	psect	text42
 10599  006424                     __ptext42:
 10600                           	opt stack 0
 10601  006424                     _INTERRUPT_Initialize:
 10602                           	opt stack 23
 10603                           
 10604                           ;interrupt_manager.c: 54: INTCON0bits.IPEN = 1;
 10605                           
 10606                           ; BSR set to: 57
 10607                           ;incstack = 0
 10608  006424  013F               	movlb	63	; () banked
 10609  006426  8BD2               	bsf	210,5,b	;volatile
 10610                           
 10611                           ; BSR set to: 63
 10612                           ;interrupt_manager.c: 56: bool state = (unsigned char)GIE;
 10613  006428  0E00               	movlw	0
 10614  00642A  BFD2               	btfsc	210,7,b	;volatile
 10615  00642C  0E01               	movlw	1
 10616  00642E  6E0E               	movwf	INTERRUPT_Initialize@state,c
 10617                           
 10618                           ; BSR set to: 63
 10619                           ;interrupt_manager.c: 57: GIE = 0;
 10620  006430  9FD2               	bcf	210,7,b	;volatile
 10621                           
 10622                           ;interrupt_manager.c: 58: IVTLOCK = 0x55;
 10623  006432  0E55               	movlw	85
 10624  006434  6FD4               	movwf	212,b	;volatile
 10625                           
 10626                           ;interrupt_manager.c: 59: IVTLOCK = 0xAA;
 10627  006436  0EAA               	movlw	170
 10628  006438  6FD4               	movwf	212,b	;volatile
 10629                           
 10630                           ; BSR set to: 63
 10631                           ;interrupt_manager.c: 60: IVTLOCKbits.IVTLOCKED = 0x00;
 10632  00643A  91D4               	bcf	212,0,b	;volatile
 10633                           
 10634                           ;interrupt_manager.c: 62: IVTADU = 0;
 10635  00643C  0E00               	movlw	0
 10636  00643E  0138               	movlb	56	; () banked
 10637  006440  6F9F               	movwf	159,b	;volatile
 10638                           
 10639                           ;interrupt_manager.c: 63: IVTADH = 0;
 10640  006442  0E00               	movlw	0
 10641  006444  6F9E               	movwf	158,b	;volatile
 10642                           
 10643                           ;interrupt_manager.c: 64: IVTADL = 8;
 10644  006446  0E08               	movlw	8
 10645  006448  6F9D               	movwf	157,b	;volatile
 10646                           
 10647                           ;interrupt_manager.c: 66: IVTLOCK = 0x55;
 10648  00644A  0E55               	movlw	85
 10649  00644C  013F               	movlb	63	; () banked
 10650  00644E  6FD4               	movwf	212,b	;volatile
 10651                           
 10652                           ;interrupt_manager.c: 67: IVTLOCK = 0xAA;
 10653  006450  0EAA               	movlw	170
 10654  006452  6FD4               	movwf	212,b	;volatile
 10655                           
 10656                           ; BSR set to: 63
 10657                           ;interrupt_manager.c: 68: IVTLOCKbits.IVTLOCKED = 0x01;
 10658  006454  81D4               	bsf	212,0,b	;volatile
 10659                           
 10660                           ; BSR set to: 63
 10661                           ;interrupt_manager.c: 70: GIE = state;
 10662  006456  A00E               	btfss	INTERRUPT_Initialize@state,0,c
 10663  006458  D002               	goto	u4000
 10664  00645A  8FD2               	bsf	210,7,b	;volatile
 10665  00645C  D002               	goto	u4015
 10666  00645E                     u4000:
 10667  00645E  013F               	movlb	63	; () banked
 10668  006460  9FD2               	bcf	210,7,b	;volatile
 10669  006462                     u4015:
 10670                           
 10671                           ; BSR set to: 63
 10672                           ;interrupt_manager.c: 72: IPR1bits.INT0IP = 1;
 10673  006462  0139               	movlb	57	; () banked
 10674  006464  8181               	bsf	129,0,b	;volatile
 10675                           
 10676                           ; BSR set to: 57
 10677                           ;interrupt_manager.c: 73: IPR9bits.TMR6IP = 0;
 10678  006466  9189               	bcf	137,0,b	;volatile
 10679                           
 10680                           ; BSR set to: 57
 10681                           ;interrupt_manager.c: 74: IPR8bits.TMR5IP = 0;
 10682  006468  9D88               	bcf	136,6,b	;volatile
 10683                           
 10684                           ; BSR set to: 57
 10685                           ;interrupt_manager.c: 75: IPR7bits.TMR4IP = 0;
 10686  00646A  9187               	bcf	135,0,b	;volatile
 10687                           
 10688                           ; BSR set to: 57
 10689                           ;interrupt_manager.c: 76: IPR6bits.TMR3IP = 0;
 10690  00646C  9D86               	bcf	134,6,b	;volatile
 10691                           
 10692                           ; BSR set to: 57
 10693                           ;interrupt_manager.c: 77: IPR4bits.TMR2IP = 0;
 10694  00646E  9584               	bcf	132,2,b	;volatile
 10695                           
 10696                           ; BSR set to: 57
 10697                           ;interrupt_manager.c: 78: IPR4bits.TMR1IP = 0;
 10698  006470  9184               	bcf	132,0,b	;volatile
 10699                           
 10700                           ; BSR set to: 57
 10701  006472  0012               	return		;funcret
 10702  006474                     __end_of_INTERRUPT_Initialize:
 10703                           	opt stack 0
 10704                           
 10705 ;; *************** function _EXT_INT_Initialize *****************
 10706 ;; Defined at:
 10707 ;;		line 40 in file "mcc_generated_files/ext_int.c"
 10708 ;; Parameters:    Size  Location     Type
 10709 ;;		None
 10710 ;; Auto vars:     Size  Location     Type
 10711 ;;		None
 10712 ;; Return value:  Size  Location     Type
 10713 ;;                  1    wreg      void 
 10714 ;; Registers used:
 10715 ;;		None
 10716 ;; Tracked objects:
 10717 ;;		On entry : 0/0
 10718 ;;		On exit  : 0/0
 10719 ;;		Unchanged: 0/0
 10720 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
 10721 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 10722 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 10723 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 10724 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 10725 ;;Total ram usage:        0 bytes
 10726 ;; Hardware stack levels used:    1
 10727 ;; Hardware stack levels required when called:    6
 10728 ;; This function calls:
 10729 ;;		Nothing
 10730 ;; This function is called by:
 10731 ;;		_SYSTEM_Initialize
 10732 ;; This function uses a non-reentrant model
 10733 ;;
 10734                           
 10735                           	psect	text43
 10736  006B36                     __ptext43:
 10737                           	opt stack 0
 10738  006B36                     _EXT_INT_Initialize:
 10739                           	opt stack 23
 10740                           
 10741                           ;ext_int.c: 44: (PIR1bits.INT0IF = 0);
 10742                           
 10743                           ; BSR set to: 57
 10744                           ;incstack = 0
 10745  006B36  0139               	movlb	57	; () banked
 10746  006B38  91A1               	bcf	161,0,b	;volatile
 10747                           
 10748                           ;ext_int.c: 45: (INTCON0bits.INT0EDG = 0);
 10749  006B3A  013F               	movlb	63	; () banked
 10750  006B3C  91D2               	bcf	210,0,b	;volatile
 10751                           
 10752                           ;ext_int.c: 47: (PIE1bits.INT0IE = 1);
 10753  006B3E  0139               	movlb	57	; () banked
 10754  006B40  8191               	bsf	145,0,b	;volatile
 10755                           
 10756                           ; BSR set to: 57
 10757  006B42  0012               	return		;funcret
 10758  006B44                     __end_of_EXT_INT_Initialize:
 10759                           	opt stack 0
 10760                           
 10761 ;; *************** function _SEG_start_check *****************
 10762 ;; Defined at:
 10763 ;;		line 209 in file "Functions.c"
 10764 ;; Parameters:    Size  Location     Type
 10765 ;;		None
 10766 ;; Auto vars:     Size  Location     Type
 10767 ;;		None
 10768 ;; Return value:  Size  Location     Type
 10769 ;;                  1    wreg      void 
 10770 ;; Registers used:
 10771 ;;		wreg, status,2, status,0
 10772 ;; Tracked objects:
 10773 ;;		On entry : 0/0
 10774 ;;		On exit  : 0/0
 10775 ;;		Unchanged: 0/0
 10776 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
 10777 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 10778 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 10779 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 10780 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 10781 ;;Total ram usage:        0 bytes
 10782 ;; Hardware stack levels used:    1
 10783 ;; Hardware stack levels required when called:    6
 10784 ;; This function calls:
 10785 ;;		Nothing
 10786 ;; This function is called by:
 10787 ;;		_main
 10788 ;; This function uses a non-reentrant model
 10789 ;;
 10790                           
 10791                           	psect	text44
 10792  006506                     __ptext44:
 10793                           	opt stack 0
 10794  006506                     _SEG_start_check:
 10795                           	opt stack 24
 10796                           
 10797                           ;Functions.c: 211: if(shoulder_steps != 0)
 10798                           
 10799                           ; BSR set to: 57
 10800                           ;incstack = 0
 10801  006506  504D               	movf	_shoulder_steps,w,c
 10802  006508  104E               	iorwf	_shoulder_steps+1,w,c
 10803  00650A  B4D8               	btfsc	16344,2,c
 10804  00650C  D006               	goto	l673
 10805                           
 10806                           ;Functions.c: 212: {
 10807                           ;Functions.c: 213: shoulder_steps_count=0;
 10808  00650E  0E00               	movlw	0
 10809  006510  6E4C               	movwf	_shoulder_steps_count+1,c
 10810  006512  0E00               	movlw	0
 10811  006514  6E4B               	movwf	_shoulder_steps_count,c
 10812                           
 10813                           ;Functions.c: 214: T1CONbits.ON=1;
 10814  006516  013F               	movlb	63	; () banked
 10815  006518  81B2               	bsf	178,0,b	;volatile
 10816  00651A                     l673:
 10817                           
 10818                           ;Functions.c: 215: }
 10819                           ;Functions.c: 217: if(elbow_steps != 0)
 10820                           
 10821                           ; BSR set to: 63
 10822  00651A  0100               	movlb	0	; () banked
 10823  00651C  51E5               	movf	_elbow_steps& (0+255),w,b
 10824  00651E  11E6               	iorwf	(_elbow_steps+1)& (0+255),w,b
 10825  006520  B4D8               	btfsc	16344,2,c
 10826  006522  D006               	goto	l674
 10827                           
 10828                           ; BSR set to: 0
 10829                           ;Functions.c: 218: {
 10830                           ;Functions.c: 219: elbow_steps_count=0;
 10831  006524  0E00               	movlw	0
 10832  006526  6E4A               	movwf	_elbow_steps_count+1,c
 10833  006528  0E00               	movlw	0
 10834  00652A  6E49               	movwf	_elbow_steps_count,c
 10835                           
 10836                           ; BSR set to: 0
 10837                           ;Functions.c: 220: T3CONbits.ON=1;
 10838  00652C  013F               	movlb	63	; () banked
 10839  00652E  81A6               	bsf	166,0,b	;volatile
 10840  006530                     l674:
 10841                           
 10842                           ;Functions.c: 221: }
 10843                           ;Functions.c: 223: if(grip_steps != 0)
 10844                           
 10845                           ; BSR set to: 63
 10846  006530  0100               	movlb	0	; () banked
 10847  006532  51DD               	movf	_grip_steps& (0+255),w,b
 10848  006534  11DE               	iorwf	(_grip_steps+1)& (0+255),w,b
 10849  006536  B4D8               	btfsc	16344,2,c
 10850  006538  0012               	return	
 10851                           
 10852                           ; BSR set to: 0
 10853                           ;Functions.c: 224: {
 10854                           ;Functions.c: 225: grip_steps_count=0;
 10855  00653A  0E00               	movlw	0
 10856  00653C  6E48               	movwf	_grip_steps_count+1,c
 10857  00653E  0E00               	movlw	0
 10858  006540  6E47               	movwf	_grip_steps_count,c
 10859                           
 10860                           ; BSR set to: 0
 10861                           ;Functions.c: 226: T5CONbits.ON=1;
 10862  006542  013F               	movlb	63	; () banked
 10863  006544  819A               	bsf	154,0,b	;volatile
 10864  006546  0012               	return	
 10865  006548                     __end_of_SEG_start_check:
 10866                           	opt stack 0
 10867                           
 10868 ;; *************** function _RFM70_Initialize *****************
 10869 ;; Defined at:
 10870 ;;		line 296 in file "RFM70_init_Rx.c"
 10871 ;; Parameters:    Size  Location     Type
 10872 ;;		None
 10873 ;; Auto vars:     Size  Location     Type
 10874 ;;  WriteArr       12   25[COMRAM] unsigned char [12]
 10875 ;;  j               1   38[COMRAM] unsigned char 
 10876 ;;  i               1   37[COMRAM] unsigned char 
 10877 ;;  temp            1    0        unsigned char 
 10878 ;; Return value:  Size  Location     Type
 10879 ;;                  1    wreg      void 
 10880 ;; Registers used:
 10881 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 10882 ;; Tracked objects:
 10883 ;;		On entry : 0/0
 10884 ;;		On exit  : 0/0
 10885 ;;		Unchanged: 0/0
 10886 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
 10887 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 10888 ;;      Locals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 10889 ;;      Temps:          5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 10890 ;;      Totals:        19       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 10891 ;;Total ram usage:       19 bytes
 10892 ;; Hardware stack levels used:    1
 10893 ;; Hardware stack levels required when called:    9
 10894 ;; This function calls:
 10895 ;;		_SPI_Read_Reg
 10896 ;;		_SPI_Write_Buf
 10897 ;;		_SPI_Write_Reg
 10898 ;;		_SwitchCFG
 10899 ;; This function is called by:
 10900 ;;		_main
 10901 ;; This function uses a non-reentrant model
 10902 ;;
 10903                           
 10904                           	psect	text45
 10905  003526                     __ptext45:
 10906                           	opt stack 0
 10907  003526                     _RFM70_Initialize:
 10908                           	opt stack 21
 10909                           
 10910                           ;RFM70_init_Rx.c: 298: unsigned char i,j,temp;
 10911                           ;RFM70_init_Rx.c: 299: unsigned char WriteArr[12];
 10912                           ;RFM70_init_Rx.c: 302: _delay((unsigned long)((200)*(64000000/4000.0)));
 10913                           
 10914                           ;incstack = 0
 10915  003526  0E11               	movlw	17
 10916  003528  6E16               	movwf	(??_RFM70_Initialize+1)& (0+255),c
 10917  00352A  0E3C               	movlw	60
 10918  00352C  6E15               	movwf	??_RFM70_Initialize& (0+255),c
 10919  00352E  0ECB               	movlw	203
 10920  003530                     u7747:
 10921  003530  2EE8               	decfsz	16360,f,c
 10922  003532  D7FE               	bra	u7747
 10923  003534  2E15               	decfsz	??_RFM70_Initialize& (0+255),f,c
 10924  003536  D7FC               	bra	u7747
 10925  003538  2E16               	decfsz	(??_RFM70_Initialize+1)& (0+255),f,c
 10926  00353A  D7FA               	bra	u7747
 10927  00353C  F000               	nop	
 10928                           
 10929                           ;RFM70_init_Rx.c: 304: SwitchCFG(0);
 10930  00353E  0E00               	movlw	0
 10931  003540  EC19  F033         	call	_SwitchCFG
 10932                           
 10933                           ;RFM70_init_Rx.c: 306: for(i=0;i<20;i++)
 10934  003544  0E00               	movlw	0
 10935  003546  6E26               	movwf	RFM70_Initialize@i,c
 10936  003548                     l5050:
 10937  003548  0E13               	movlw	19
 10938  00354A  6426               	cpfsgt	RFM70_Initialize@i,c
 10939  00354C  D001               	goto	l746
 10940  00354E  D025               	goto	u4540
 10941  003550                     l746:
 10942                           
 10943                           ;RFM70_init_Rx.c: 307: {
 10944                           ;RFM70_init_Rx.c: 308: SPI_Write_Reg((0x20|Bank0_Reg[i][0]),Bank0_Reg[i][1]);
 10945  003550  5026               	movf	RFM70_Initialize@i,w,c
 10946  003552  0D02               	mullw	2
 10947  003554  0E01               	movlw	1
 10948  003556  26F3               	addwf	16371,f,c
 10949  003558  0E00               	movlw	0
 10950  00355A  22F4               	addwfc	16372,f,c
 10951  00355C  0E39               	movlw	low _Bank0_Reg
 10952  00355E  24F3               	addwf	16371,w,c
 10953  003560  6EF6               	movwf	16374,c
 10954  003562  0E20               	movlw	high _Bank0_Reg
 10955  003564  20F4               	addwfc	16372,w,c
 10956  003566  6EF7               	movwf	16375,c
 10957  003568                     	if	1	;There are 3 active tblptr bytes
 10958  003568  6AF8               	clrf	16376,c
 10959  00356A  0E00               	movlw	low (__mediumconst shr (0+16))
 10960  00356C  22F8               	addwfc	16376,f,c
 10961  00356E                     	endif
 10962  00356E  0008               	tblrd		*
 10963  003570  006F FFD4  F00F    	movff	16373,SPI_Write_Reg@value
 10964  003576  5026               	movf	RFM70_Initialize@i,w,c
 10965  003578  0D02               	mullw	2
 10966  00357A  0E39               	movlw	low _Bank0_Reg
 10967  00357C  24F3               	addwf	16371,w,c
 10968  00357E  6EF6               	movwf	16374,c
 10969  003580  0E20               	movlw	high _Bank0_Reg
 10970  003582  20F4               	addwfc	16372,w,c
 10971  003584  6EF7               	movwf	16375,c
 10972  003586                     	if	1	;There are 3 active tblptr bytes
 10973  003586  6AF8               	clrf	16376,c
 10974  003588  0E00               	movlw	low (__mediumconst shr (0+16))
 10975  00358A  22F8               	addwfc	16376,f,c
 10976  00358C                     	endif
 10977  00358C  0008               	tblrd		*
 10978  00358E  50F5               	movf	16373,w,c
 10979  003590  0920               	iorlw	32
 10980  003592  EC11  F035         	call	_SPI_Write_Reg
 10981  003596  2A26               	incf	RFM70_Initialize@i,f,c
 10982  003598  D7D7               	goto	l5050
 10983  00359A                     u4540:
 10984                           
 10985                           ;RFM70_init_Rx.c: 309: }
 10986                           ;RFM70_init_Rx.c: 321: for(j=0;j<3;j++)
 10987  00359A  0E00               	movlw	0
 10988  00359C  6E27               	movwf	RFM70_Initialize@j,c
 10989  00359E                     l5062:
 10990  00359E  0E02               	movlw	2
 10991  0035A0  6427               	cpfsgt	RFM70_Initialize@j,c
 10992  0035A2  D001               	goto	l748
 10993  0035A4  D019               	goto	u4560
 10994  0035A6                     l748:
 10995                           
 10996                           ;RFM70_init_Rx.c: 322: {
 10997                           ;RFM70_init_Rx.c: 323: WriteArr[j]=RX0_Address[j];
 10998  0035A6  5027               	movf	RFM70_Initialize@j,w,c
 10999  0035A8  0D01               	mullw	1
 11000  0035AA  0E75               	movlw	low _RX0_Address
 11001  0035AC  24F3               	addwf	16371,w,c
 11002  0035AE  6EF6               	movwf	16374,c
 11003  0035B0  0E20               	movlw	high _RX0_Address
 11004  0035B2  20F4               	addwfc	16372,w,c
 11005  0035B4  6EF7               	movwf	16375,c
 11006  0035B6                     	if	1	;There are 3 active tblptr bytes
 11007  0035B6  6AF8               	clrf	16376,c
 11008  0035B8  0E00               	movlw	low (__mediumconst shr (0+16))
 11009  0035BA  22F8               	addwfc	16376,f,c
 11010  0035BC                     	endif
 11011  0035BC  5027               	movf	RFM70_Initialize@j,w,c
 11012  0035BE  0D01               	mullw	1
 11013  0035C0  0E1A               	movlw	low RFM70_Initialize@WriteArr
 11014  0035C2  24F3               	addwf	16371,w,c
 11015  0035C4  6ED9               	movwf	16345,c
 11016  0035C6  0E00               	movlw	high RFM70_Initialize@WriteArr
 11017  0035C8  20F4               	addwfc	16372,w,c
 11018  0035CA  6EDA               	movwf	16346,c
 11019  0035CC  0008               	tblrd		*
 11020  0035CE  006F FFD7 FFDF     	movff	16373,16351
 11021  0035D4  2A27               	incf	RFM70_Initialize@j,f,c
 11022  0035D6  D7E3               	goto	l5062
 11023  0035D8                     u4560:
 11024                           
 11025                           ;RFM70_init_Rx.c: 324: }
 11026                           ;RFM70_init_Rx.c: 325: SPI_Write_Buf((0x20|10),&(WriteArr[0]),3);
 11027  0035D8  0E1A               	movlw	low RFM70_Initialize@WriteArr
 11028  0035DA  6E0F               	movwf	SPI_Write_Buf@pBuf,c
 11029  0035DC  0E00               	movlw	high RFM70_Initialize@WriteArr
 11030  0035DE  6E10               	movwf	SPI_Write_Buf@pBuf+1,c
 11031  0035E0  0E03               	movlw	3
 11032  0035E2  6E11               	movwf	SPI_Write_Buf@length,c
 11033  0035E4  0E2A               	movlw	42
 11034  0035E6  ECE1  F032         	call	_SPI_Write_Buf
 11035                           
 11036                           ;RFM70_init_Rx.c: 328: for(j=0;j<3;j++)
 11037  0035EA  0E00               	movlw	0
 11038  0035EC  6E27               	movwf	RFM70_Initialize@j,c
 11039  0035EE                     l5076:
 11040  0035EE  0E02               	movlw	2
 11041  0035F0  6427               	cpfsgt	RFM70_Initialize@j,c
 11042  0035F2  D001               	goto	l750
 11043  0035F4  D019               	goto	u4580
 11044  0035F6                     l750:
 11045                           
 11046                           ;RFM70_init_Rx.c: 329: {
 11047                           ;RFM70_init_Rx.c: 330: WriteArr[j]=RX1_Address[j];
 11048  0035F6  5027               	movf	RFM70_Initialize@j,w,c
 11049  0035F8  0D01               	mullw	1
 11050  0035FA  0E72               	movlw	low _RX1_Address
 11051  0035FC  24F3               	addwf	16371,w,c
 11052  0035FE  6EF6               	movwf	16374,c
 11053  003600  0E20               	movlw	high _RX1_Address
 11054  003602  20F4               	addwfc	16372,w,c
 11055  003604  6EF7               	movwf	16375,c
 11056  003606                     	if	1	;There are 3 active tblptr bytes
 11057  003606  6AF8               	clrf	16376,c
 11058  003608  0E00               	movlw	low (__mediumconst shr (0+16))
 11059  00360A  22F8               	addwfc	16376,f,c
 11060  00360C                     	endif
 11061  00360C  5027               	movf	RFM70_Initialize@j,w,c
 11062  00360E  0D01               	mullw	1
 11063  003610  0E1A               	movlw	low RFM70_Initialize@WriteArr
 11064  003612  24F3               	addwf	16371,w,c
 11065  003614  6ED9               	movwf	16345,c
 11066  003616  0E00               	movlw	high RFM70_Initialize@WriteArr
 11067  003618  20F4               	addwfc	16372,w,c
 11068  00361A  6EDA               	movwf	16346,c
 11069  00361C  0008               	tblrd		*
 11070  00361E  006F FFD7 FFDF     	movff	16373,16351
 11071  003624  2A27               	incf	RFM70_Initialize@j,f,c
 11072  003626  D7E3               	goto	l5076
 11073  003628                     u4580:
 11074                           
 11075                           ;RFM70_init_Rx.c: 331: }
 11076                           ;RFM70_init_Rx.c: 332: SPI_Write_Buf((0x20|11),&(WriteArr[0]),3);
 11077  003628  0E1A               	movlw	low RFM70_Initialize@WriteArr
 11078  00362A  6E0F               	movwf	SPI_Write_Buf@pBuf,c
 11079  00362C  0E00               	movlw	high RFM70_Initialize@WriteArr
 11080  00362E  6E10               	movwf	SPI_Write_Buf@pBuf+1,c
 11081  003630  0E03               	movlw	3
 11082  003632  6E11               	movwf	SPI_Write_Buf@length,c
 11083  003634  0E2B               	movlw	43
 11084  003636  ECE1  F032         	call	_SPI_Write_Buf
 11085                           
 11086                           ;RFM70_init_Rx.c: 334: for(j=0;j<3;j++)
 11087  00363A  0E00               	movlw	0
 11088  00363C  6E27               	movwf	RFM70_Initialize@j,c
 11089  00363E                     l5090:
 11090  00363E  0E02               	movlw	2
 11091  003640  6427               	cpfsgt	RFM70_Initialize@j,c
 11092  003642  D001               	goto	l752
 11093  003644  D019               	goto	u4600
 11094  003646                     l752:
 11095                           
 11096                           ;RFM70_init_Rx.c: 335: {
 11097                           ;RFM70_init_Rx.c: 336: WriteArr[j]=RX0_Address[j];
 11098  003646  5027               	movf	RFM70_Initialize@j,w,c
 11099  003648  0D01               	mullw	1
 11100  00364A  0E75               	movlw	low _RX0_Address
 11101  00364C  24F3               	addwf	16371,w,c
 11102  00364E  6EF6               	movwf	16374,c
 11103  003650  0E20               	movlw	high _RX0_Address
 11104  003652  20F4               	addwfc	16372,w,c
 11105  003654  6EF7               	movwf	16375,c
 11106  003656                     	if	1	;There are 3 active tblptr bytes
 11107  003656  6AF8               	clrf	16376,c
 11108  003658  0E00               	movlw	low (__mediumconst shr (0+16))
 11109  00365A  22F8               	addwfc	16376,f,c
 11110  00365C                     	endif
 11111  00365C  5027               	movf	RFM70_Initialize@j,w,c
 11112  00365E  0D01               	mullw	1
 11113  003660  0E1A               	movlw	low RFM70_Initialize@WriteArr
 11114  003662  24F3               	addwf	16371,w,c
 11115  003664  6ED9               	movwf	16345,c
 11116  003666  0E00               	movlw	high RFM70_Initialize@WriteArr
 11117  003668  20F4               	addwfc	16372,w,c
 11118  00366A  6EDA               	movwf	16346,c
 11119  00366C  0008               	tblrd		*
 11120  00366E  006F FFD7 FFDF     	movff	16373,16351
 11121  003674  2A27               	incf	RFM70_Initialize@j,f,c
 11122  003676  D7E3               	goto	l5090
 11123  003678                     u4600:
 11124                           
 11125                           ;RFM70_init_Rx.c: 337: }
 11126                           ;RFM70_init_Rx.c: 338: SPI_Write_Buf((0x20|16),&(WriteArr[0]),3);
 11127  003678  0E1A               	movlw	low RFM70_Initialize@WriteArr
 11128  00367A  6E0F               	movwf	SPI_Write_Buf@pBuf,c
 11129  00367C  0E00               	movlw	high RFM70_Initialize@WriteArr
 11130  00367E  6E10               	movwf	SPI_Write_Buf@pBuf+1,c
 11131  003680  0E03               	movlw	3
 11132  003682  6E11               	movwf	SPI_Write_Buf@length,c
 11133  003684  0E30               	movlw	48
 11134  003686  ECE1  F032         	call	_SPI_Write_Buf
 11135                           
 11136                           ;RFM70_init_Rx.c: 342: i=SPI_Read_Reg(29);
 11137  00368A  0E1D               	movlw	29
 11138  00368C  EC02  F035         	call	_SPI_Read_Reg
 11139  003690  6E26               	movwf	RFM70_Initialize@i,c
 11140                           
 11141                           ;RFM70_init_Rx.c: 343: if(i==0)
 11142  003692  5026               	movf	RFM70_Initialize@i,w,c
 11143  003694  A4D8               	btfss	16344,2,c
 11144  003696  D005               	goto	l754
 11145                           
 11146                           ;RFM70_init_Rx.c: 344: SPI_Write_Reg(0x50,0x73);
 11147  003698  0E73               	movlw	115
 11148  00369A  6E0F               	movwf	SPI_Write_Reg@value,c
 11149  00369C  0E50               	movlw	80
 11150  00369E  EC11  F035         	call	_SPI_Write_Reg
 11151  0036A2                     l754:
 11152                           
 11153                           ;RFM70_init_Rx.c: 345: for(i=22;i>=21;i--)
 11154  0036A2  0E16               	movlw	22
 11155  0036A4  6E26               	movwf	RFM70_Initialize@i,c
 11156  0036A6                     l5110:
 11157  0036A6  0E15               	movlw	21
 11158  0036A8  6026               	cpfslt	RFM70_Initialize@i,c
 11159  0036AA  D001               	goto	l755
 11160  0036AC  D025               	goto	u4630
 11161  0036AE                     l755:
 11162                           
 11163                           ;RFM70_init_Rx.c: 346: {
 11164                           ;RFM70_init_Rx.c: 347: SPI_Write_Reg((0x20|Bank0_Reg[i][0]),Bank0_Reg[i][1]);
 11165  0036AE  5026               	movf	RFM70_Initialize@i,w,c
 11166  0036B0  0D02               	mullw	2
 11167  0036B2  0E01               	movlw	1
 11168  0036B4  26F3               	addwf	16371,f,c
 11169  0036B6  0E00               	movlw	0
 11170  0036B8  22F4               	addwfc	16372,f,c
 11171  0036BA  0E39               	movlw	low _Bank0_Reg
 11172  0036BC  24F3               	addwf	16371,w,c
 11173  0036BE  6EF6               	movwf	16374,c
 11174  0036C0  0E20               	movlw	high _Bank0_Reg
 11175  0036C2  20F4               	addwfc	16372,w,c
 11176  0036C4  6EF7               	movwf	16375,c
 11177  0036C6                     	if	1	;There are 3 active tblptr bytes
 11178  0036C6  6AF8               	clrf	16376,c
 11179  0036C8  0E00               	movlw	low (__mediumconst shr (0+16))
 11180  0036CA  22F8               	addwfc	16376,f,c
 11181  0036CC                     	endif
 11182  0036CC  0008               	tblrd		*
 11183  0036CE  006F FFD4  F00F    	movff	16373,SPI_Write_Reg@value
 11184  0036D4  5026               	movf	RFM70_Initialize@i,w,c
 11185  0036D6  0D02               	mullw	2
 11186  0036D8  0E39               	movlw	low _Bank0_Reg
 11187  0036DA  24F3               	addwf	16371,w,c
 11188  0036DC  6EF6               	movwf	16374,c
 11189  0036DE  0E20               	movlw	high _Bank0_Reg
 11190  0036E0  20F4               	addwfc	16372,w,c
 11191  0036E2  6EF7               	movwf	16375,c
 11192  0036E4                     	if	1	;There are 3 active tblptr bytes
 11193  0036E4  6AF8               	clrf	16376,c
 11194  0036E6  0E00               	movlw	low (__mediumconst shr (0+16))
 11195  0036E8  22F8               	addwfc	16376,f,c
 11196  0036EA                     	endif
 11197  0036EA  0008               	tblrd		*
 11198  0036EC  50F5               	movf	16373,w,c
 11199  0036EE  0920               	iorlw	32
 11200  0036F0  EC11  F035         	call	_SPI_Write_Reg
 11201  0036F4  0626               	decf	RFM70_Initialize@i,f,c
 11202  0036F6  D7D7               	goto	l5110
 11203  0036F8                     u4630:
 11204                           
 11205                           ;RFM70_init_Rx.c: 348: }
 11206                           ;RFM70_init_Rx.c: 351: SwitchCFG(1);
 11207  0036F8  0E01               	movlw	1
 11208  0036FA  EC19  F033         	call	_SwitchCFG
 11209                           
 11210                           ;RFM70_init_Rx.c: 353: for(i=0;i<=8;i++)
 11211  0036FE  0E00               	movlw	0
 11212  003700  6E26               	movwf	RFM70_Initialize@i,c
 11213  003702                     l5124:
 11214  003702  0E08               	movlw	8
 11215  003704  6426               	cpfsgt	RFM70_Initialize@i,c
 11216  003706  D001               	goto	l757
 11217  003708  D045               	goto	u4680
 11218  00370A                     l757:
 11219                           
 11220                           ;RFM70_init_Rx.c: 354: {
 11221                           ;RFM70_init_Rx.c: 355: for(j=0;j<4;j++)
 11222  00370A  0E00               	movlw	0
 11223  00370C  6E27               	movwf	RFM70_Initialize@j,c
 11224  00370E                     l5130:
 11225  00370E  0E03               	movlw	3
 11226  003710  6427               	cpfsgt	RFM70_Initialize@j,c
 11227  003712  D001               	goto	l759
 11228  003714  D033               	goto	u4670
 11229  003716                     l759:
 11230                           
 11231                           ;RFM70_init_Rx.c: 356: WriteArr[j]=(Bank1_Reg0_13[i]>>(8*(j) ) )&0xff;
 11232  003716  5027               	movf	RFM70_Initialize@j,w,c
 11233  003718  0D01               	mullw	1
 11234  00371A  0E1A               	movlw	low RFM70_Initialize@WriteArr
 11235  00371C  24F3               	addwf	16371,w,c
 11236  00371E  6ED9               	movwf	16345,c
 11237  003720  0E00               	movlw	high RFM70_Initialize@WriteArr
 11238  003722  20F4               	addwfc	16372,w,c
 11239  003724  6EDA               	movwf	16346,c
 11240  003726  5026               	movf	RFM70_Initialize@i,w,c
 11241  003728  0D04               	mullw	4
 11242  00372A  0E01               	movlw	low _Bank1_Reg0_13
 11243  00372C  24F3               	addwf	16371,w,c
 11244  00372E  6EF6               	movwf	16374,c
 11245  003730  0E20               	movlw	high _Bank1_Reg0_13
 11246  003732  20F4               	addwfc	16372,w,c
 11247  003734  6EF7               	movwf	16375,c
 11248  003736                     	if	1	;There are 3 active tblptr bytes
 11249  003736  6AF8               	clrf	16376,c
 11250  003738  0E00               	movlw	low (__mediumconst shr (0+16))
 11251  00373A  22F8               	addwfc	16376,f,c
 11252  00373C                     	endif
 11253  00373C  0009               	tblrd		*+
 11254  00373E  006F FFD4  F015    	movff	16373,??_RFM70_Initialize
 11255  003744  0009               	tblrd		*+
 11256  003746  006F FFD4  F016    	movff	16373,??_RFM70_Initialize+1
 11257  00374C  0009               	tblrd		*+
 11258  00374E  006F FFD4  F017    	movff	16373,??_RFM70_Initialize+2
 11259  003754  0009               	tblrd		*+
 11260  003756  006F FFD4  F018    	movff	16373,??_RFM70_Initialize+3
 11261  00375C  5027               	movf	RFM70_Initialize@j,w,c
 11262  00375E  0D08               	mullw	8
 11263  003760  50F3               	movf	16371,w,c
 11264  003762  2AE8               	incf	16360,f,c
 11265  003764  D005               	goto	u4660
 11266  003766                     u4665:
 11267  003766  90D8               	bcf	16344,0,c
 11268  003768  3218               	rrcf	??_RFM70_Initialize+3,f,c
 11269  00376A  3217               	rrcf	??_RFM70_Initialize+2,f,c
 11270  00376C  3216               	rrcf	??_RFM70_Initialize+1,f,c
 11271  00376E  3215               	rrcf	??_RFM70_Initialize,f,c
 11272  003770                     u4660:
 11273  003770  2EE8               	decfsz	16360,f,c
 11274  003772  D7F9               	goto	u4665
 11275  003774  5015               	movf	??_RFM70_Initialize,w,c
 11276  003776  6EDF               	movwf	16351,c
 11277  003778  2A27               	incf	RFM70_Initialize@j,f,c
 11278  00377A  D7C9               	goto	l5130
 11279  00377C                     u4670:
 11280                           
 11281                           ;RFM70_init_Rx.c: 358: SPI_Write_Buf((0x20|i),&(WriteArr[0]),4);
 11282  00377C  0E1A               	movlw	low RFM70_Initialize@WriteArr
 11283  00377E  6E0F               	movwf	SPI_Write_Buf@pBuf,c
 11284  003780  0E00               	movlw	high RFM70_Initialize@WriteArr
 11285  003782  6E10               	movwf	SPI_Write_Buf@pBuf+1,c
 11286  003784  0E04               	movlw	4
 11287  003786  6E11               	movwf	SPI_Write_Buf@length,c
 11288  003788  5026               	movf	RFM70_Initialize@i,w,c
 11289  00378A  0920               	iorlw	32
 11290  00378C  ECE1  F032         	call	_SPI_Write_Buf
 11291  003790  2A26               	incf	RFM70_Initialize@i,f,c
 11292  003792  D7B7               	goto	l5124
 11293  003794                     u4680:
 11294                           
 11295                           ;RFM70_init_Rx.c: 359: }
 11296                           ;RFM70_init_Rx.c: 361: for(i=9;i<=13;i++)
 11297  003794  0E09               	movlw	9
 11298  003796  6E26               	movwf	RFM70_Initialize@i,c
 11299  003798                     l5148:
 11300  003798  0E0D               	movlw	13
 11301  00379A  6426               	cpfsgt	RFM70_Initialize@i,c
 11302  00379C  D001               	goto	l761
 11303  00379E  D04D               	goto	u4730
 11304  0037A0                     l761:
 11305                           
 11306                           ;RFM70_init_Rx.c: 362: {
 11307                           ;RFM70_init_Rx.c: 363: for(j=0;j<4;j++)
 11308  0037A0  0E00               	movlw	0
 11309  0037A2  6E27               	movwf	RFM70_Initialize@j,c
 11310  0037A4                     l5154:
 11311  0037A4  0E03               	movlw	3
 11312  0037A6  6427               	cpfsgt	RFM70_Initialize@j,c
 11313  0037A8  D001               	goto	l763
 11314  0037AA  D03B               	goto	u4720
 11315  0037AC                     l763:
 11316                           
 11317                           ;RFM70_init_Rx.c: 364: WriteArr[j]=(Bank1_Reg0_13[i]>>(8*(3-j) ) )&0xff;
 11318  0037AC  5027               	movf	RFM70_Initialize@j,w,c
 11319  0037AE  0D01               	mullw	1
 11320  0037B0  0E1A               	movlw	low RFM70_Initialize@WriteArr
 11321  0037B2  24F3               	addwf	16371,w,c
 11322  0037B4  6ED9               	movwf	16345,c
 11323  0037B6  0E00               	movlw	high RFM70_Initialize@WriteArr
 11324  0037B8  20F4               	addwfc	16372,w,c
 11325  0037BA  6EDA               	movwf	16346,c
 11326  0037BC  5026               	movf	RFM70_Initialize@i,w,c
 11327  0037BE  0D04               	mullw	4
 11328  0037C0  0E01               	movlw	low _Bank1_Reg0_13
 11329  0037C2  24F3               	addwf	16371,w,c
 11330  0037C4  6EF6               	movwf	16374,c
 11331  0037C6  0E20               	movlw	high _Bank1_Reg0_13
 11332  0037C8  20F4               	addwfc	16372,w,c
 11333  0037CA  6EF7               	movwf	16375,c
 11334  0037CC                     	if	1	;There are 3 active tblptr bytes
 11335  0037CC  6AF8               	clrf	16376,c
 11336  0037CE  0E00               	movlw	low (__mediumconst shr (0+16))
 11337  0037D0  22F8               	addwfc	16376,f,c
 11338  0037D2                     	endif
 11339  0037D2  0009               	tblrd		*+
 11340  0037D4  006F FFD4  F015    	movff	16373,??_RFM70_Initialize
 11341  0037DA  0009               	tblrd		*+
 11342  0037DC  006F FFD4  F016    	movff	16373,??_RFM70_Initialize+1
 11343  0037E2  0009               	tblrd		*+
 11344  0037E4  006F FFD4  F017    	movff	16373,??_RFM70_Initialize+2
 11345  0037EA  0009               	tblrd		*+
 11346  0037EC  006F FFD4  F018    	movff	16373,??_RFM70_Initialize+3
 11347  0037F2  5027               	movf	RFM70_Initialize@j,w,c
 11348  0037F4  0800               	sublw	0
 11349  0037F6  6E19               	movwf	(??_RFM70_Initialize+4)& (0+255),c
 11350  0037F8  90D8               	bcf	16344,0,c
 11351  0037FA  3619               	rlcf	??_RFM70_Initialize+4,f,c
 11352  0037FC  90D8               	bcf	16344,0,c
 11353  0037FE  3619               	rlcf	??_RFM70_Initialize+4,f,c
 11354  003800  90D8               	bcf	16344,0,c
 11355  003802  3619               	rlcf	??_RFM70_Initialize+4,f,c
 11356  003804  5019               	movf	??_RFM70_Initialize+4,w,c
 11357  003806  0F18               	addlw	24
 11358  003808  2AE8               	incf	16360,f,c
 11359  00380A  D005               	goto	u4710
 11360  00380C                     u4715:
 11361  00380C  90D8               	bcf	16344,0,c
 11362  00380E  3218               	rrcf	??_RFM70_Initialize+3,f,c
 11363  003810  3217               	rrcf	??_RFM70_Initialize+2,f,c
 11364  003812  3216               	rrcf	??_RFM70_Initialize+1,f,c
 11365  003814  3215               	rrcf	??_RFM70_Initialize,f,c
 11366  003816                     u4710:
 11367  003816  2EE8               	decfsz	16360,f,c
 11368  003818  D7F9               	goto	u4715
 11369  00381A  5015               	movf	??_RFM70_Initialize,w,c
 11370  00381C  6EDF               	movwf	16351,c
 11371  00381E  2A27               	incf	RFM70_Initialize@j,f,c
 11372  003820  D7C1               	goto	l5154
 11373  003822                     u4720:
 11374                           
 11375                           ;RFM70_init_Rx.c: 366: SPI_Write_Buf((0x20|i),&(WriteArr[0]),4);
 11376  003822  0E1A               	movlw	low RFM70_Initialize@WriteArr
 11377  003824  6E0F               	movwf	SPI_Write_Buf@pBuf,c
 11378  003826  0E00               	movlw	high RFM70_Initialize@WriteArr
 11379  003828  6E10               	movwf	SPI_Write_Buf@pBuf+1,c
 11380  00382A  0E04               	movlw	4
 11381  00382C  6E11               	movwf	SPI_Write_Buf@length,c
 11382  00382E  5026               	movf	RFM70_Initialize@i,w,c
 11383  003830  0920               	iorlw	32
 11384  003832  ECE1  F032         	call	_SPI_Write_Buf
 11385  003836  2A26               	incf	RFM70_Initialize@i,f,c
 11386  003838  D7AF               	goto	l5148
 11387  00383A                     u4730:
 11388                           
 11389                           ;RFM70_init_Rx.c: 367: }
 11390                           ;RFM70_init_Rx.c: 370: for(j=0;j<11;j++)
 11391  00383A  0E00               	movlw	0
 11392  00383C  6E27               	movwf	RFM70_Initialize@j,c
 11393  00383E                     l5172:
 11394  00383E  0E0A               	movlw	10
 11395  003840  6427               	cpfsgt	RFM70_Initialize@j,c
 11396  003842  D001               	goto	l765
 11397  003844  D019               	goto	u4750
 11398  003846                     l765:
 11399                           
 11400                           ;RFM70_init_Rx.c: 371: {
 11401                           ;RFM70_init_Rx.c: 372: WriteArr[j]=Bank1_Reg14[j];
 11402  003846  5027               	movf	RFM70_Initialize@j,w,c
 11403  003848  0D01               	mullw	1
 11404  00384A  0E67               	movlw	low _Bank1_Reg14
 11405  00384C  24F3               	addwf	16371,w,c
 11406  00384E  6EF6               	movwf	16374,c
 11407  003850  0E20               	movlw	high _Bank1_Reg14
 11408  003852  20F4               	addwfc	16372,w,c
 11409  003854  6EF7               	movwf	16375,c
 11410  003856                     	if	1	;There are 3 active tblptr bytes
 11411  003856  6AF8               	clrf	16376,c
 11412  003858  0E00               	movlw	low (__mediumconst shr (0+16))
 11413  00385A  22F8               	addwfc	16376,f,c
 11414  00385C                     	endif
 11415  00385C  5027               	movf	RFM70_Initialize@j,w,c
 11416  00385E  0D01               	mullw	1
 11417  003860  0E1A               	movlw	low RFM70_Initialize@WriteArr
 11418  003862  24F3               	addwf	16371,w,c
 11419  003864  6ED9               	movwf	16345,c
 11420  003866  0E00               	movlw	high RFM70_Initialize@WriteArr
 11421  003868  20F4               	addwfc	16372,w,c
 11422  00386A  6EDA               	movwf	16346,c
 11423  00386C  0008               	tblrd		*
 11424  00386E  006F FFD7 FFDF     	movff	16373,16351
 11425  003874  2A27               	incf	RFM70_Initialize@j,f,c
 11426  003876  D7E3               	goto	l5172
 11427  003878                     u4750:
 11428                           
 11429                           ;RFM70_init_Rx.c: 373: }
 11430                           ;RFM70_init_Rx.c: 374: SPI_Write_Buf((0x20|14),&(WriteArr[0]),11);
 11431  003878  0E1A               	movlw	low RFM70_Initialize@WriteArr
 11432  00387A  6E0F               	movwf	SPI_Write_Buf@pBuf,c
 11433  00387C  0E00               	movlw	high RFM70_Initialize@WriteArr
 11434  00387E  6E10               	movwf	SPI_Write_Buf@pBuf+1,c
 11435  003880  0E0B               	movlw	11
 11436  003882  6E11               	movwf	SPI_Write_Buf@length,c
 11437  003884  0E2E               	movlw	46
 11438  003886  ECE1  F032         	call	_SPI_Write_Buf
 11439                           
 11440                           ;RFM70_init_Rx.c: 377: for(j=0;j<4;j++)
 11441  00388A  0E00               	movlw	0
 11442  00388C  6E27               	movwf	RFM70_Initialize@j,c
 11443  00388E                     l5186:
 11444  00388E  0E03               	movlw	3
 11445  003890  6427               	cpfsgt	RFM70_Initialize@j,c
 11446  003892  D001               	goto	l767
 11447  003894  D02E               	goto	u4780
 11448  003896                     l767:
 11449                           
 11450                           ;RFM70_init_Rx.c: 379: WriteArr[j]=(Bank1_Reg0_13[4]>>(8*(j) ) )&0xff;
 11451  003896  5027               	movf	RFM70_Initialize@j,w,c
 11452  003898  0D01               	mullw	1
 11453  00389A  0E1A               	movlw	low RFM70_Initialize@WriteArr
 11454  00389C  24F3               	addwf	16371,w,c
 11455  00389E  6ED9               	movwf	16345,c
 11456  0038A0  0E00               	movlw	high RFM70_Initialize@WriteArr
 11457  0038A2  20F4               	addwfc	16372,w,c
 11458  0038A4  6EDA               	movwf	16346,c
 11459  0038A6  0E11               	movlw	low (_Bank1_Reg0_13+16)
 11460  0038A8  6EF6               	movwf	16374,c
 11461  0038AA  0E20               	movlw	high (_Bank1_Reg0_13+16)
 11462  0038AC  6EF7               	movwf	16375,c
 11463  0038AE                     	if	0	;tblptru may be non-zero
 11464  0038AE                     	endif
 11465  0038AE                     	if	1	;Program memory is > 0xFFFF, there are 3 active tblptr bytes
 11466  0038AE  0E00               	movlw	low (__mediumconst shr (0+16))
 11467  0038B0  6EF8               	movwf	16376,c
 11468  0038B2                     	endif
 11469  0038B2  0009               	tblrd		*+
 11470  0038B4  006F FFD4  F015    	movff	16373,??_RFM70_Initialize
 11471  0038BA  0009               	tblrd		*+
 11472  0038BC  006F FFD4  F016    	movff	16373,??_RFM70_Initialize+1
 11473  0038C2  0009               	tblrd		*+
 11474  0038C4  006F FFD4  F017    	movff	16373,??_RFM70_Initialize+2
 11475  0038CA  0009               	tblrd		*+
 11476  0038CC  006F FFD4  F018    	movff	16373,??_RFM70_Initialize+3
 11477  0038D2  5027               	movf	RFM70_Initialize@j,w,c
 11478  0038D4  0D08               	mullw	8
 11479  0038D6  50F3               	movf	16371,w,c
 11480  0038D8  2AE8               	incf	16360,f,c
 11481  0038DA  D005               	goto	u4770
 11482  0038DC                     u4775:
 11483  0038DC  90D8               	bcf	16344,0,c
 11484  0038DE  3218               	rrcf	??_RFM70_Initialize+3,f,c
 11485  0038E0  3217               	rrcf	??_RFM70_Initialize+2,f,c
 11486  0038E2  3216               	rrcf	??_RFM70_Initialize+1,f,c
 11487  0038E4  3215               	rrcf	??_RFM70_Initialize,f,c
 11488  0038E6                     u4770:
 11489  0038E6  2EE8               	decfsz	16360,f,c
 11490  0038E8  D7F9               	goto	u4775
 11491  0038EA  5015               	movf	??_RFM70_Initialize,w,c
 11492  0038EC  6EDF               	movwf	16351,c
 11493  0038EE  2A27               	incf	RFM70_Initialize@j,f,c
 11494  0038F0  D7CE               	goto	l5186
 11495  0038F2                     u4780:
 11496                           
 11497                           ;RFM70_init_Rx.c: 381: WriteArr[0]=WriteArr[0]|0x06;
 11498  0038F2  501A               	movf	RFM70_Initialize@WriteArr,w,c
 11499  0038F4  0906               	iorlw	6
 11500  0038F6  6E1A               	movwf	RFM70_Initialize@WriteArr,c
 11501                           
 11502                           ;RFM70_init_Rx.c: 382: SPI_Write_Buf((0x20|4),&(WriteArr[0]),4);
 11503  0038F8  0E1A               	movlw	low RFM70_Initialize@WriteArr
 11504  0038FA  6E0F               	movwf	SPI_Write_Buf@pBuf,c
 11505  0038FC  0E00               	movlw	high RFM70_Initialize@WriteArr
 11506  0038FE  6E10               	movwf	SPI_Write_Buf@pBuf+1,c
 11507  003900  0E04               	movlw	4
 11508  003902  6E11               	movwf	SPI_Write_Buf@length,c
 11509  003904  0E24               	movlw	36
 11510  003906  ECE1  F032         	call	_SPI_Write_Buf
 11511                           
 11512                           ;RFM70_init_Rx.c: 384: WriteArr[0]=WriteArr[0]&0xf9;
 11513  00390A  501A               	movf	RFM70_Initialize@WriteArr,w,c
 11514  00390C  0BF9               	andlw	249
 11515  00390E  6E1A               	movwf	RFM70_Initialize@WriteArr,c
 11516                           
 11517                           ;RFM70_init_Rx.c: 385: SPI_Write_Buf((0x20|4),&(WriteArr[0]),4);
 11518  003910  0E1A               	movlw	low RFM70_Initialize@WriteArr
 11519  003912  6E0F               	movwf	SPI_Write_Buf@pBuf,c
 11520  003914  0E00               	movlw	high RFM70_Initialize@WriteArr
 11521  003916  6E10               	movwf	SPI_Write_Buf@pBuf+1,c
 11522  003918  0E04               	movlw	4
 11523  00391A  6E11               	movwf	SPI_Write_Buf@length,c
 11524  00391C  0E24               	movlw	36
 11525  00391E  ECE1  F032         	call	_SPI_Write_Buf
 11526                           
 11527                           ;RFM70_init_Rx.c: 391: _delay((unsigned long)((50)*(64000000/4000.0)));
 11528  003922  0E05               	movlw	5
 11529  003924  6E16               	movwf	(??_RFM70_Initialize+1)& (0+255),c
 11530  003926  0E0F               	movlw	15
 11531  003928  6E15               	movwf	??_RFM70_Initialize& (0+255),c
 11532  00392A  0EF1               	movlw	241
 11533  00392C                     u7757:
 11534  00392C  2EE8               	decfsz	16360,f,c
 11535  00392E  D7FE               	bra	u7757
 11536  003930  2E15               	decfsz	??_RFM70_Initialize& (0+255),f,c
 11537  003932  D7FC               	bra	u7757
 11538  003934  2E16               	decfsz	(??_RFM70_Initialize+1)& (0+255),f,c
 11539  003936  D7FA               	bra	u7757
 11540  003938  F000               	nop	
 11541                           
 11542                           ;RFM70_init_Rx.c: 394: SwitchCFG(0);
 11543  00393A  0E00               	movlw	0
 11544  00393C  EC19  F033         	call	_SwitchCFG
 11545  003940  0012               	return		;funcret
 11546  003942                     __end_of_RFM70_Initialize:
 11547                           	opt stack 0
 11548                           
 11549 ;; *************** function _SwitchCFG *****************
 11550 ;; Defined at:
 11551 ;;		line 261 in file "RFM70_init_Rx.c"
 11552 ;; Parameters:    Size  Location     Type
 11553 ;;  _cfg            1    wreg     unsigned char 
 11554 ;; Auto vars:     Size  Location     Type
 11555 ;;  _cfg            1   17[COMRAM] unsigned char 
 11556 ;;  Tmp             1   18[COMRAM] unsigned char 
 11557 ;; Return value:  Size  Location     Type
 11558 ;;                  1    wreg      void 
 11559 ;; Registers used:
 11560 ;;		wreg, status,2, status,0, cstack
 11561 ;; Tracked objects:
 11562 ;;		On entry : 0/0
 11563 ;;		On exit  : 0/0
 11564 ;;		Unchanged: 0/0
 11565 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
 11566 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 11567 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 11568 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 11569 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 11570 ;;Total ram usage:        2 bytes
 11571 ;; Hardware stack levels used:    1
 11572 ;; Hardware stack levels required when called:    8
 11573 ;; This function calls:
 11574 ;;		_SPI_Read_Reg
 11575 ;;		_SPI_Write_Reg
 11576 ;; This function is called by:
 11577 ;;		_RFM70_Initialize
 11578 ;; This function uses a non-reentrant model
 11579 ;;
 11580                           
 11581                           	psect	text46
 11582  006632                     __ptext46:
 11583                           	opt stack 0
 11584  006632                     _SwitchCFG:
 11585                           	opt stack 21
 11586                           
 11587                           ;incstack = 0
 11588                           ;SwitchCFG@_cfg stored from wreg
 11589  006632  6E12               	movwf	SwitchCFG@_cfg,c
 11590                           
 11591                           ;RFM70_init_Rx.c: 263: unsigned char Tmp;
 11592                           ;RFM70_init_Rx.c: 265: Tmp=SPI_Read_Reg(7);
 11593  006634  0E07               	movlw	7
 11594  006636  EC02  F035         	call	_SPI_Read_Reg
 11595  00663A  6E13               	movwf	SwitchCFG@Tmp,c
 11596                           
 11597                           ;RFM70_init_Rx.c: 266: Tmp=Tmp&0x80;
 11598  00663C  5013               	movf	SwitchCFG@Tmp,w,c
 11599  00663E  0B80               	andlw	128
 11600  006640  6E13               	movwf	SwitchCFG@Tmp,c
 11601                           
 11602                           ;RFM70_init_Rx.c: 268: if ( ( (Tmp)&&(_cfg==0) ) || ( ((Tmp)==0)&&(_cfg) ) )
 11603  006642  5013               	movf	SwitchCFG@Tmp,w,c
 11604  006644  B4D8               	btfsc	16344,2,c
 11605  006646  D003               	goto	u4040
 11606  006648  5012               	movf	SwitchCFG@_cfg,w,c
 11607  00664A  B4D8               	btfsc	16344,2,c
 11608  00664C  D006               	goto	u4060
 11609  00664E                     u4040:
 11610  00664E  5013               	movf	SwitchCFG@Tmp,w,c
 11611  006650  A4D8               	btfss	16344,2,c
 11612  006652  0012               	return	
 11613  006654  5012               	movf	SwitchCFG@_cfg,w,c
 11614  006656  B4D8               	btfsc	16344,2,c
 11615  006658  0012               	return	
 11616  00665A                     u4060:
 11617                           
 11618                           ;RFM70_init_Rx.c: 269: {
 11619                           ;RFM70_init_Rx.c: 270: SPI_Write_Reg(0x50,0x53);
 11620  00665A  0E53               	movlw	83
 11621  00665C  6E0F               	movwf	SPI_Write_Reg@value,c
 11622  00665E  0E50               	movlw	80
 11623  006660  EC11  F035         	call	_SPI_Write_Reg
 11624  006664  0012               	return	
 11625  006666                     __end_of_SwitchCFG:
 11626                           	opt stack 0
 11627                           
 11628 ;; *************** function _SPI_Write_Reg *****************
 11629 ;; Defined at:
 11630 ;;		line 144 in file "RFM70_init_Rx.c"
 11631 ;; Parameters:    Size  Location     Type
 11632 ;;  reg             1    wreg     unsigned char 
 11633 ;;  value           1   14[COMRAM] unsigned char 
 11634 ;; Auto vars:     Size  Location     Type
 11635 ;;  reg             1   16[COMRAM] unsigned char 
 11636 ;;  status          1   15[COMRAM] unsigned char 
 11637 ;; Return value:  Size  Location     Type
 11638 ;;                  1    wreg      void 
 11639 ;; Registers used:
 11640 ;;		wreg, status,2, cstack
 11641 ;; Tracked objects:
 11642 ;;		On entry : 0/0
 11643 ;;		On exit  : 0/0
 11644 ;;		Unchanged: 0/0
 11645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
 11646 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 11647 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 11648 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 11649 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 11650 ;;Total ram usage:        3 bytes
 11651 ;; Hardware stack levels used:    1
 11652 ;; Hardware stack levels required when called:    7
 11653 ;; This function calls:
 11654 ;;		_SPI_RW
 11655 ;; This function is called by:
 11656 ;;		_SwitchToRxMode
 11657 ;;		_SwitchCFG
 11658 ;;		_RFM70_Initialize
 11659 ;;		_SwitchToTxMode
 11660 ;;		_SetChannelNum
 11661 ;; This function uses a non-reentrant model
 11662 ;;
 11663                           
 11664                           	psect	text47
 11665  006A22                     __ptext47:
 11666                           	opt stack 0
 11667  006A22                     _SPI_Write_Reg:
 11668                           	opt stack 22
 11669                           
 11670                           ;incstack = 0
 11671                           ;SPI_Write_Reg@reg stored from wreg
 11672  006A22  6E11               	movwf	SPI_Write_Reg@reg,c
 11673                           
 11674                           ;RFM70_init_Rx.c: 146: unsigned char status;
 11675                           ;RFM70_init_Rx.c: 147: RB3 = 0;
 11676  006A24  013F               	movlb	63	; () banked
 11677  006A26  97CB               	bcf	203,3,b	;volatile
 11678                           
 11679                           ; BSR set to: 63
 11680                           ;RFM70_init_Rx.c: 148: status = SPI_RW(reg);
 11681  006A28  5011               	movf	SPI_Write_Reg@reg,w,c
 11682  006A2A  EC87  F035         	call	_SPI_RW
 11683  006A2E  6E10               	movwf	SPI_Write_Reg@status,c
 11684                           
 11685                           ;RFM70_init_Rx.c: 149: SPI_RW(value);
 11686  006A30  500F               	movf	SPI_Write_Reg@value,w,c
 11687  006A32  EC87  F035         	call	_SPI_RW
 11688                           
 11689                           ;RFM70_init_Rx.c: 150: RB3 = 1;
 11690  006A36  013F               	movlb	63	; () banked
 11691  006A38  87CB               	bsf	203,3,b	;volatile
 11692                           
 11693                           ; BSR set to: 63
 11694  006A3A  0012               	return		;funcret
 11695  006A3C                     __end_of_SPI_Write_Reg:
 11696                           	opt stack 0
 11697                           
 11698 ;; *************** function _SPI_Read_Reg *****************
 11699 ;; Defined at:
 11700 ;;		line 160 in file "RFM70_init_Rx.c"
 11701 ;; Parameters:    Size  Location     Type
 11702 ;;  reg             1    wreg     unsigned char 
 11703 ;; Auto vars:     Size  Location     Type
 11704 ;;  reg             1   15[COMRAM] unsigned char 
 11705 ;;  value           1   16[COMRAM] unsigned char 
 11706 ;;  status          1   14[COMRAM] unsigned char 
 11707 ;; Return value:  Size  Location     Type
 11708 ;;                  1    wreg      unsigned char 
 11709 ;; Registers used:
 11710 ;;		wreg, status,2, cstack
 11711 ;; Tracked objects:
 11712 ;;		On entry : 0/0
 11713 ;;		On exit  : 0/0
 11714 ;;		Unchanged: 0/0
 11715 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
 11716 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 11717 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 11718 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 11719 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 11720 ;;Total ram usage:        3 bytes
 11721 ;; Hardware stack levels used:    1
 11722 ;; Hardware stack levels required when called:    7
 11723 ;; This function calls:
 11724 ;;		_SPI_RW
 11725 ;; This function is called by:
 11726 ;;		_SwitchToRxMode
 11727 ;;		_SwitchCFG
 11728 ;;		_RFM70_Initialize
 11729 ;;		_SwitchToTxMode
 11730 ;; This function uses a non-reentrant model
 11731 ;;
 11732                           
 11733                           	psect	text48
 11734  006A04                     __ptext48:
 11735                           	opt stack 0
 11736  006A04                     _SPI_Read_Reg:
 11737                           	opt stack 22
 11738                           
 11739                           ; BSR set to: 63
 11740                           ;incstack = 0
 11741                           ;SPI_Read_Reg@reg stored from wreg
 11742  006A04  6E10               	movwf	SPI_Read_Reg@reg,c
 11743                           
 11744                           ;RFM70_init_Rx.c: 162: unsigned char status,value;
 11745                           ;RFM70_init_Rx.c: 163: RB3 = 0;
 11746  006A06  013F               	movlb	63	; () banked
 11747  006A08  97CB               	bcf	203,3,b	;volatile
 11748                           
 11749                           ; BSR set to: 63
 11750                           ;RFM70_init_Rx.c: 164: status=SPI_RW(reg);
 11751  006A0A  5010               	movf	SPI_Read_Reg@reg,w,c
 11752  006A0C  EC87  F035         	call	_SPI_RW
 11753  006A10  6E0F               	movwf	SPI_Read_Reg@status,c
 11754                           
 11755                           ;RFM70_init_Rx.c: 165: value = SPI_RW(0);
 11756  006A12  0E00               	movlw	0
 11757  006A14  EC87  F035         	call	_SPI_RW
 11758  006A18  6E11               	movwf	SPI_Read_Reg@value,c
 11759                           
 11760                           ;RFM70_init_Rx.c: 166: RB3 = 1;
 11761  006A1A  013F               	movlb	63	; () banked
 11762  006A1C  87CB               	bsf	203,3,b	;volatile
 11763                           
 11764                           ; BSR set to: 63
 11765                           ;RFM70_init_Rx.c: 167: return(value);
 11766  006A1E  5011               	movf	SPI_Read_Reg@value,w,c
 11767  006A20  0012               	return	
 11768  006A22                     __end_of_SPI_Read_Reg:
 11769                           	opt stack 0
 11770                           
 11771 ;; *************** function _SPI_Write_Buf *****************
 11772 ;; Defined at:
 11773 ;;		line 197 in file "RFM70_init_Rx.c"
 11774 ;; Parameters:    Size  Location     Type
 11775 ;;  reg             1    wreg     unsigned char 
 11776 ;;  pBuf            2   14[COMRAM] PTR unsigned char 
 11777 ;;		 -> RFM70_Initialize@WriteArr(12), 
 11778 ;;  length          1   16[COMRAM] unsigned char 
 11779 ;; Auto vars:     Size  Location     Type
 11780 ;;  reg             1   18[COMRAM] unsigned char 
 11781 ;;  byte_ctr        1   19[COMRAM] unsigned char 
 11782 ;;  status          1   17[COMRAM] unsigned char 
 11783 ;; Return value:  Size  Location     Type
 11784 ;;                  1    wreg      void 
 11785 ;; Registers used:
 11786 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11787 ;; Tracked objects:
 11788 ;;		On entry : 0/0
 11789 ;;		On exit  : 0/0
 11790 ;;		Unchanged: 0/0
 11791 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
 11792 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 11793 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 11794 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 11795 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 11796 ;;Total ram usage:        6 bytes
 11797 ;; Hardware stack levels used:    1
 11798 ;; Hardware stack levels required when called:    7
 11799 ;; This function calls:
 11800 ;;		_SPI_RW
 11801 ;; This function is called by:
 11802 ;;		_RFM70_Initialize
 11803 ;; This function uses a non-reentrant model
 11804 ;;
 11805                           
 11806                           	psect	text49
 11807  0065C2                     __ptext49:
 11808                           	opt stack 0
 11809  0065C2                     _SPI_Write_Buf:
 11810                           	opt stack 22
 11811                           
 11812                           ; BSR set to: 63
 11813                           ;incstack = 0
 11814                           ;SPI_Write_Buf@reg stored from wreg
 11815  0065C2  6E13               	movwf	SPI_Write_Buf@reg,c
 11816                           
 11817                           ;RFM70_init_Rx.c: 199: unsigned char status, byte_ctr;
 11818                           ;RFM70_init_Rx.c: 201: RB3 = 0;
 11819  0065C4  013F               	movlb	63	; () banked
 11820  0065C6  97CB               	bcf	203,3,b	;volatile
 11821                           
 11822                           ; BSR set to: 63
 11823                           ;RFM70_init_Rx.c: 202: status = SPI_RW(reg);
 11824  0065C8  5013               	movf	SPI_Write_Buf@reg,w,c
 11825  0065CA  EC87  F035         	call	_SPI_RW
 11826  0065CE  6E12               	movwf	SPI_Write_Buf@status,c
 11827                           
 11828                           ;RFM70_init_Rx.c: 203: for(byte_ctr=0; byte_ctr<length; byte_ctr++)
 11829  0065D0  0E00               	movlw	0
 11830  0065D2  6E14               	movwf	SPI_Write_Buf@byte_ctr,c
 11831  0065D4  D00C               	goto	l723
 11832  0065D6                     
 11833                           ;RFM70_init_Rx.c: 204: SPI_RW(*pBuf++);
 11834  0065D6  0060  F03F  FFD9   	movff	SPI_Write_Buf@pBuf,16345
 11835  0065DC  0060  F043  FFDA   	movff	SPI_Write_Buf@pBuf+1,16346
 11836  0065E2  50DF               	movf	16351,w,c
 11837  0065E4  EC87  F035         	call	_SPI_RW
 11838  0065E8  4A0F               	infsnz	SPI_Write_Buf@pBuf,f,c
 11839  0065EA  2A10               	incf	SPI_Write_Buf@pBuf+1,f,c
 11840  0065EC  2A14               	incf	SPI_Write_Buf@byte_ctr,f,c
 11841  0065EE                     l723:
 11842  0065EE  5011               	movf	SPI_Write_Buf@length,w,c
 11843  0065F0  5C14               	subwf	SPI_Write_Buf@byte_ctr,w,c
 11844  0065F2  A0D8               	btfss	16344,0,c
 11845  0065F4  D7F0               	goto	l724
 11846                           
 11847                           ;RFM70_init_Rx.c: 205: RB3 = 1;
 11848  0065F6  013F               	movlb	63	; () banked
 11849  0065F8  87CB               	bsf	203,3,b	;volatile
 11850                           
 11851                           ; BSR set to: 63
 11852  0065FA  0012               	return		;funcret
 11853  0065FC                     __end_of_SPI_Write_Buf:
 11854                           	opt stack 0
 11855                           
 11856 ;; *************** function _SPI_RW *****************
 11857 ;; Defined at:
 11858 ;;		line 128 in file "RFM70_init_Rx.c"
 11859 ;; Parameters:    Size  Location     Type
 11860 ;;  value           1    wreg     unsigned char 
 11861 ;; Auto vars:     Size  Location     Type
 11862 ;;  value           1   13[COMRAM] unsigned char 
 11863 ;; Return value:  Size  Location     Type
 11864 ;;                  1    wreg      unsigned char 
 11865 ;; Registers used:
 11866 ;;		wreg, status,2
 11867 ;; Tracked objects:
 11868 ;;		On entry : 0/0
 11869 ;;		On exit  : 0/0
 11870 ;;		Unchanged: 0/0
 11871 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
 11872 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 11873 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 11874 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 11875 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 11876 ;;Total ram usage:        1 bytes
 11877 ;; Hardware stack levels used:    1
 11878 ;; Hardware stack levels required when called:    6
 11879 ;; This function calls:
 11880 ;;		Nothing
 11881 ;; This function is called by:
 11882 ;;		_SPI_Write_Reg
 11883 ;;		_SPI_Read_Reg
 11884 ;;		_SPI_Write_Buf
 11885 ;; This function uses a non-reentrant model
 11886 ;;
 11887                           
 11888                           	psect	text50
 11889  006B0E                     __ptext50:
 11890                           	opt stack 0
 11891  006B0E                     _SPI_RW:
 11892                           	opt stack 22
 11893                           
 11894                           ; BSR set to: 63
 11895                           ;incstack = 0
 11896                           ;SPI_RW@value stored from wreg
 11897  006B0E  6E0E               	movwf	SPI_RW@value,c
 11898                           
 11899                           ;RFM70_init_Rx.c: 130: SPI1TXB = value;
 11900  006B10  0060  F03B  FD11   	movff	SPI_RW@value,15633	;volatile
 11901  006B16  0139               	movlb	57	; () banked
 11902  006B18  A9A2               	btfss	162,4,b	;volatile
 11903  006B1A  D7FD               	goto	l706
 11904                           
 11905                           ; BSR set to: 57
 11906                           ;RFM70_init_Rx.c: 132: return (SPI1RXB);
 11907  006B1C  013D               	movlb	61	; () banked
 11908  006B1E  5110               	movf	16,w,b	;volatile
 11909                           
 11910                           ; BSR set to: 61
 11911  006B20  0012               	return		;funcret
 11912  006B22                     __end_of_SPI_RW:
 11913                           	opt stack 0
 11914                           
 11915 ;; *************** function _G_start_check *****************
 11916 ;; Defined at:
 11917 ;;		line 240 in file "Functions.c"
 11918 ;; Parameters:    Size  Location     Type
 11919 ;;		None
 11920 ;; Auto vars:     Size  Location     Type
 11921 ;;		None
 11922 ;; Return value:  Size  Location     Type
 11923 ;;                  1    wreg      void 
 11924 ;; Registers used:
 11925 ;;		wreg, status,2, status,0
 11926 ;; Tracked objects:
 11927 ;;		On entry : 0/0
 11928 ;;		On exit  : 0/0
 11929 ;;		Unchanged: 0/0
 11930 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
 11931 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 11932 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 11933 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 11934 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 11935 ;;Total ram usage:        0 bytes
 11936 ;; Hardware stack levels used:    1
 11937 ;; Hardware stack levels required when called:    6
 11938 ;; This function calls:
 11939 ;;		Nothing
 11940 ;; This function is called by:
 11941 ;;		_main
 11942 ;; This function uses a non-reentrant model
 11943 ;;
 11944                           
 11945                           	psect	text51
 11946  006A86                     __ptext51:
 11947                           	opt stack 0
 11948  006A86                     _G_start_check:
 11949                           	opt stack 24
 11950                           
 11951                           ;Functions.c: 242: if(grip_steps != 0)
 11952                           
 11953                           ; BSR set to: 61
 11954                           ;incstack = 0
 11955  006A86  0100               	movlb	0	; () banked
 11956  006A88  51DD               	movf	_grip_steps& (0+255),w,b
 11957  006A8A  11DE               	iorwf	(_grip_steps+1)& (0+255),w,b
 11958  006A8C  B4D8               	btfsc	16344,2,c
 11959  006A8E  0012               	return	
 11960                           
 11961                           ; BSR set to: 0
 11962                           ;Functions.c: 243: {
 11963                           ;Functions.c: 244: grip_steps_count=0;
 11964  006A90  0E00               	movlw	0
 11965  006A92  6E48               	movwf	_grip_steps_count+1,c
 11966  006A94  0E00               	movlw	0
 11967  006A96  6E47               	movwf	_grip_steps_count,c
 11968                           
 11969                           ; BSR set to: 0
 11970                           ;Functions.c: 246: T5CONbits.ON=1;
 11971  006A98  013F               	movlb	63	; () banked
 11972  006A9A  819A               	bsf	154,0,b	;volatile
 11973  006A9C  0012               	return	
 11974  006A9E                     __end_of_G_start_check:
 11975                           	opt stack 0
 11976                           
 11977 ;; *************** function _TMR1_ISR *****************
 11978 ;; Defined at:
 11979 ;;		line 47 in file "mcc_generated_files/tmr1.c"
 11980 ;; Parameters:    Size  Location     Type
 11981 ;;		None
 11982 ;; Auto vars:     Size  Location     Type
 11983 ;;		None
 11984 ;; Return value:  Size  Location     Type
 11985 ;;                  1    wreg      void 
 11986 ;; Registers used:
 11987 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 11988 ;; Tracked objects:
 11989 ;;		On entry : 0/0
 11990 ;;		On exit  : 0/0
 11991 ;;		Unchanged: 0/0
 11992 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
 11993 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 11994 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 11995 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 11996 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 11997 ;;Total ram usage:        1 bytes
 11998 ;; Hardware stack levels used:    1
 11999 ;; Hardware stack levels required when called:    5
 12000 ;; This function calls:
 12001 ;;		_S_motor
 12002 ;; This function is called by:
 12003 ;;		Interrupt level 1
 12004 ;; This function uses a non-reentrant model
 12005 ;;
 12006                           
 12007                           	psect	text52
 12008  0069A4                     __ptext52:
 12009                           	opt stack 0
 12010  0069A4                     _TMR1_ISR:
 12011                           	opt stack 20
 12012                           
 12013                           ;incstack = 0
 12014  0069A4  006F FF60  F008    	movff	16344,??_TMR1_ISR
 12015                           
 12016                           ;tmr1.c: 49: S_motor();
 12017  0069AA  ECE9  F031         	call	_S_motor	;wreg free
 12018                           
 12019                           ;tmr1.c: 51: TMR1H = 0x63;
 12020  0069AE  0E63               	movlw	99
 12021  0069B0  013F               	movlb	63	; () banked
 12022  0069B2  6FB1               	movwf	177,b	;volatile
 12023                           
 12024                           ; BSR set to: 63
 12025                           ;tmr1.c: 52: TMR1L = 0xC0;
 12026  0069B4  0EC0               	movlw	192
 12027  0069B6  6FB0               	movwf	176,b	;volatile
 12028                           
 12029                           ; BSR set to: 63
 12030                           ;tmr1.c: 54: TMR1IF=0;
 12031  0069B8  0139               	movlb	57	; () banked
 12032  0069BA  91A4               	bcf	164,0,b	;volatile
 12033                           
 12034                           ; BSR set to: 57
 12035  0069BC  0060  F023  FFD8   	movff	??_TMR1_ISR,16344
 12036  0069C2  0011               	retfie		f
 12037  0069C4                     __end_of_TMR1_ISR:
 12038                           	opt stack 0
 12039                           
 12040 ;; *************** function _S_motor *****************
 12041 ;; Defined at:
 12042 ;;		line 127 in file "Functions.c"
 12043 ;; Parameters:    Size  Location     Type
 12044 ;;		None
 12045 ;; Auto vars:     Size  Location     Type
 12046 ;;		None
 12047 ;; Return value:  Size  Location     Type
 12048 ;;                  1    wreg      void 
 12049 ;; Registers used:
 12050 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12051 ;; Tracked objects:
 12052 ;;		On entry : 0/0
 12053 ;;		On exit  : 0/0
 12054 ;;		Unchanged: 0/0
 12055 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
 12056 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 12057 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 12058 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 12059 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 12060 ;;Total ram usage:        0 bytes
 12061 ;; Hardware stack levels used:    1
 12062 ;; Hardware stack levels required when called:    4
 12063 ;; This function calls:
 12064 ;;		_S_motor_LAT
 12065 ;; This function is called by:
 12066 ;;		_TMR1_ISR
 12067 ;; This function uses a non-reentrant model
 12068 ;;
 12069                           
 12070                           	psect	text53
 12071  0063D2                     __ptext53:
 12072                           	opt stack 0
 12073  0063D2                     _S_motor:
 12074                           	opt stack 20
 12075                           
 12076                           ;Functions.c: 129: if(shoulder_steps_count !=shoulder_steps)
 12077                           
 12078                           ; BSR set to: 57
 12079                           ;incstack = 0
 12080  0063D2  504D               	movf	_shoulder_steps,w,c
 12081  0063D4  184B               	xorwf	_shoulder_steps_count,w,c
 12082  0063D6  E104               	bnz	i1u426_20
 12083  0063D8  504E               	movf	_shoulder_steps+1,w,c
 12084  0063DA  184C               	xorwf	_shoulder_steps_count+1,w,c
 12085  0063DC  B4D8               	btfsc	16344,2,c
 12086  0063DE  D01F               	goto	i1l644
 12087  0063E0                     i1u426_20:
 12088                           
 12089                           ;Functions.c: 130: {
 12090                           ;Functions.c: 131: if(shoulder_steps>0)
 12091  0063E0  BE4E               	btfsc	_shoulder_steps+1,7,c
 12092  0063E2  D00A               	goto	i1l645
 12093  0063E4  504E               	movf	_shoulder_steps+1,w,c
 12094  0063E6  E103               	bnz	i1u427_20
 12095  0063E8  044D               	decf	_shoulder_steps,w,c
 12096  0063EA  A0D8               	btfss	16344,0,c
 12097  0063EC  D005               	goto	i1l645
 12098  0063EE                     i1u427_20:
 12099                           
 12100                           ;Functions.c: 132: {
 12101                           ;Functions.c: 133: S_phase++;
 12102  0063EE  0100               	movlb	0	; () banked
 12103  0063F0  2BF1               	incf	_S_phase& (0+255),f,b
 12104                           
 12105                           ;Functions.c: 134: shoulder_steps_count++;
 12106  0063F2  4A4B               	infsnz	_shoulder_steps_count,f,c
 12107  0063F4  2A4C               	incf	_shoulder_steps_count+1,f,c
 12108                           
 12109                           ;Functions.c: 135: }
 12110  0063F6  D005               	goto	i1l646
 12111  0063F8                     i1l645:
 12112                           
 12113                           ;Functions.c: 136: else
 12114                           ;Functions.c: 137: {
 12115                           ;Functions.c: 138: S_phase--;
 12116                           
 12117                           ; BSR set to: 0
 12118  0063F8  0100               	movlb	0	; () banked
 12119  0063FA  07F1               	decf	_S_phase& (0+255),f,b
 12120                           
 12121                           ;Functions.c: 139: shoulder_steps_count--;
 12122  0063FC  064B               	decf	_shoulder_steps_count,f,c
 12123  0063FE  A0D8               	btfss	16344,0,c
 12124  006400  064C               	decf	_shoulder_steps_count+1,f,c
 12125  006402                     i1l646:
 12126                           
 12127                           ; BSR set to: 0
 12128                           ;Functions.c: 140: }
 12129                           ;Functions.c: 141: if(S_phase>7) S_phase=0;
 12130                           
 12131                           ; BSR set to: 0
 12132  006402  51F1               	movf	_S_phase& (0+255),w,b
 12133  006404  0A80               	xorlw	128
 12134  006406  0F78               	addlw	-136
 12135  006408  A0D8               	btfss	16344,0,c
 12136  00640A  D002               	goto	i1l647
 12137                           
 12138                           ; BSR set to: 0
 12139  00640C  0E00               	movlw	0
 12140  00640E  6FF1               	movwf	_S_phase& (0+255),b
 12141  006410                     i1l647:
 12142                           
 12143                           ; BSR set to: 0
 12144                           ;Functions.c: 142: if(S_phase<0) S_phase=7;
 12145                           
 12146                           ; BSR set to: 0
 12147  006410  AFF1               	btfss	_S_phase& (0+255),7,b
 12148  006412  D002               	goto	i1l648
 12149                           
 12150                           ; BSR set to: 0
 12151  006414  0E07               	movlw	7
 12152  006416  6FF1               	movwf	_S_phase& (0+255),b
 12153  006418                     i1l648:
 12154                           
 12155                           ; BSR set to: 0
 12156                           ;Functions.c: 143: S_motor_LAT();
 12157                           
 12158                           ; BSR set to: 0
 12159  006418  ECCA  F033         	call	_S_motor_LAT	;wreg free
 12160                           
 12161                           ;Functions.c: 144: }
 12162  00641C  0012               	return	
 12163  00641E                     i1l644:
 12164                           
 12165                           ;Functions.c: 145: else
 12166                           ;Functions.c: 146: {
 12167                           ;Functions.c: 147: T1CONbits.ON=0;
 12168  00641E  013F               	movlb	63	; () banked
 12169  006420  91B2               	bcf	178,0,b	;volatile
 12170  006422  0012               	return	
 12171  006424                     __end_of_S_motor:
 12172                           	opt stack 0
 12173                           
 12174 ;; *************** function _S_motor_LAT *****************
 12175 ;; Defined at:
 12176 ;;		line 33 in file "Functions.c"
 12177 ;; Parameters:    Size  Location     Type
 12178 ;;		None
 12179 ;; Auto vars:     Size  Location     Type
 12180 ;;		None
 12181 ;; Return value:  Size  Location     Type
 12182 ;;                  1    wreg      void 
 12183 ;; Registers used:
 12184 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 12185 ;; Tracked objects:
 12186 ;;		On entry : 0/0
 12187 ;;		On exit  : 0/0
 12188 ;;		Unchanged: 0/0
 12189 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
 12190 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 12191 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 12192 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 12193 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 12194 ;;Total ram usage:        0 bytes
 12195 ;; Hardware stack levels used:    1
 12196 ;; Hardware stack levels required when called:    3
 12197 ;; This function calls:
 12198 ;;		Nothing
 12199 ;; This function is called by:
 12200 ;;		_S_motor
 12201 ;; This function uses a non-reentrant model
 12202 ;;
 12203                           
 12204                           	psect	text54
 12205  006794                     __ptext54:
 12206                           	opt stack 0
 12207  006794                     _S_motor_LAT:
 12208                           	opt stack 20
 12209                           
 12210                           ;Functions.c: 35: LAT_copy = LATC;
 12211                           
 12212                           ;incstack = 0
 12213  006794  006F FEF0  F04F    	movff	16316,_LAT_copy	;volatile
 12214                           
 12215                           ;Functions.c: 36: LAT_copy = (LAT_copy & 0b11110000);
 12216  00679A  504F               	movf	_LAT_copy,w,c
 12217  00679C  0BF0               	andlw	240
 12218  00679E  6E4F               	movwf	_LAT_copy,c
 12219                           
 12220                           ;Functions.c: 37: LATC = (LAT_copy | SM_phases[S_phase]);
 12221  0067A0  0100               	movlb	0	; () banked
 12222  0067A2  51F1               	movf	_S_phase& (0+255),w,b
 12223  0067A4  0D01               	mullw	1
 12224  0067A6  0E10               	movlw	low _SM_phases
 12225  0067A8  24F3               	addwf	16371,w,c
 12226  0067AA  6ED9               	movwf	16345,c
 12227  0067AC  0E01               	movlw	high _SM_phases
 12228  0067AE  20F4               	addwfc	16372,w,c
 12229  0067B0  6EDA               	movwf	16346,c
 12230  0067B2  50DF               	movf	16351,w,c
 12231  0067B4  104F               	iorwf	_LAT_copy,w,c
 12232  0067B6  013F               	movlb	63	; () banked
 12233  0067B8  6FBC               	movwf	188,b	;volatile
 12234                           
 12235                           ; BSR set to: 63
 12236  0067BA  0012               	return		;funcret
 12237  0067BC                     __end_of_S_motor_LAT:
 12238                           	opt stack 0
 12239                           
 12240 ;; *************** function _TMR2_ISR *****************
 12241 ;; Defined at:
 12242 ;;		line 46 in file "mcc_generated_files/tmr2.c"
 12243 ;; Parameters:    Size  Location     Type
 12244 ;;		None
 12245 ;; Auto vars:     Size  Location     Type
 12246 ;;		None
 12247 ;; Return value:  Size  Location     Type
 12248 ;;                  1    wreg      void 
 12249 ;; Registers used:
 12250 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12251 ;; Tracked objects:
 12252 ;;		On entry : 0/0
 12253 ;;		On exit  : 0/0
 12254 ;;		Unchanged: 0/0
 12255 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
 12256 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 12257 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 12258 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 12259 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 12260 ;;Total ram usage:        1 bytes
 12261 ;; Hardware stack levels used:    1
 12262 ;; Hardware stack levels required when called:    5
 12263 ;; This function calls:
 12264 ;;		_B_motor
 12265 ;; This function is called by:
 12266 ;;		Interrupt level 1
 12267 ;; This function uses a non-reentrant model
 12268 ;;
 12269                           
 12270                           	psect	text55
 12271  006AA0                     __ptext55:
 12272                           	opt stack 0
 12273  006AA0                     _TMR2_ISR:
 12274                           	opt stack 20
 12275                           
 12276                           ; BSR set to: 63
 12277                           ;incstack = 0
 12278  006AA0  006F FF60  F009    	movff	16344,??_TMR2_ISR
 12279                           
 12280                           ;tmr2.c: 48: B_motor();
 12281  006AA6  EC67  F033         	call	_B_motor	;wreg free
 12282                           
 12283                           ;tmr2.c: 50: TMR2IF=0;
 12284  006AAA  0139               	movlb	57	; () banked
 12285  006AAC  95A4               	bcf	164,2,b	;volatile
 12286                           
 12287                           ; BSR set to: 57
 12288  006AAE  0060  F027  FFD8   	movff	??_TMR2_ISR,16344
 12289  006AB4  0011               	retfie		f
 12290  006AB6                     __end_of_TMR2_ISR:
 12291                           	opt stack 0
 12292                           
 12293 ;; *************** function _B_motor *****************
 12294 ;; Defined at:
 12295 ;;		line 103 in file "Functions.c"
 12296 ;; Parameters:    Size  Location     Type
 12297 ;;		None
 12298 ;; Auto vars:     Size  Location     Type
 12299 ;;		None
 12300 ;; Return value:  Size  Location     Type
 12301 ;;                  1    wreg      void 
 12302 ;; Registers used:
 12303 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12304 ;; Tracked objects:
 12305 ;;		On entry : 0/0
 12306 ;;		On exit  : 0/0
 12307 ;;		Unchanged: 0/0
 12308 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
 12309 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 12310 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 12311 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 12312 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 12313 ;;Total ram usage:        0 bytes
 12314 ;; Hardware stack levels used:    1
 12315 ;; Hardware stack levels required when called:    4
 12316 ;; This function calls:
 12317 ;;		_B_motor_LAT
 12318 ;; This function is called by:
 12319 ;;		_TMR2_ISR
 12320 ;; This function uses a non-reentrant model
 12321 ;;
 12322                           
 12323                           	psect	text56
 12324  0066CE                     __ptext56:
 12325                           	opt stack 0
 12326  0066CE                     _B_motor:
 12327                           	opt stack 20
 12328                           
 12329                           ;Functions.c: 107: if(base_steps>0)
 12330                           
 12331                           ; BSR set to: 57
 12332                           ;incstack = 0
 12333  0066CE  0100               	movlb	0	; () banked
 12334  0066D0  BFE8               	btfsc	(_base_steps+1)& (0+255),7,b
 12335  0066D2  D007               	goto	i1l637
 12336  0066D4  51E8               	movf	(_base_steps+1)& (0+255),w,b
 12337  0066D6  E103               	bnz	i1u430_20
 12338  0066D8  05E7               	decf	_base_steps& (0+255),w,b
 12339  0066DA  A0D8               	btfss	16344,0,c
 12340  0066DC  D002               	goto	i1l637
 12341  0066DE                     i1u430_20:
 12342                           
 12343                           ; BSR set to: 0
 12344                           ;Functions.c: 108: {
 12345                           ;Functions.c: 109: B_phase++;
 12346  0066DE  2BF2               	incf	_B_phase& (0+255),f,b
 12347                           
 12348                           ;Functions.c: 111: }
 12349  0066E0  D001               	goto	i1l638
 12350  0066E2                     i1l637:
 12351                           
 12352                           ; BSR set to: 0
 12353                           ;Functions.c: 112: else
 12354                           ;Functions.c: 113: {
 12355                           ;Functions.c: 114: B_phase--;
 12356                           
 12357                           ; BSR set to: 0
 12358  0066E2  07F2               	decf	_B_phase& (0+255),f,b
 12359  0066E4                     i1l638:
 12360                           
 12361                           ; BSR set to: 0
 12362                           ;Functions.c: 116: }
 12363                           ;Functions.c: 117: if(B_phase>7) B_phase=0;
 12364                           
 12365                           ; BSR set to: 0
 12366  0066E4  51F2               	movf	_B_phase& (0+255),w,b
 12367  0066E6  0A80               	xorlw	128
 12368  0066E8  0F78               	addlw	-136
 12369  0066EA  A0D8               	btfss	16344,0,c
 12370  0066EC  D002               	goto	i1l639
 12371                           
 12372                           ; BSR set to: 0
 12373  0066EE  0E00               	movlw	0
 12374  0066F0  6FF2               	movwf	_B_phase& (0+255),b
 12375  0066F2                     i1l639:
 12376                           
 12377                           ; BSR set to: 0
 12378                           ;Functions.c: 118: if(B_phase<0) B_phase=7;
 12379                           
 12380                           ; BSR set to: 0
 12381  0066F2  AFF2               	btfss	_B_phase& (0+255),7,b
 12382  0066F4  D002               	goto	i1l640
 12383                           
 12384                           ; BSR set to: 0
 12385  0066F6  0E07               	movlw	7
 12386  0066F8  6FF2               	movwf	_B_phase& (0+255),b
 12387  0066FA                     i1l640:
 12388                           
 12389                           ; BSR set to: 0
 12390                           ;Functions.c: 119: B_motor_LAT();
 12391                           
 12392                           ; BSR set to: 0
 12393  0066FA  ECDE  F033         	call	_B_motor_LAT	;wreg free
 12394  0066FE  0012               	return		;funcret
 12395  006700                     __end_of_B_motor:
 12396                           	opt stack 0
 12397                           
 12398 ;; *************** function _B_motor_LAT *****************
 12399 ;; Defined at:
 12400 ;;		line 26 in file "Functions.c"
 12401 ;; Parameters:    Size  Location     Type
 12402 ;;		None
 12403 ;; Auto vars:     Size  Location     Type
 12404 ;;		None
 12405 ;; Return value:  Size  Location     Type
 12406 ;;                  1    wreg      void 
 12407 ;; Registers used:
 12408 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 12409 ;; Tracked objects:
 12410 ;;		On entry : 0/0
 12411 ;;		On exit  : 0/0
 12412 ;;		Unchanged: 0/0
 12413 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
 12414 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 12415 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 12416 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 12417 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 12418 ;;Total ram usage:        0 bytes
 12419 ;; Hardware stack levels used:    1
 12420 ;; Hardware stack levels required when called:    3
 12421 ;; This function calls:
 12422 ;;		Nothing
 12423 ;; This function is called by:
 12424 ;;		_B_motor
 12425 ;; This function uses a non-reentrant model
 12426 ;;
 12427                           
 12428                           	psect	text57
 12429  0067BC                     __ptext57:
 12430                           	opt stack 0
 12431  0067BC                     _B_motor_LAT:
 12432                           	opt stack 20
 12433                           
 12434                           ;Functions.c: 28: LAT_copy = LATD;
 12435                           
 12436                           ;incstack = 0
 12437  0067BC  006F FEF4  F04F    	movff	16317,_LAT_copy	;volatile
 12438                           
 12439                           ;Functions.c: 29: LAT_copy = (LAT_copy & 0b11110000);
 12440  0067C2  504F               	movf	_LAT_copy,w,c
 12441  0067C4  0BF0               	andlw	240
 12442  0067C6  6E4F               	movwf	_LAT_copy,c
 12443                           
 12444                           ;Functions.c: 30: LATD = (LAT_copy | BM_phases[B_phase]);
 12445  0067C8  0100               	movlb	0	; () banked
 12446  0067CA  51F2               	movf	_B_phase& (0+255),w,b
 12447  0067CC  0D01               	mullw	1
 12448  0067CE  0E18               	movlw	low _BM_phases
 12449  0067D0  24F3               	addwf	16371,w,c
 12450  0067D2  6ED9               	movwf	16345,c
 12451  0067D4  0E01               	movlw	high _BM_phases
 12452  0067D6  20F4               	addwfc	16372,w,c
 12453  0067D8  6EDA               	movwf	16346,c
 12454  0067DA  50DF               	movf	16351,w,c
 12455  0067DC  104F               	iorwf	_LAT_copy,w,c
 12456  0067DE  013F               	movlb	63	; () banked
 12457  0067E0  6FBD               	movwf	189,b	;volatile
 12458                           
 12459                           ; BSR set to: 63
 12460  0067E2  0012               	return		;funcret
 12461  0067E4                     __end_of_B_motor_LAT:
 12462                           	opt stack 0
 12463                           
 12464 ;; *************** function _TMR4_ISR *****************
 12465 ;; Defined at:
 12466 ;;		line 48 in file "mcc_generated_files/tmr4.c"
 12467 ;; Parameters:    Size  Location     Type
 12468 ;;		None
 12469 ;; Auto vars:     Size  Location     Type
 12470 ;;		None
 12471 ;; Return value:  Size  Location     Type
 12472 ;;                  1    wreg      void 
 12473 ;; Registers used:
 12474 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12475 ;; Tracked objects:
 12476 ;;		On entry : 0/0
 12477 ;;		On exit  : 0/0
 12478 ;;		Unchanged: 0/0
 12479 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
 12480 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 12481 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 12482 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 12483 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 12484 ;;Total ram usage:        1 bytes
 12485 ;; Hardware stack levels used:    1
 12486 ;; Hardware stack levels required when called:    5
 12487 ;; This function calls:
 12488 ;;		_LW_motor
 12489 ;; This function is called by:
 12490 ;;		Interrupt level 1
 12491 ;; This function uses a non-reentrant model
 12492 ;;
 12493                           
 12494                           	psect	text58
 12495  006AB8                     __ptext58:
 12496                           	opt stack 0
 12497  006AB8                     _TMR4_ISR:
 12498                           	opt stack 20
 12499                           
 12500                           ; BSR set to: 63
 12501                           ;incstack = 0
 12502  006AB8  006F FF60  F00A    	movff	16344,??_TMR4_ISR
 12503                           
 12504                           ;tmr4.c: 50: LW_motor();
 12505  006ABE  EC80  F033         	call	_LW_motor	;wreg free
 12506                           
 12507                           ;tmr4.c: 52: TMR4IF=0;
 12508  006AC2  0139               	movlb	57	; () banked
 12509  006AC4  91A7               	bcf	167,0,b	;volatile
 12510                           
 12511                           ; BSR set to: 57
 12512  006AC6  0060  F02B  FFD8   	movff	??_TMR4_ISR,16344
 12513  006ACC  0011               	retfie		f
 12514  006ACE                     __end_of_TMR4_ISR:
 12515                           	opt stack 0
 12516                           
 12517 ;; *************** function _LW_motor *****************
 12518 ;; Defined at:
 12519 ;;		line 55 in file "Functions.c"
 12520 ;; Parameters:    Size  Location     Type
 12521 ;;		None
 12522 ;; Auto vars:     Size  Location     Type
 12523 ;;		None
 12524 ;; Return value:  Size  Location     Type
 12525 ;;                  1    wreg      void 
 12526 ;; Registers used:
 12527 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12528 ;; Tracked objects:
 12529 ;;		On entry : 0/0
 12530 ;;		On exit  : 0/0
 12531 ;;		Unchanged: 0/0
 12532 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
 12533 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 12534 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 12535 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 12536 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 12537 ;;Total ram usage:        0 bytes
 12538 ;; Hardware stack levels used:    1
 12539 ;; Hardware stack levels required when called:    4
 12540 ;; This function calls:
 12541 ;;		_LW_motor_LAT
 12542 ;; This function is called by:
 12543 ;;		_TMR4_ISR
 12544 ;; This function uses a non-reentrant model
 12545 ;;
 12546                           
 12547                           	psect	text59
 12548  006700                     __ptext59:
 12549                           	opt stack 0
 12550  006700                     _LW_motor:
 12551                           	opt stack 20
 12552                           
 12553                           ;Functions.c: 59: if(lwrist_steps>0)
 12554                           
 12555                           ; BSR set to: 57
 12556                           ;incstack = 0
 12557  006700  0100               	movlb	0	; () banked
 12558  006702  BFEE               	btfsc	(_lwrist_steps+1)& (0+255),7,b
 12559  006704  D007               	goto	i1l623
 12560  006706  51EE               	movf	(_lwrist_steps+1)& (0+255),w,b
 12561  006708  E103               	bnz	i1u433_20
 12562  00670A  05ED               	decf	_lwrist_steps& (0+255),w,b
 12563  00670C  A0D8               	btfss	16344,0,c
 12564  00670E  D002               	goto	i1l623
 12565  006710                     i1u433_20:
 12566                           
 12567                           ; BSR set to: 0
 12568                           ;Functions.c: 60: {
 12569                           ;Functions.c: 61: LW_phase++;
 12570  006710  2BF4               	incf	_LW_phase& (0+255),f,b
 12571                           
 12572                           ;Functions.c: 63: }
 12573  006712  D001               	goto	i1l624
 12574  006714                     i1l623:
 12575                           
 12576                           ; BSR set to: 0
 12577                           ;Functions.c: 64: else
 12578                           ;Functions.c: 65: {
 12579                           ;Functions.c: 66: LW_phase--;
 12580                           
 12581                           ; BSR set to: 0
 12582  006714  07F4               	decf	_LW_phase& (0+255),f,b
 12583  006716                     i1l624:
 12584                           
 12585                           ; BSR set to: 0
 12586                           ;Functions.c: 68: }
 12587                           ;Functions.c: 69: if(LW_phase>7) LW_phase=0;
 12588                           
 12589                           ; BSR set to: 0
 12590  006716  51F4               	movf	_LW_phase& (0+255),w,b
 12591  006718  0A80               	xorlw	128
 12592  00671A  0F78               	addlw	-136
 12593  00671C  A0D8               	btfss	16344,0,c
 12594  00671E  D002               	goto	i1l625
 12595                           
 12596                           ; BSR set to: 0
 12597  006720  0E00               	movlw	0
 12598  006722  6FF4               	movwf	_LW_phase& (0+255),b
 12599  006724                     i1l625:
 12600                           
 12601                           ; BSR set to: 0
 12602                           ;Functions.c: 70: if(LW_phase<0) LW_phase=7;
 12603                           
 12604                           ; BSR set to: 0
 12605  006724  AFF4               	btfss	_LW_phase& (0+255),7,b
 12606  006726  D002               	goto	i1l626
 12607                           
 12608                           ; BSR set to: 0
 12609  006728  0E07               	movlw	7
 12610  00672A  6FF4               	movwf	_LW_phase& (0+255),b
 12611  00672C                     i1l626:
 12612                           
 12613                           ; BSR set to: 0
 12614                           ;Functions.c: 71: LW_motor_LAT();
 12615                           
 12616                           ; BSR set to: 0
 12617  00672C  ECF2  F033         	call	_LW_motor_LAT	;wreg free
 12618  006730  0012               	return		;funcret
 12619  006732                     __end_of_LW_motor:
 12620                           	opt stack 0
 12621                           
 12622 ;; *************** function _LW_motor_LAT *****************
 12623 ;; Defined at:
 12624 ;;		line 12 in file "Functions.c"
 12625 ;; Parameters:    Size  Location     Type
 12626 ;;		None
 12627 ;; Auto vars:     Size  Location     Type
 12628 ;;		None
 12629 ;; Return value:  Size  Location     Type
 12630 ;;                  1    wreg      void 
 12631 ;; Registers used:
 12632 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 12633 ;; Tracked objects:
 12634 ;;		On entry : 0/0
 12635 ;;		On exit  : 0/0
 12636 ;;		Unchanged: 0/0
 12637 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
 12638 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 12639 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 12640 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 12641 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 12642 ;;Total ram usage:        0 bytes
 12643 ;; Hardware stack levels used:    1
 12644 ;; Hardware stack levels required when called:    3
 12645 ;; This function calls:
 12646 ;;		Nothing
 12647 ;; This function is called by:
 12648 ;;		_LW_motor
 12649 ;; This function uses a non-reentrant model
 12650 ;;
 12651                           
 12652                           	psect	text60
 12653  0067E4                     __ptext60:
 12654                           	opt stack 0
 12655  0067E4                     _LW_motor_LAT:
 12656                           	opt stack 20
 12657                           
 12658                           ;Functions.c: 14: LAT_copy = LATC;
 12659                           
 12660                           ;incstack = 0
 12661  0067E4  006F FEF0  F04F    	movff	16316,_LAT_copy	;volatile
 12662                           
 12663                           ;Functions.c: 15: LAT_copy = (LAT_copy & 0b00001111);
 12664  0067EA  504F               	movf	_LAT_copy,w,c
 12665  0067EC  0B0F               	andlw	15
 12666  0067EE  6E4F               	movwf	_LAT_copy,c
 12667                           
 12668                           ;Functions.c: 16: LATC = (LAT_copy | LWM_phases[LW_phase]);
 12669  0067F0  0100               	movlb	0	; () banked
 12670  0067F2  51F4               	movf	_LW_phase& (0+255),w,b
 12671  0067F4  0D01               	mullw	1
 12672  0067F6  0E28               	movlw	low _LWM_phases
 12673  0067F8  24F3               	addwf	16371,w,c
 12674  0067FA  6ED9               	movwf	16345,c
 12675  0067FC  0E01               	movlw	high _LWM_phases
 12676  0067FE  20F4               	addwfc	16372,w,c
 12677  006800  6EDA               	movwf	16346,c
 12678  006802  50DF               	movf	16351,w,c
 12679  006804  104F               	iorwf	_LAT_copy,w,c
 12680  006806  013F               	movlb	63	; () banked
 12681  006808  6FBC               	movwf	188,b	;volatile
 12682                           
 12683                           ; BSR set to: 63
 12684  00680A  0012               	return		;funcret
 12685  00680C                     __end_of_LW_motor_LAT:
 12686                           	opt stack 0
 12687                           
 12688 ;; *************** function _TMR6_ISR *****************
 12689 ;; Defined at:
 12690 ;;		line 44 in file "mcc_generated_files/tmr6.c"
 12691 ;; Parameters:    Size  Location     Type
 12692 ;;		None
 12693 ;; Auto vars:     Size  Location     Type
 12694 ;;		None
 12695 ;; Return value:  Size  Location     Type
 12696 ;;                  1    wreg      void 
 12697 ;; Registers used:
 12698 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12699 ;; Tracked objects:
 12700 ;;		On entry : 0/0
 12701 ;;		On exit  : 0/0
 12702 ;;		Unchanged: 0/0
 12703 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
 12704 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 12705 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 12706 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 12707 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 12708 ;;Total ram usage:        1 bytes
 12709 ;; Hardware stack levels used:    1
 12710 ;; Hardware stack levels required when called:    5
 12711 ;; This function calls:
 12712 ;;		_RW_motor
 12713 ;; This function is called by:
 12714 ;;		Interrupt level 1
 12715 ;; This function uses a non-reentrant model
 12716 ;;
 12717                           
 12718                           	psect	text61
 12719  006AD0                     __ptext61:
 12720                           	opt stack 0
 12721  006AD0                     _TMR6_ISR:
 12722                           	opt stack 20
 12723                           
 12724                           ; BSR set to: 63
 12725                           ;incstack = 0
 12726  006AD0  006F FF60  F00B    	movff	16344,??_TMR6_ISR
 12727                           
 12728                           ;tmr6.c: 46: RW_motor();
 12729  006AD6  EC99  F033         	call	_RW_motor	;wreg free
 12730                           
 12731                           ;tmr6.c: 48: TMR6IF=0;
 12732  006ADA  0139               	movlb	57	; () banked
 12733  006ADC  91A9               	bcf	169,0,b	;volatile
 12734                           
 12735                           ; BSR set to: 57
 12736  006ADE  0060  F02F  FFD8   	movff	??_TMR6_ISR,16344
 12737  006AE4  0011               	retfie		f
 12738  006AE6                     __end_of_TMR6_ISR:
 12739                           	opt stack 0
 12740                           
 12741 ;; *************** function _RW_motor *****************
 12742 ;; Defined at:
 12743 ;;		line 79 in file "Functions.c"
 12744 ;; Parameters:    Size  Location     Type
 12745 ;;		None
 12746 ;; Auto vars:     Size  Location     Type
 12747 ;;		None
 12748 ;; Return value:  Size  Location     Type
 12749 ;;                  1    wreg      void 
 12750 ;; Registers used:
 12751 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12752 ;; Tracked objects:
 12753 ;;		On entry : 0/0
 12754 ;;		On exit  : 0/0
 12755 ;;		Unchanged: 0/0
 12756 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
 12757 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 12758 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 12759 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 12760 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 12761 ;;Total ram usage:        0 bytes
 12762 ;; Hardware stack levels used:    1
 12763 ;; Hardware stack levels required when called:    4
 12764 ;; This function calls:
 12765 ;;		_RW_motor_LAT
 12766 ;; This function is called by:
 12767 ;;		_TMR6_ISR
 12768 ;; This function uses a non-reentrant model
 12769 ;;
 12770                           
 12771                           	psect	text62
 12772  006732                     __ptext62:
 12773                           	opt stack 0
 12774  006732                     _RW_motor:
 12775                           	opt stack 20
 12776                           
 12777                           ;Functions.c: 83: if(rwrist_steps>0)
 12778                           
 12779                           ; BSR set to: 57
 12780                           ;incstack = 0
 12781  006732  0100               	movlb	0	; () banked
 12782  006734  BFEA               	btfsc	(_rwrist_steps+1)& (0+255),7,b
 12783  006736  D007               	goto	i1l630
 12784  006738  51EA               	movf	(_rwrist_steps+1)& (0+255),w,b
 12785  00673A  E103               	bnz	i1u436_20
 12786  00673C  05E9               	decf	_rwrist_steps& (0+255),w,b
 12787  00673E  A0D8               	btfss	16344,0,c
 12788  006740  D002               	goto	i1l630
 12789  006742                     i1u436_20:
 12790                           
 12791                           ; BSR set to: 0
 12792                           ;Functions.c: 84: {
 12793                           ;Functions.c: 85: RW_phase++;
 12794  006742  2BF3               	incf	_RW_phase& (0+255),f,b
 12795                           
 12796                           ;Functions.c: 87: }
 12797  006744  D001               	goto	i1l631
 12798  006746                     i1l630:
 12799                           
 12800                           ; BSR set to: 0
 12801                           ;Functions.c: 88: else
 12802                           ;Functions.c: 89: {
 12803                           ;Functions.c: 90: RW_phase--;
 12804                           
 12805                           ; BSR set to: 0
 12806  006746  07F3               	decf	_RW_phase& (0+255),f,b
 12807  006748                     i1l631:
 12808                           
 12809                           ; BSR set to: 0
 12810                           ;Functions.c: 92: }
 12811                           ;Functions.c: 93: if(RW_phase>7) RW_phase=0;
 12812                           
 12813                           ; BSR set to: 0
 12814  006748  51F3               	movf	_RW_phase& (0+255),w,b
 12815  00674A  0A80               	xorlw	128
 12816  00674C  0F78               	addlw	-136
 12817  00674E  A0D8               	btfss	16344,0,c
 12818  006750  D002               	goto	i1l632
 12819                           
 12820                           ; BSR set to: 0
 12821  006752  0E00               	movlw	0
 12822  006754  6FF3               	movwf	_RW_phase& (0+255),b
 12823  006756                     i1l632:
 12824                           
 12825                           ; BSR set to: 0
 12826                           ;Functions.c: 94: if(RW_phase<0) RW_phase=7;
 12827                           
 12828                           ; BSR set to: 0
 12829  006756  AFF3               	btfss	_RW_phase& (0+255),7,b
 12830  006758  D002               	goto	i1l633
 12831                           
 12832                           ; BSR set to: 0
 12833  00675A  0E07               	movlw	7
 12834  00675C  6FF3               	movwf	_RW_phase& (0+255),b
 12835  00675E                     i1l633:
 12836                           
 12837                           ; BSR set to: 0
 12838                           ;Functions.c: 95: RW_motor_LAT();
 12839                           
 12840                           ; BSR set to: 0
 12841  00675E  EC06  F034         	call	_RW_motor_LAT	;wreg free
 12842  006762  0012               	return		;funcret
 12843  006764                     __end_of_RW_motor:
 12844                           	opt stack 0
 12845                           
 12846 ;; *************** function _RW_motor_LAT *****************
 12847 ;; Defined at:
 12848 ;;		line 19 in file "Functions.c"
 12849 ;; Parameters:    Size  Location     Type
 12850 ;;		None
 12851 ;; Auto vars:     Size  Location     Type
 12852 ;;		None
 12853 ;; Return value:  Size  Location     Type
 12854 ;;                  1    wreg      void 
 12855 ;; Registers used:
 12856 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 12857 ;; Tracked objects:
 12858 ;;		On entry : 0/0
 12859 ;;		On exit  : 0/0
 12860 ;;		Unchanged: 0/0
 12861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
 12862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 12863 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 12864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 12865 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 12866 ;;Total ram usage:        0 bytes
 12867 ;; Hardware stack levels used:    1
 12868 ;; Hardware stack levels required when called:    3
 12869 ;; This function calls:
 12870 ;;		Nothing
 12871 ;; This function is called by:
 12872 ;;		_RW_motor
 12873 ;; This function uses a non-reentrant model
 12874 ;;
 12875                           
 12876                           	psect	text63
 12877  00680C                     __ptext63:
 12878                           	opt stack 0
 12879  00680C                     _RW_motor_LAT:
 12880                           	opt stack 20
 12881                           
 12882                           ;Functions.c: 21: LAT_copy = LATD;
 12883                           
 12884                           ;incstack = 0
 12885  00680C  006F FEF4  F04F    	movff	16317,_LAT_copy	;volatile
 12886                           
 12887                           ;Functions.c: 22: LAT_copy = (LAT_copy & 0b00001111);
 12888  006812  504F               	movf	_LAT_copy,w,c
 12889  006814  0B0F               	andlw	15
 12890  006816  6E4F               	movwf	_LAT_copy,c
 12891                           
 12892                           ;Functions.c: 23: LATD = (LAT_copy | RWM_phases[RW_phase]);
 12893  006818  0100               	movlb	0	; () banked
 12894  00681A  51F3               	movf	_RW_phase& (0+255),w,b
 12895  00681C  0D01               	mullw	1
 12896  00681E  0E20               	movlw	low _RWM_phases
 12897  006820  24F3               	addwf	16371,w,c
 12898  006822  6ED9               	movwf	16345,c
 12899  006824  0E01               	movlw	high _RWM_phases
 12900  006826  20F4               	addwfc	16372,w,c
 12901  006828  6EDA               	movwf	16346,c
 12902  00682A  50DF               	movf	16351,w,c
 12903  00682C  104F               	iorwf	_LAT_copy,w,c
 12904  00682E  013F               	movlb	63	; () banked
 12905  006830  6FBD               	movwf	189,b	;volatile
 12906                           
 12907                           ; BSR set to: 63
 12908  006832  0012               	return		;funcret
 12909  006834                     __end_of_RW_motor_LAT:
 12910                           	opt stack 0
 12911                           
 12912 ;; *************** function _TMR5_ISR *****************
 12913 ;; Defined at:
 12914 ;;		line 45 in file "mcc_generated_files/tmr5.c"
 12915 ;; Parameters:    Size  Location     Type
 12916 ;;		None
 12917 ;; Auto vars:     Size  Location     Type
 12918 ;;		None
 12919 ;; Return value:  Size  Location     Type
 12920 ;;                  1    wreg      void 
 12921 ;; Registers used:
 12922 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12923 ;; Tracked objects:
 12924 ;;		On entry : 0/0
 12925 ;;		On exit  : 0/0
 12926 ;;		Unchanged: 0/0
 12927 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
 12928 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 12929 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 12930 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 12931 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 12932 ;;Total ram usage:        1 bytes
 12933 ;; Hardware stack levels used:    1
 12934 ;; Hardware stack levels required when called:    5
 12935 ;; This function calls:
 12936 ;;		_G_motor
 12937 ;; This function is called by:
 12938 ;;		Interrupt level 1
 12939 ;; This function uses a non-reentrant model
 12940 ;;
 12941                           
 12942                           	psect	text64
 12943  0069C4                     __ptext64:
 12944                           	opt stack 0
 12945  0069C4                     _TMR5_ISR:
 12946                           	opt stack 20
 12947                           
 12948                           ; BSR set to: 63
 12949                           ;incstack = 0
 12950  0069C4  006F FF60  F00C    	movff	16344,??_TMR5_ISR
 12951                           
 12952                           ;tmr5.c: 47: G_motor();
 12953  0069CA  EC5A  F031         	call	_G_motor	;wreg free
 12954                           
 12955                           ;tmr5.c: 49: TMR5H = 0x63;
 12956  0069CE  0E63               	movlw	99
 12957  0069D0  013F               	movlb	63	; () banked
 12958  0069D2  6F99               	movwf	153,b	;volatile
 12959                           
 12960                           ; BSR set to: 63
 12961                           ;tmr5.c: 50: TMR5L = 0xC0;
 12962  0069D4  0EC0               	movlw	192
 12963  0069D6  6F98               	movwf	152,b	;volatile
 12964                           
 12965                           ; BSR set to: 63
 12966                           ;tmr5.c: 52: TMR5IF=0;
 12967  0069D8  0139               	movlb	57	; () banked
 12968  0069DA  9DA8               	bcf	168,6,b	;volatile
 12969                           
 12970                           ; BSR set to: 57
 12971  0069DC  0060  F033  FFD8   	movff	??_TMR5_ISR,16344
 12972  0069E2  0011               	retfie		f
 12973  0069E4                     __end_of_TMR5_ISR:
 12974                           	opt stack 0
 12975                           
 12976 ;; *************** function _G_motor *****************
 12977 ;; Defined at:
 12978 ;;		line 179 in file "Functions.c"
 12979 ;; Parameters:    Size  Location     Type
 12980 ;;		None
 12981 ;; Auto vars:     Size  Location     Type
 12982 ;;		None
 12983 ;; Return value:  Size  Location     Type
 12984 ;;                  1    wreg      void 
 12985 ;; Registers used:
 12986 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 12987 ;; Tracked objects:
 12988 ;;		On entry : 0/0
 12989 ;;		On exit  : 0/0
 12990 ;;		Unchanged: 0/0
 12991 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
 12992 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 12993 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 12994 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 12995 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 12996 ;;Total ram usage:        0 bytes
 12997 ;; Hardware stack levels used:    1
 12998 ;; Hardware stack levels required when called:    4
 12999 ;; This function calls:
 13000 ;;		_G_motor_LAT
 13001 ;; This function is called by:
 13002 ;;		_TMR5_ISR
 13003 ;; This function uses a non-reentrant model
 13004 ;;
 13005                           
 13006                           	psect	text65
 13007  0062B4                     __ptext65:
 13008                           	opt stack 0
 13009  0062B4                     _G_motor:
 13010                           	opt stack 20
 13011                           
 13012                           ;Functions.c: 181: if(grip_steps_count != grip_steps)
 13013                           
 13014                           ; BSR set to: 57
 13015                           ;incstack = 0
 13016  0062B4  0100               	movlb	0	; () banked
 13017  0062B6  51DD               	movf	_grip_steps& (0+255),w,b
 13018  0062B8  1847               	xorwf	_grip_steps_count,w,c
 13019  0062BA  E104               	bnz	i1u439_20
 13020  0062BC  51DE               	movf	(_grip_steps+1)& (0+255),w,b
 13021  0062BE  1848               	xorwf	_grip_steps_count+1,w,c
 13022  0062C0  B4D8               	btfsc	16344,2,c
 13023  0062C2  D025               	goto	i1l662
 13024  0062C4                     i1u439_20:
 13025                           
 13026                           ; BSR set to: 0
 13027                           ;Functions.c: 182: {
 13028                           ;Functions.c: 183: if(grip_steps>0)
 13029  0062C4  BFDE               	btfsc	(_grip_steps+1)& (0+255),7,b
 13030  0062C6  D00F               	goto	i1l663
 13031  0062C8  51DE               	movf	(_grip_steps+1)& (0+255),w,b
 13032  0062CA  E103               	bnz	i1u440_20
 13033  0062CC  05DD               	decf	_grip_steps& (0+255),w,b
 13034  0062CE  A0D8               	btfss	16344,0,c
 13035  0062D0  D00A               	goto	i1l663
 13036  0062D2                     i1u440_20:
 13037                           
 13038                           ; BSR set to: 0
 13039                           ;Functions.c: 184: {
 13040                           ;Functions.c: 185: if(PORTEbits.RE2 == 1)
 13041  0062D2  013F               	movlb	63	; () banked
 13042  0062D4  A5CE               	btfss	206,2,b	;volatile
 13043  0062D6  D005               	goto	i1l664
 13044                           
 13045                           ; BSR set to: 63
 13046                           ;Functions.c: 186: {
 13047                           ;Functions.c: 187: G_phase++;
 13048  0062D8  0100               	movlb	0	; () banked
 13049  0062DA  2BEF               	incf	_G_phase& (0+255),f,b
 13050                           
 13051                           ;Functions.c: 188: grip_steps_count++;
 13052  0062DC  4A47               	infsnz	_grip_steps_count,f,c
 13053  0062DE  2A48               	incf	_grip_steps_count+1,f,c
 13054                           
 13055                           ;Functions.c: 189: }
 13056  0062E0  D007               	goto	i1l666
 13057  0062E2                     i1l664:
 13058                           
 13059                           ; BSR set to: 63
 13060                           ;Functions.c: 190: else
 13061                           ;Functions.c: 191: T5CONbits.ON=0;
 13062  0062E2  919A               	bcf	154,0,b	;volatile
 13063                           
 13064                           ; BSR set to: 63
 13065                           ;Functions.c: 192: }
 13066  0062E4  D005               	goto	i1l666
 13067  0062E6                     i1l663:
 13068                           
 13069                           ;Functions.c: 193: else
 13070                           ;Functions.c: 194: {
 13071                           ;Functions.c: 195: G_phase--;
 13072                           
 13073                           ; BSR set to: 63
 13074  0062E6  0100               	movlb	0	; () banked
 13075  0062E8  07EF               	decf	_G_phase& (0+255),f,b
 13076                           
 13077                           ;Functions.c: 196: grip_steps_count--;
 13078  0062EA  0647               	decf	_grip_steps_count,f,c
 13079  0062EC  A0D8               	btfss	16344,0,c
 13080  0062EE  0648               	decf	_grip_steps_count+1,f,c
 13081  0062F0                     i1l666:
 13082                           
 13083                           ;Functions.c: 197: }
 13084                           ;Functions.c: 198: if(G_phase>7) G_phase=0;
 13085                           
 13086                           ; BSR set to: 0
 13087  0062F0  0100               	movlb	0	; () banked
 13088  0062F2  51EF               	movf	_G_phase& (0+255),w,b
 13089  0062F4  0A80               	xorlw	128
 13090  0062F6  0F78               	addlw	-136
 13091  0062F8  A0D8               	btfss	16344,0,c
 13092  0062FA  D002               	goto	i1l667
 13093                           
 13094                           ; BSR set to: 0
 13095  0062FC  0E00               	movlw	0
 13096  0062FE  6FEF               	movwf	_G_phase& (0+255),b
 13097  006300                     i1l667:
 13098                           
 13099                           ; BSR set to: 0
 13100                           ;Functions.c: 199: if(G_phase<0) G_phase=7;
 13101                           
 13102                           ; BSR set to: 0
 13103  006300  AFEF               	btfss	_G_phase& (0+255),7,b
 13104  006302  D002               	goto	i1l668
 13105                           
 13106                           ; BSR set to: 0
 13107  006304  0E07               	movlw	7
 13108  006306  6FEF               	movwf	_G_phase& (0+255),b
 13109  006308                     i1l668:
 13110                           
 13111                           ; BSR set to: 0
 13112                           ;Functions.c: 200: G_motor_LAT();
 13113                           
 13114                           ; BSR set to: 0
 13115  006308  EC1A  F034         	call	_G_motor_LAT	;wreg free
 13116                           
 13117                           ;Functions.c: 201: }
 13118  00630C  0012               	return	
 13119  00630E                     i1l662:
 13120                           
 13121                           ; BSR set to: 0
 13122                           ;Functions.c: 202: else
 13123                           ;Functions.c: 203: {
 13124                           ;Functions.c: 204: T5CONbits.ON=0;
 13125  00630E  013F               	movlb	63	; () banked
 13126  006310  919A               	bcf	154,0,b	;volatile
 13127                           
 13128                           ; BSR set to: 63
 13129                           ;Functions.c: 205: grip_steps=0;
 13130  006312  0E00               	movlw	0
 13131  006314  0100               	movlb	0	; () banked
 13132  006316  6FDE               	movwf	(_grip_steps+1)& (0+255),b
 13133  006318  0E00               	movlw	0
 13134  00631A  6FDD               	movwf	_grip_steps& (0+255),b
 13135  00631C  0012               	return	
 13136  00631E                     __end_of_G_motor:
 13137                           	opt stack 0
 13138                           
 13139 ;; *************** function _G_motor_LAT *****************
 13140 ;; Defined at:
 13141 ;;		line 47 in file "Functions.c"
 13142 ;; Parameters:    Size  Location     Type
 13143 ;;		None
 13144 ;; Auto vars:     Size  Location     Type
 13145 ;;		None
 13146 ;; Return value:  Size  Location     Type
 13147 ;;                  1    wreg      void 
 13148 ;; Registers used:
 13149 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 13150 ;; Tracked objects:
 13151 ;;		On entry : 0/0
 13152 ;;		On exit  : 0/0
 13153 ;;		Unchanged: 0/0
 13154 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
 13155 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 13156 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 13157 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 13158 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 13159 ;;Total ram usage:        0 bytes
 13160 ;; Hardware stack levels used:    1
 13161 ;; Hardware stack levels required when called:    3
 13162 ;; This function calls:
 13163 ;;		Nothing
 13164 ;; This function is called by:
 13165 ;;		_G_motor
 13166 ;; This function uses a non-reentrant model
 13167 ;;
 13168                           
 13169                           	psect	text66
 13170  006834                     __ptext66:
 13171                           	opt stack 0
 13172  006834                     _G_motor_LAT:
 13173                           	opt stack 20
 13174                           
 13175                           ;Functions.c: 49: LAT_copy = LATA;
 13176                           
 13177                           ;incstack = 0
 13178  006834  006F FEE8  F04F    	movff	16314,_LAT_copy	;volatile
 13179                           
 13180                           ;Functions.c: 50: LAT_copy = (LAT_copy & 0b00001111);
 13181  00683A  504F               	movf	_LAT_copy,w,c
 13182  00683C  0B0F               	andlw	15
 13183  00683E  6E4F               	movwf	_LAT_copy,c
 13184                           
 13185                           ;Functions.c: 51: LATA = (LAT_copy | GM_phases[G_phase]);
 13186  006840  0100               	movlb	0	; () banked
 13187  006842  51EF               	movf	_G_phase& (0+255),w,b
 13188  006844  0D01               	mullw	1
 13189  006846  0E00               	movlw	low _GM_phases
 13190  006848  24F3               	addwf	16371,w,c
 13191  00684A  6ED9               	movwf	16345,c
 13192  00684C  0E01               	movlw	high _GM_phases
 13193  00684E  20F4               	addwfc	16372,w,c
 13194  006850  6EDA               	movwf	16346,c
 13195  006852  50DF               	movf	16351,w,c
 13196  006854  104F               	iorwf	_LAT_copy,w,c
 13197  006856  013F               	movlb	63	; () banked
 13198  006858  6FBA               	movwf	186,b	;volatile
 13199                           
 13200                           ; BSR set to: 63
 13201  00685A  0012               	return		;funcret
 13202  00685C                     __end_of_G_motor_LAT:
 13203                           	opt stack 0
 13204                           
 13205 ;; *************** function _TMR3_ISR *****************
 13206 ;; Defined at:
 13207 ;;		line 46 in file "mcc_generated_files/tmr3.c"
 13208 ;; Parameters:    Size  Location     Type
 13209 ;;		None
 13210 ;; Auto vars:     Size  Location     Type
 13211 ;;		None
 13212 ;; Return value:  Size  Location     Type
 13213 ;;                  1    wreg      void 
 13214 ;; Registers used:
 13215 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13216 ;; Tracked objects:
 13217 ;;		On entry : 0/0
 13218 ;;		On exit  : 0/0
 13219 ;;		Unchanged: 0/0
 13220 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
 13221 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 13222 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 13223 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 13224 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 13225 ;;Total ram usage:        1 bytes
 13226 ;; Hardware stack levels used:    1
 13227 ;; Hardware stack levels required when called:    5
 13228 ;; This function calls:
 13229 ;;		_E_motor
 13230 ;; This function is called by:
 13231 ;;		Interrupt level 1
 13232 ;; This function uses a non-reentrant model
 13233 ;;
 13234                           
 13235                           	psect	text67
 13236  0069E4                     __ptext67:
 13237                           	opt stack 0
 13238  0069E4                     _TMR3_ISR:
 13239                           	opt stack 20
 13240                           
 13241                           ; BSR set to: 63
 13242                           ;incstack = 0
 13243  0069E4  006F FF60  F00D    	movff	16344,??_TMR3_ISR
 13244                           
 13245                           ;tmr3.c: 48: E_motor();
 13246  0069EA  EC3A  F032         	call	_E_motor	;wreg free
 13247                           
 13248                           ;tmr3.c: 50: TMR3H = 0x63;
 13249  0069EE  0E63               	movlw	99
 13250  0069F0  013F               	movlb	63	; () banked
 13251  0069F2  6FA5               	movwf	165,b	;volatile
 13252                           
 13253                           ; BSR set to: 63
 13254                           ;tmr3.c: 51: TMR3L = 0xC0;
 13255  0069F4  0EC0               	movlw	192
 13256  0069F6  6FA4               	movwf	164,b	;volatile
 13257                           
 13258                           ; BSR set to: 63
 13259                           ;tmr3.c: 53: TMR3IF=0;
 13260  0069F8  0139               	movlb	57	; () banked
 13261  0069FA  9DA6               	bcf	166,6,b	;volatile
 13262                           
 13263                           ; BSR set to: 57
 13264  0069FC  0060  F037  FFD8   	movff	??_TMR3_ISR,16344
 13265  006A02  0011               	retfie		f
 13266  006A04                     __end_of_TMR3_ISR:
 13267                           	opt stack 0
 13268                           
 13269 ;; *************** function _E_motor *****************
 13270 ;; Defined at:
 13271 ;;		line 151 in file "Functions.c"
 13272 ;; Parameters:    Size  Location     Type
 13273 ;;		None
 13274 ;; Auto vars:     Size  Location     Type
 13275 ;;		None
 13276 ;; Return value:  Size  Location     Type
 13277 ;;                  1    wreg      void 
 13278 ;; Registers used:
 13279 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13280 ;; Tracked objects:
 13281 ;;		On entry : 0/0
 13282 ;;		On exit  : 0/0
 13283 ;;		Unchanged: 0/0
 13284 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
 13285 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 13286 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 13287 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 13288 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 13289 ;;Total ram usage:        0 bytes
 13290 ;; Hardware stack levels used:    1
 13291 ;; Hardware stack levels required when called:    4
 13292 ;; This function calls:
 13293 ;;		_E_motor_LAT
 13294 ;; This function is called by:
 13295 ;;		_TMR3_ISR
 13296 ;; This function uses a non-reentrant model
 13297 ;;
 13298                           
 13299                           	psect	text68
 13300  006474                     __ptext68:
 13301                           	opt stack 0
 13302  006474                     _E_motor:
 13303                           	opt stack 20
 13304                           
 13305                           ;Functions.c: 153: if(elbow_steps_count != elbow_steps)
 13306                           
 13307                           ; BSR set to: 57
 13308                           ;incstack = 0
 13309  006474  0100               	movlb	0	; () banked
 13310  006476  51E5               	movf	_elbow_steps& (0+255),w,b
 13311  006478  1849               	xorwf	_elbow_steps_count,w,c
 13312  00647A  E104               	bnz	i1u444_20
 13313  00647C  51E6               	movf	(_elbow_steps+1)& (0+255),w,b
 13314  00647E  184A               	xorwf	_elbow_steps_count+1,w,c
 13315  006480  B4D8               	btfsc	16344,2,c
 13316  006482  D01D               	goto	i1l653
 13317  006484                     i1u444_20:
 13318                           
 13319                           ; BSR set to: 0
 13320                           ;Functions.c: 154: {
 13321                           ;Functions.c: 155: if(elbow_steps>0)
 13322  006484  BFE6               	btfsc	(_elbow_steps+1)& (0+255),7,b
 13323  006486  D009               	goto	i1l654
 13324  006488  51E6               	movf	(_elbow_steps+1)& (0+255),w,b
 13325  00648A  E103               	bnz	i1u445_20
 13326  00648C  05E5               	decf	_elbow_steps& (0+255),w,b
 13327  00648E  A0D8               	btfss	16344,0,c
 13328  006490  D004               	goto	i1l654
 13329  006492                     i1u445_20:
 13330                           
 13331                           ; BSR set to: 0
 13332                           ;Functions.c: 156: {
 13333                           ;Functions.c: 157: E_phase++;
 13334  006492  2BF0               	incf	_E_phase& (0+255),f,b
 13335                           
 13336                           ;Functions.c: 158: elbow_steps_count++;
 13337  006494  4A49               	infsnz	_elbow_steps_count,f,c
 13338  006496  2A4A               	incf	_elbow_steps_count+1,f,c
 13339                           
 13340                           ;Functions.c: 159: }
 13341  006498  D004               	goto	i1l655
 13342  00649A                     i1l654:
 13343                           
 13344                           ; BSR set to: 0
 13345                           ;Functions.c: 160: else
 13346                           ;Functions.c: 161: {
 13347                           ;Functions.c: 162: E_phase--;
 13348                           
 13349                           ; BSR set to: 0
 13350  00649A  07F0               	decf	_E_phase& (0+255),f,b
 13351                           
 13352                           ;Functions.c: 163: elbow_steps_count--;
 13353  00649C  0649               	decf	_elbow_steps_count,f,c
 13354  00649E  A0D8               	btfss	16344,0,c
 13355  0064A0  064A               	decf	_elbow_steps_count+1,f,c
 13356  0064A2                     i1l655:
 13357                           
 13358                           ; BSR set to: 0
 13359                           ;Functions.c: 164: }
 13360                           ;Functions.c: 165: if(E_phase>7) E_phase=0;
 13361                           
 13362                           ; BSR set to: 0
 13363  0064A2  51F0               	movf	_E_phase& (0+255),w,b
 13364  0064A4  0A80               	xorlw	128
 13365  0064A6  0F78               	addlw	-136
 13366  0064A8  A0D8               	btfss	16344,0,c
 13367  0064AA  D002               	goto	i1l656
 13368                           
 13369                           ; BSR set to: 0
 13370  0064AC  0E00               	movlw	0
 13371  0064AE  6FF0               	movwf	_E_phase& (0+255),b
 13372  0064B0                     i1l656:
 13373                           
 13374                           ; BSR set to: 0
 13375                           ;Functions.c: 166: if(E_phase<0) E_phase=7;
 13376                           
 13377                           ; BSR set to: 0
 13378  0064B0  AFF0               	btfss	_E_phase& (0+255),7,b
 13379  0064B2  D002               	goto	i1l657
 13380                           
 13381                           ; BSR set to: 0
 13382  0064B4  0E07               	movlw	7
 13383  0064B6  6FF0               	movwf	_E_phase& (0+255),b
 13384  0064B8                     i1l657:
 13385                           
 13386                           ; BSR set to: 0
 13387                           ;Functions.c: 167: E_motor_LAT();
 13388                           
 13389                           ; BSR set to: 0
 13390  0064B8  EC2E  F034         	call	_E_motor_LAT	;wreg free
 13391                           
 13392                           ;Functions.c: 168: }
 13393  0064BC  0012               	return	
 13394  0064BE                     i1l653:
 13395                           
 13396                           ; BSR set to: 0
 13397                           ;Functions.c: 169: else
 13398                           ;Functions.c: 170: {
 13399                           ;Functions.c: 171: T3CONbits.ON=0;
 13400  0064BE  013F               	movlb	63	; () banked
 13401  0064C0  91A6               	bcf	166,0,b	;volatile
 13402  0064C2  0012               	return	
 13403  0064C4                     __end_of_E_motor:
 13404                           	opt stack 0
 13405                           
 13406 ;; *************** function _E_motor_LAT *****************
 13407 ;; Defined at:
 13408 ;;		line 40 in file "Functions.c"
 13409 ;; Parameters:    Size  Location     Type
 13410 ;;		None
 13411 ;; Auto vars:     Size  Location     Type
 13412 ;;		None
 13413 ;; Return value:  Size  Location     Type
 13414 ;;                  1    wreg      void 
 13415 ;; Registers used:
 13416 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
 13417 ;; Tracked objects:
 13418 ;;		On entry : 0/0
 13419 ;;		On exit  : 0/0
 13420 ;;		Unchanged: 0/0
 13421 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
 13422 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 13423 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 13424 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 13425 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 13426 ;;Total ram usage:        0 bytes
 13427 ;; Hardware stack levels used:    1
 13428 ;; Hardware stack levels required when called:    3
 13429 ;; This function calls:
 13430 ;;		Nothing
 13431 ;; This function is called by:
 13432 ;;		_E_motor
 13433 ;; This function uses a non-reentrant model
 13434 ;;
 13435                           
 13436                           	psect	text69
 13437  00685C                     __ptext69:
 13438                           	opt stack 0
 13439  00685C                     _E_motor_LAT:
 13440                           	opt stack 20
 13441                           
 13442                           ;Functions.c: 42: LAT_copy = LATA;
 13443                           
 13444                           ;incstack = 0
 13445  00685C  006F FEE8  F04F    	movff	16314,_LAT_copy	;volatile
 13446                           
 13447                           ;Functions.c: 43: LAT_copy = (LAT_copy & 0b11110000);
 13448  006862  504F               	movf	_LAT_copy,w,c
 13449  006864  0BF0               	andlw	240
 13450  006866  6E4F               	movwf	_LAT_copy,c
 13451                           
 13452                           ;Functions.c: 44: LATA = (LAT_copy | EM_phases[E_phase]);
 13453  006868  0100               	movlb	0	; () banked
 13454  00686A  51F0               	movf	_E_phase& (0+255),w,b
 13455  00686C  0D01               	mullw	1
 13456  00686E  0E08               	movlw	low _EM_phases
 13457  006870  24F3               	addwf	16371,w,c
 13458  006872  6ED9               	movwf	16345,c
 13459  006874  0E01               	movlw	high _EM_phases
 13460  006876  20F4               	addwfc	16372,w,c
 13461  006878  6EDA               	movwf	16346,c
 13462  00687A  50DF               	movf	16351,w,c
 13463  00687C  104F               	iorwf	_LAT_copy,w,c
 13464  00687E  013F               	movlb	63	; () banked
 13465  006880  6FBA               	movwf	186,b	;volatile
 13466                           
 13467                           ; BSR set to: 63
 13468  006882  0012               	return		;funcret
 13469  006884                     __end_of_E_motor_LAT:
 13470                           	opt stack 0
 13471                           
 13472 ;; *************** function _Default_ISR *****************
 13473 ;; Defined at:
 13474 ;;		line 81 in file "mcc_generated_files/interrupt_manager.c"
 13475 ;; Parameters:    Size  Location     Type
 13476 ;;		None
 13477 ;; Auto vars:     Size  Location     Type
 13478 ;;		None
 13479 ;; Return value:  Size  Location     Type
 13480 ;;                  1    wreg      void 
 13481 ;; Registers used:
 13482 ;;		None
 13483 ;; Tracked objects:
 13484 ;;		On entry : 0/0
 13485 ;;		On exit  : 0/0
 13486 ;;		Unchanged: 0/0
 13487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
 13488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 13489 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 13490 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 13491 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 13492 ;;Total ram usage:        0 bytes
 13493 ;; Hardware stack levels used:    1
 13494 ;; This function calls:
 13495 ;;		Nothing
 13496 ;; This function is called by:
 13497 ;;		Interrupt level 2
 13498 ;; This function uses a non-reentrant model
 13499 ;;
 13500                           
 13501                           	psect	text70
 13502  006B58                     __ptext70:
 13503                           	opt stack 0
 13504  006B58                     _Default_ISR:
 13505                           	opt stack 22
 13506                           
 13507                           ; BSR set to: 63
 13508                           ;incstack = 0
 13509  006B58  0011               	retfie		f
 13510  006B5A                     __end_of_Default_ISR:
 13511                           	opt stack 0
 13512                           
 13513 ;; *************** function _INT0_ISR *****************
 13514 ;; Defined at:
 13515 ;;		line 28 in file "mcc_generated_files/ext_int.c"
 13516 ;; Parameters:    Size  Location     Type
 13517 ;;		None
 13518 ;; Auto vars:     Size  Location     Type
 13519 ;;		None
 13520 ;; Return value:  Size  Location     Type
 13521 ;;                  1    wreg      void 
 13522 ;; Registers used:
 13523 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13524 ;; Tracked objects:
 13525 ;;		On entry : 0/0
 13526 ;;		On exit  : 0/0
 13527 ;;		Unchanged: 0/0
 13528 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
 13529 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 13530 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 13531 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 13532 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 13533 ;;Total ram usage:        0 bytes
 13534 ;; Hardware stack levels used:    1
 13535 ;; Hardware stack levels required when called:    2
 13536 ;; This function calls:
 13537 ;;		_SPI_Read_Buf
 13538 ;;		i2_SPI_Write_Reg
 13539 ;; This function is called by:
 13540 ;;		Interrupt level 2
 13541 ;; This function uses a non-reentrant model
 13542 ;;
 13543                           
 13544                           	psect	text71
 13545  006668                     __ptext71:
 13546                           	opt stack 0
 13547  006668                     _INT0_ISR:
 13548                           	opt stack 20
 13549                           
 13550                           ;ext_int.c: 30: (PIR1bits.INT0IF = 0);
 13551                           
 13552                           ;incstack = 0
 13553  006668  0139               	movlb	57	; () banked
 13554  00666A  91A1               	bcf	161,0,b	;volatile
 13555                           
 13556                           ; BSR set to: 57
 13557                           ;ext_int.c: 32: SPI_Read_Buf(0x61,rx_buf,2);
 13558  00666C  0E51               	movlw	low _rx_buf
 13559  00666E  6E02               	movwf	SPI_Read_Buf@pBuf,c
 13560  006670  0E00               	movlw	high _rx_buf
 13561  006672  6E03               	movwf	SPI_Read_Buf@pBuf+1,c
 13562  006674  0E02               	movlw	2
 13563  006676  6E04               	movwf	SPI_Read_Buf@length,c
 13564  006678  0E61               	movlw	97
 13565  00667A  ECC3  F032         	call	_SPI_Read_Buf
 13566                           
 13567                           ;ext_int.c: 33: SPI_Write_Reg(0x20|0x07,0x7E);
 13568  00667E  0E7E               	movlw	126
 13569  006680  6E02               	movwf	i2SPI_Write_Reg@value,c
 13570  006682  0E27               	movlw	39
 13571  006684  EC1E  F035         	call	i2_SPI_Write_Reg
 13572                           
 13573                           ;ext_int.c: 35: copia_buf_0= rx_buf[0];
 13574  006688  0060  F144  F0FB   	movff	_rx_buf,_copia_buf_0
 13575  00668E  0100               	movlb	0	; () banked
 13576  006690  6BFC               	clrf	(_copia_buf_0+1)& (0+255),b
 13577                           
 13578                           ; BSR set to: 0
 13579                           ;ext_int.c: 36: copia_buf_1= rx_buf[1];
 13580  006692  0060  F148  F0F9   	movff	_rx_buf+1,_copia_buf_1
 13581  006698  6BFA               	clrf	(_copia_buf_1+1)& (0+255),b
 13582  00669A  0011               	retfie		f
 13583  00669C                     __end_of_INT0_ISR:
 13584                           	opt stack 0
 13585                           
 13586 ;; *************** function i2_SPI_Write_Reg *****************
 13587 ;; Defined at:
 13588 ;;		line 144 in file "RFM70_init_Rx.c"
 13589 ;; Parameters:    Size  Location     Type
 13590 ;;  reg             1    wreg     unsigned char 
 13591 ;;  value           1    1[COMRAM] unsigned char 
 13592 ;; Auto vars:     Size  Location     Type
 13593 ;;  reg             1    2[COMRAM] unsigned char 
 13594 ;;  SPI_Write_Re    1    3[COMRAM] unsigned char 
 13595 ;; Return value:  Size  Location     Type
 13596 ;;                  1    wreg      void 
 13597 ;; Registers used:
 13598 ;;		wreg, status,2, cstack
 13599 ;; Tracked objects:
 13600 ;;		On entry : 0/0
 13601 ;;		On exit  : 0/0
 13602 ;;		Unchanged: 0/0
 13603 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
 13604 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 13605 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 13606 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 13607 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 13608 ;;Total ram usage:        3 bytes
 13609 ;; Hardware stack levels used:    1
 13610 ;; Hardware stack levels required when called:    1
 13611 ;; This function calls:
 13612 ;;		i2_SPI_RW
 13613 ;; This function is called by:
 13614 ;;		_INT0_ISR
 13615 ;; This function uses a non-reentrant model
 13616 ;;
 13617                           
 13618                           	psect	text72
 13619  006A3C                     __ptext72:
 13620                           	opt stack 0
 13621  006A3C                     i2_SPI_Write_Reg:
 13622                           	opt stack 20
 13623                           
 13624                           ; BSR set to: 0
 13625                           ;incstack = 0
 13626                           ;i2SPI_Write_Reg@reg stored from wreg
 13627  006A3C  6E03               	movwf	i2SPI_Write_Reg@reg,c
 13628                           
 13629                           ;RFM70_init_Rx.c: 146: unsigned char status;
 13630                           ;RFM70_init_Rx.c: 147: RB3 = 0;
 13631  006A3E  013F               	movlb	63	; () banked
 13632  006A40  97CB               	bcf	203,3,b	;volatile
 13633                           
 13634                           ; BSR set to: 63
 13635                           ;RFM70_init_Rx.c: 148: status = SPI_RW(reg);
 13636  006A42  5003               	movf	i2SPI_Write_Reg@reg,w,c
 13637  006A44  EC91  F035         	call	i2_SPI_RW
 13638  006A48  6E04               	movwf	i2SPI_Write_Reg@status,c
 13639                           
 13640                           ;RFM70_init_Rx.c: 149: SPI_RW(value);
 13641  006A4A  5002               	movf	i2SPI_Write_Reg@value,w,c
 13642  006A4C  EC91  F035         	call	i2_SPI_RW
 13643                           
 13644                           ;RFM70_init_Rx.c: 150: RB3 = 1;
 13645  006A50  013F               	movlb	63	; () banked
 13646  006A52  87CB               	bsf	203,3,b	;volatile
 13647                           
 13648                           ; BSR set to: 63
 13649  006A54  0012               	return		;funcret
 13650  006A56                     __end_ofi2_SPI_Write_Reg:
 13651                           	opt stack 0
 13652                           
 13653 ;; *************** function _SPI_Read_Buf *****************
 13654 ;; Defined at:
 13655 ;;		line 177 in file "RFM70_init_Rx.c"
 13656 ;; Parameters:    Size  Location     Type
 13657 ;;  reg             1    wreg     unsigned char 
 13658 ;;  pBuf            2    1[COMRAM] PTR unsigned char 
 13659 ;;		 -> rx_buf(2), 
 13660 ;;  length          1    3[COMRAM] unsigned char 
 13661 ;; Auto vars:     Size  Location     Type
 13662 ;;  reg             1    5[COMRAM] unsigned char 
 13663 ;;  byte_ctr        1    6[COMRAM] unsigned char 
 13664 ;;  status          1    4[COMRAM] unsigned char 
 13665 ;; Return value:  Size  Location     Type
 13666 ;;                  1    wreg      void 
 13667 ;; Registers used:
 13668 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
 13669 ;; Tracked objects:
 13670 ;;		On entry : 0/0
 13671 ;;		On exit  : 0/0
 13672 ;;		Unchanged: 0/0
 13673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
 13674 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 13675 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 13676 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 13677 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 13678 ;;Total ram usage:        6 bytes
 13679 ;; Hardware stack levels used:    1
 13680 ;; Hardware stack levels required when called:    1
 13681 ;; This function calls:
 13682 ;;		i2_SPI_RW
 13683 ;; This function is called by:
 13684 ;;		_INT0_ISR
 13685 ;; This function uses a non-reentrant model
 13686 ;;
 13687                           
 13688                           	psect	text73
 13689  006586                     __ptext73:
 13690                           	opt stack 0
 13691  006586                     _SPI_Read_Buf:
 13692                           	opt stack 20
 13693                           
 13694                           ; BSR set to: 63
 13695                           ;incstack = 0
 13696                           ;SPI_Read_Buf@reg stored from wreg
 13697  006586  6E06               	movwf	SPI_Read_Buf@reg,c
 13698                           
 13699                           ;RFM70_init_Rx.c: 179: unsigned char status, byte_ctr;
 13700                           ;RFM70_init_Rx.c: 181: RB3 = 0;
 13701  006588  013F               	movlb	63	; () banked
 13702  00658A  97CB               	bcf	203,3,b	;volatile
 13703                           
 13704                           ; BSR set to: 63
 13705                           ;RFM70_init_Rx.c: 182: status = SPI_RW(reg);
 13706  00658C  5006               	movf	SPI_Read_Buf@reg,w,c
 13707  00658E  EC91  F035         	call	i2_SPI_RW
 13708  006592  6E05               	movwf	SPI_Read_Buf@status,c
 13709                           
 13710                           ;RFM70_init_Rx.c: 184: for(byte_ctr=0; byte_ctr<length; byte_ctr++)
 13711  006594  0E00               	movlw	0
 13712  006596  6E07               	movwf	SPI_Read_Buf@byte_ctr,c
 13713  006598  D00D               	goto	i2l717
 13714  00659A                     
 13715                           ;RFM70_init_Rx.c: 185: pBuf[byte_ctr] = SPI_RW(0);
 13716  00659A  5007               	movf	SPI_Read_Buf@byte_ctr,w,c
 13717  00659C  0D01               	mullw	1
 13718  00659E  50F3               	movf	16371,w,c
 13719  0065A0  2402               	addwf	SPI_Read_Buf@pBuf,w,c
 13720  0065A2  6ED9               	movwf	16345,c
 13721  0065A4  50F4               	movf	16372,w,c
 13722  0065A6  2003               	addwfc	SPI_Read_Buf@pBuf+1,w,c
 13723  0065A8  6EDA               	movwf	16346,c
 13724  0065AA  0E00               	movlw	0
 13725  0065AC  EC91  F035         	call	i2_SPI_RW
 13726  0065B0  6EDF               	movwf	16351,c
 13727  0065B2  2A07               	incf	SPI_Read_Buf@byte_ctr,f,c
 13728  0065B4                     i2l717:
 13729  0065B4  5004               	movf	SPI_Read_Buf@length,w,c
 13730  0065B6  5C07               	subwf	SPI_Read_Buf@byte_ctr,w,c
 13731  0065B8  A0D8               	btfss	16344,0,c
 13732  0065BA  D7EF               	goto	i2l718
 13733                           
 13734                           ;RFM70_init_Rx.c: 187: RB3 = 1;
 13735  0065BC  013F               	movlb	63	; () banked
 13736  0065BE  87CB               	bsf	203,3,b	;volatile
 13737                           
 13738                           ; BSR set to: 63
 13739  0065C0  0012               	return		;funcret
 13740  0065C2                     __end_of_SPI_Read_Buf:
 13741                           	opt stack 0
 13742                           
 13743 ;; *************** function i2_SPI_RW *****************
 13744 ;; Defined at:
 13745 ;;		line 128 in file "RFM70_init_Rx.c"
 13746 ;; Parameters:    Size  Location     Type
 13747 ;;  value           1    wreg     unsigned char 
 13748 ;; Auto vars:     Size  Location     Type
 13749 ;;  value           1    0[COMRAM] unsigned char 
 13750 ;; Return value:  Size  Location     Type
 13751 ;;                  1    wreg      unsigned char 
 13752 ;; Registers used:
 13753 ;;		wreg, status,2
 13754 ;; Tracked objects:
 13755 ;;		On entry : 0/0
 13756 ;;		On exit  : 0/0
 13757 ;;		Unchanged: 0/0
 13758 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15  BANK16  BANK17  BANK18  BANK19  BANK20  BANK21  BANK22  BANK23  BANK24  BANK25  BANK2
      +6  BANK27  BANK28  BANK29  BANK30  BANK31
 13759 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 13760 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 13761 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 13762 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0       0
 13763 ;;Total ram usage:        1 bytes
 13764 ;; Hardware stack levels used:    1
 13765 ;; This function calls:
 13766 ;;		Nothing
 13767 ;; This function is called by:
 13768 ;;		_SPI_Read_Buf
 13769 ;;		i2_SPI_Write_Reg
 13770 ;; This function uses a non-reentrant model
 13771 ;;
 13772                           
 13773                           	psect	text74
 13774  006B22                     __ptext74:
 13775                           	opt stack 0
 13776  006B22                     i2_SPI_RW:
 13777                           	opt stack 20
 13778                           
 13779                           ; BSR set to: 63
 13780                           ;incstack = 0
 13781                           ;i2SPI_RW@value stored from wreg
 13782  006B22  6E01               	movwf	i2SPI_RW@value,c
 13783                           
 13784                           ;RFM70_init_Rx.c: 130: SPI1TXB = value;
 13785  006B24  0060  F007  FD11   	movff	i2SPI_RW@value,15633	;volatile
 13786  006B2A  0139               	movlb	57	; () banked
 13787  006B2C  A9A2               	btfss	162,4,b	;volatile
 13788  006B2E  D7FD               	goto	i2l706
 13789                           
 13790                           ; BSR set to: 57
 13791                           ;RFM70_init_Rx.c: 132: return (SPI1RXB);
 13792  006B30  013D               	movlb	61	; () banked
 13793  006B32  5110               	movf	16,w,b	;volatile
 13794                           
 13795                           ; BSR set to: 61
 13796  006B34  0012               	return		;funcret
 13797  006B36                     __end_ofi2_SPI_RW:
 13798                           	opt stack 0
 13799                           
 13800                           ;
 13801                           ; Interrupt Vector Table @ 0x8
 13802                           ;
 13803                           
 13804                           	psect	ivt0x8
 13805  000008                     __pivt0x8:
 13806                           	opt stack 0
 13807  000008                     ivt0x8_base:
 13808                           	opt stack 0
 13809                           
 13810                           ; Vector 0 : SWINT
 13811  000008  1AD6               	dw	_Default_ISR shr (0+2)
 13812                           
 13813                           ; Vector 1 : HLVD
 13814  00000A  1AD6               	dw	_Default_ISR shr (0+2)
 13815                           
 13816                           ; Vector 2 : OSF
 13817  00000C  1AD6               	dw	_Default_ISR shr (0+2)
 13818                           
 13819                           ; Vector 3 : CSW
 13820  00000E  1AD6               	dw	_Default_ISR shr (0+2)
 13821                           
 13822                           ; Vector 4 : NVM
 13823  000010  1AD6               	dw	_Default_ISR shr (0+2)
 13824                           
 13825                           ; Vector 5 : SCAN
 13826  000012  1AD6               	dw	_Default_ISR shr (0+2)
 13827                           
 13828                           ; Vector 6 : CRC
 13829  000014  1AD6               	dw	_Default_ISR shr (0+2)
 13830                           
 13831                           ; Vector 7 : IOC
 13832  000016  1AD6               	dw	_Default_ISR shr (0+2)
 13833                           
 13834                           ; Vector 8 : INT0
 13835  000018  199A               	dw	_INT0_ISR shr (0+2)
 13836                           
 13837                           ; Vector 9 : ZCD
 13838  00001A  1AD6               	dw	_Default_ISR shr (0+2)
 13839                           
 13840                           ; Vector 10 : AD
 13841  00001C  1AD6               	dw	_Default_ISR shr (0+2)
 13842                           
 13843                           ; Vector 11 : ADT
 13844  00001E  1AD6               	dw	_Default_ISR shr (0+2)
 13845                           
 13846                           ; Vector 12 : CMP1
 13847  000020  1AD6               	dw	_Default_ISR shr (0+2)
 13848                           
 13849                           ; Vector 13 : SMT1
 13850  000022  1AD6               	dw	_Default_ISR shr (0+2)
 13851                           
 13852                           ; Vector 14 : SMT1PRA
 13853  000024  1AD6               	dw	_Default_ISR shr (0+2)
 13854                           
 13855                           ; Vector 15 : SMT1PRW
 13856  000026  1AD6               	dw	_Default_ISR shr (0+2)
 13857                           
 13858                           ; Vector 16 : DMA1SCNT
 13859  000028  1AD6               	dw	_Default_ISR shr (0+2)
 13860                           
 13861                           ; Vector 17 : DMA1DCNT
 13862  00002A  1AD6               	dw	_Default_ISR shr (0+2)
 13863                           
 13864                           ; Vector 18 : DMA1OR
 13865  00002C  1AD6               	dw	_Default_ISR shr (0+2)
 13866                           
 13867                           ; Vector 19 : DMA1A
 13868  00002E  1AD6               	dw	_Default_ISR shr (0+2)
 13869                           
 13870                           ; Vector 20 : SPI1RX
 13871  000030  1AD6               	dw	_Default_ISR shr (0+2)
 13872                           
 13873                           ; Vector 21 : SPI1TX
 13874  000032  1AD6               	dw	_Default_ISR shr (0+2)
 13875                           
 13876                           ; Vector 22 : SPI1
 13877  000034  1AD6               	dw	_Default_ISR shr (0+2)
 13878                           
 13879                           ; Vector 23 : I2C1RX
 13880  000036  1AD6               	dw	_Default_ISR shr (0+2)
 13881                           
 13882                           ; Vector 24 : I2C1TX
 13883  000038  1AD6               	dw	_Default_ISR shr (0+2)
 13884                           
 13885                           ; Vector 25 : I2C1
 13886  00003A  1AD6               	dw	_Default_ISR shr (0+2)
 13887                           
 13888                           ; Vector 26 : I2C1E
 13889  00003C  1AD6               	dw	_Default_ISR shr (0+2)
 13890                           
 13891                           ; Vector 27 : U1RX
 13892  00003E  1AD6               	dw	_Default_ISR shr (0+2)
 13893                           
 13894                           ; Vector 28 : U1TX
 13895  000040  1AD6               	dw	_Default_ISR shr (0+2)
 13896                           
 13897                           ; Vector 29 : U1E
 13898  000042  1AD6               	dw	_Default_ISR shr (0+2)
 13899                           
 13900                           ; Vector 30 : U1
 13901  000044  1AD6               	dw	_Default_ISR shr (0+2)
 13902                           
 13903                           ; Vector 31 : TMR0
 13904  000046  1AD6               	dw	_Default_ISR shr (0+2)
 13905                           
 13906                           ; Vector 32 : TMR1
 13907  000048  1A69               	dw	_TMR1_ISR shr (0+2)
 13908                           
 13909                           ; Vector 33 : TMR1G
 13910  00004A  1AD6               	dw	_Default_ISR shr (0+2)
 13911                           
 13912                           ; Vector 34 : TMR2
 13913  00004C  1AA8               	dw	_TMR2_ISR shr (0+2)
 13914                           
 13915                           ; Vector 35 : CCP1
 13916  00004E  1AD6               	dw	_Default_ISR shr (0+2)
 13917                           
 13918                           ; Vector 36 : Undefined
 13919  000050  002B               	dw	ivt0x8_undefint shr (0+2)
 13920                           
 13921                           ; Vector 37 : NCO1
 13922  000052  1AD6               	dw	_Default_ISR shr (0+2)
 13923                           
 13924                           ; Vector 38 : CWG1
 13925  000054  1AD6               	dw	_Default_ISR shr (0+2)
 13926                           
 13927                           ; Vector 39 : CLC1
 13928  000056  1AD6               	dw	_Default_ISR shr (0+2)
 13929                           
 13930                           ; Vector 40 : INT1
 13931  000058  1AD6               	dw	_Default_ISR shr (0+2)
 13932                           
 13933                           ; Vector 41 : CMP2
 13934  00005A  1AD6               	dw	_Default_ISR shr (0+2)
 13935                           
 13936                           ; Vector 42 : DMA2SCNT
 13937  00005C  1AD6               	dw	_Default_ISR shr (0+2)
 13938                           
 13939                           ; Vector 43 : DMA2DCNT
 13940  00005E  1AD6               	dw	_Default_ISR shr (0+2)
 13941                           
 13942                           ; Vector 44 : DMA2OR
 13943  000060  1AD6               	dw	_Default_ISR shr (0+2)
 13944                           
 13945                           ; Vector 45 : DMA2A
 13946  000062  1AD6               	dw	_Default_ISR shr (0+2)
 13947                           
 13948                           ; Vector 46 : I2C2RX
 13949  000064  1AD6               	dw	_Default_ISR shr (0+2)
 13950                           
 13951                           ; Vector 47 : I2C2TX
 13952  000066  1AD6               	dw	_Default_ISR shr (0+2)
 13953                           
 13954                           ; Vector 48 : I2C2
 13955  000068  1AD6               	dw	_Default_ISR shr (0+2)
 13956                           
 13957                           ; Vector 49 : I2C2E
 13958  00006A  1AD6               	dw	_Default_ISR shr (0+2)
 13959                           
 13960                           ; Vector 50 : U2RX
 13961  00006C  1AD6               	dw	_Default_ISR shr (0+2)
 13962                           
 13963                           ; Vector 51 : U2TX
 13964  00006E  1AD6               	dw	_Default_ISR shr (0+2)
 13965                           
 13966                           ; Vector 52 : U2E
 13967  000070  1AD6               	dw	_Default_ISR shr (0+2)
 13968                           
 13969                           ; Vector 53 : U2
 13970  000072  1AD6               	dw	_Default_ISR shr (0+2)
 13971                           
 13972                           ; Vector 54 : TMR3
 13973  000074  1A79               	dw	_TMR3_ISR shr (0+2)
 13974                           
 13975                           ; Vector 55 : TMR3G
 13976  000076  1AD6               	dw	_Default_ISR shr (0+2)
 13977                           
 13978                           ; Vector 56 : TMR4
 13979  000078  1AAE               	dw	_TMR4_ISR shr (0+2)
 13980                           
 13981                           ; Vector 57 : CCP2
 13982  00007A  1AD6               	dw	_Default_ISR shr (0+2)
 13983                           
 13984                           ; Vector 58 : Undefined
 13985  00007C  002B               	dw	ivt0x8_undefint shr (0+2)
 13986                           
 13987                           ; Vector 59 : CWG2
 13988  00007E  1AD6               	dw	_Default_ISR shr (0+2)
 13989                           
 13990                           ; Vector 60 : CLC2
 13991  000080  1AD6               	dw	_Default_ISR shr (0+2)
 13992                           
 13993                           ; Vector 61 : INT2
 13994  000082  1AD6               	dw	_Default_ISR shr (0+2)
 13995                           
 13996                           ; Vector 62 : Undefined
 13997  000084  002B               	dw	ivt0x8_undefint shr (0+2)
 13998                           
 13999                           ; Vector 63 : Undefined
 14000  000086  002B               	dw	ivt0x8_undefint shr (0+2)
 14001                           
 14002                           ; Vector 64 : Undefined
 14003  000088  002B               	dw	ivt0x8_undefint shr (0+2)
 14004                           
 14005                           ; Vector 65 : Undefined
 14006  00008A  002B               	dw	ivt0x8_undefint shr (0+2)
 14007                           
 14008                           ; Vector 66 : Undefined
 14009  00008C  002B               	dw	ivt0x8_undefint shr (0+2)
 14010                           
 14011                           ; Vector 67 : Undefined
 14012  00008E  002B               	dw	ivt0x8_undefint shr (0+2)
 14013                           
 14014                           ; Vector 68 : Undefined
 14015  000090  002B               	dw	ivt0x8_undefint shr (0+2)
 14016                           
 14017                           ; Vector 69 : Undefined
 14018  000092  002B               	dw	ivt0x8_undefint shr (0+2)
 14019                           
 14020                           ; Vector 70 : TMR5
 14021  000094  1A71               	dw	_TMR5_ISR shr (0+2)
 14022                           
 14023                           ; Vector 71 : TMR5G
 14024  000096  1AD6               	dw	_Default_ISR shr (0+2)
 14025                           
 14026                           ; Vector 72 : TMR6
 14027  000098  1AB4               	dw	_TMR6_ISR shr (0+2)
 14028                           
 14029                           ; Vector 73 : CCP3
 14030  00009A  1AD6               	dw	_Default_ISR shr (0+2)
 14031                           
 14032                           ; Vector 74 : CWG3
 14033  00009C  1AD6               	dw	_Default_ISR shr (0+2)
 14034                           
 14035                           ; Vector 75 : CLC3
 14036  00009E  1AD6               	dw	_Default_ISR shr (0+2)
 14037                           
 14038                           ; Vector 76 : Undefined
 14039  0000A0  002B               	dw	ivt0x8_undefint shr (0+2)
 14040                           
 14041                           ; Vector 77 : Undefined
 14042  0000A2  002B               	dw	ivt0x8_undefint shr (0+2)
 14043                           
 14044                           ; Vector 78 : Undefined
 14045  0000A4  002B               	dw	ivt0x8_undefint shr (0+2)
 14046                           
 14047                           ; Vector 79 : Undefined
 14048  0000A6  002B               	dw	ivt0x8_undefint shr (0+2)
 14049                           
 14050                           ; Vector 80 : CCP4
 14051  0000A8  1AD6               	dw	_Default_ISR shr (0+2)
 14052                           
 14053                           ; Vector 81 : CLC4
 14054  0000AA  1AD6               	dw	_Default_ISR shr (0+2)
 14055  0000AC                     ivt0x8_undefint:
 14056                           	opt stack 0
 14057  0000AC  00C0               	trap
 14058                           
 14059                           	psect	rparam


Data Sizes:
    Strings     0
    Constant    199
    Data        54
    BSS         122
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     70      82
    BANK0           160     89     159
    BANK1           256     16     110
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          256      0       0
    BANK16          256      0       0
    BANK17          256      0       0
    BANK18          256      0       0
    BANK19          256      0       0
    BANK20          256      0       0
    BANK21          256      0       0
    BANK22          256      0       0
    BANK23          256      0       0
    BANK24          256      0       0
    BANK25          256      0       0
    BANK26          256      0       0
    BANK27          256      0       0
    BANK28          256      0       0
    BANK29          256      0       0
    BANK30          256      0       0
    BANK31          256      0       0

Pointer List with Targets:

    frexp@eptr	PTR int  size(2) Largest target is 2
		 -> floor@expon(BANK0[2]), trunc@expon(BANK0[2]), 

    eval_poly@d	PTR const  size(2) Largest target is 24
		 -> sin@coeff_a(CODE[20]), sin@coeff_b(CODE[16]), atan@coeff_a(CODE[24]), atan@coeff_b(CODE[20]), 

    SPI_Write_Buf@pBuf	PTR unsigned char  size(2) Largest target is 12
		 -> RFM70_Initialize@WriteArr(COMRAM[12]), 

    SPI_Read_Buf@pBuf	PTR unsigned char  size(2) Largest target is 2
		 -> rx_buf(COMRAM[2]), 


Critical Paths under _main in COMRAM

    _steps_calculation->___fltol
    _real_rad_calculation->___fladd
    _rad_calculation_manual->___fladd
    _floor->___fltol
    _next_steps_calculation->___fltol
    _trunc->___fltol
    ___fltol->___fladd
    _next_rad_calculation_manual->___fladd
    _sqrt->___fladd
    _atan->___fladd
    _fabs->___flneg
    ___flneg->___xxtofl
    _eval_poly->___fladd
    ___flmul->___fladd
    ___fladd->___fldiv
    ___fldiv->___xxtofl
    _SwitchToRxMode->_SPI_Read_Reg
    _SwitchToRxMode->_SPI_Write_Reg
    _SYSTEM_Initialize->_INTERRUPT_Initialize
    _RFM70_Initialize->_SPI_Write_Buf
    _SwitchCFG->_SPI_Read_Reg
    _SwitchCFG->_SPI_Write_Reg
    _SPI_Write_Reg->_SPI_RW
    _SPI_Read_Reg->_SPI_RW
    _SPI_Write_Buf->_SPI_RW

Critical Paths under _TMR1_ISR in COMRAM

    None.

Critical Paths under _TMR2_ISR in COMRAM

    None.

Critical Paths under _TMR4_ISR in COMRAM

    None.

Critical Paths under _TMR6_ISR in COMRAM

    None.

Critical Paths under _TMR5_ISR in COMRAM

    None.

Critical Paths under _TMR3_ISR in COMRAM

    None.

Critical Paths under _Default_ISR in COMRAM

    None.

Critical Paths under _INT0_ISR in COMRAM

    _INT0_ISR->_SPI_Read_Buf
    i2_SPI_Write_Reg->i2_SPI_RW
    _SPI_Read_Buf->i2_SPI_RW

Critical Paths under _main in BANK0

    _main->_next_rad_calculation_manual
    _main->_rad_calculation_manual
    _steps_calculation->_round
    _real_rad_calculation->___fladd
    _rad_calculation_manual->_atan
    _rad_calculation_auto->_cos
    _cos->_sin
    _sin->___flsub
    _floor->___fltol
    ___flsub->_floor
    _next_steps_calculation->_round
    _round->_trunc
    _trunc->___fltol
    ___fltol->___flmul
    _next_rad_calculation_manual->_atan
    _sqrt->___flmul
    _atan->_sqrt
    _eval_poly->___flmul
    ___flmul->___fladd

Critical Paths under _TMR1_ISR in BANK0

    None.

Critical Paths under _TMR2_ISR in BANK0

    None.

Critical Paths under _TMR4_ISR in BANK0

    None.

Critical Paths under _TMR6_ISR in BANK0

    None.

Critical Paths under _TMR5_ISR in BANK0

    None.

Critical Paths under _TMR3_ISR in BANK0

    None.

Critical Paths under _Default_ISR in BANK0

    None.

Critical Paths under _INT0_ISR in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_rad_calculation_auto

Critical Paths under _TMR1_ISR in BANK1

    None.

Critical Paths under _TMR2_ISR in BANK1

    None.

Critical Paths under _TMR4_ISR in BANK1

    None.

Critical Paths under _TMR6_ISR in BANK1

    None.

Critical Paths under _TMR5_ISR in BANK1

    None.

Critical Paths under _TMR3_ISR in BANK1

    None.

Critical Paths under _Default_ISR in BANK1

    None.

Critical Paths under _INT0_ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _TMR1_ISR in BANK2

    None.

Critical Paths under _TMR2_ISR in BANK2

    None.

Critical Paths under _TMR4_ISR in BANK2

    None.

Critical Paths under _TMR6_ISR in BANK2

    None.

Critical Paths under _TMR5_ISR in BANK2

    None.

Critical Paths under _TMR3_ISR in BANK2

    None.

Critical Paths under _Default_ISR in BANK2

    None.

Critical Paths under _INT0_ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _TMR1_ISR in BANK3

    None.

Critical Paths under _TMR2_ISR in BANK3

    None.

Critical Paths under _TMR4_ISR in BANK3

    None.

Critical Paths under _TMR6_ISR in BANK3

    None.

Critical Paths under _TMR5_ISR in BANK3

    None.

Critical Paths under _TMR3_ISR in BANK3

    None.

Critical Paths under _Default_ISR in BANK3

    None.

Critical Paths under _INT0_ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _TMR1_ISR in BANK4

    None.

Critical Paths under _TMR2_ISR in BANK4

    None.

Critical Paths under _TMR4_ISR in BANK4

    None.

Critical Paths under _TMR6_ISR in BANK4

    None.

Critical Paths under _TMR5_ISR in BANK4

    None.

Critical Paths under _TMR3_ISR in BANK4

    None.

Critical Paths under _Default_ISR in BANK4

    None.

Critical Paths under _INT0_ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _TMR1_ISR in BANK5

    None.

Critical Paths under _TMR2_ISR in BANK5

    None.

Critical Paths under _TMR4_ISR in BANK5

    None.

Critical Paths under _TMR6_ISR in BANK5

    None.

Critical Paths under _TMR5_ISR in BANK5

    None.

Critical Paths under _TMR3_ISR in BANK5

    None.

Critical Paths under _Default_ISR in BANK5

    None.

Critical Paths under _INT0_ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _TMR1_ISR in BANK6

    None.

Critical Paths under _TMR2_ISR in BANK6

    None.

Critical Paths under _TMR4_ISR in BANK6

    None.

Critical Paths under _TMR6_ISR in BANK6

    None.

Critical Paths under _TMR5_ISR in BANK6

    None.

Critical Paths under _TMR3_ISR in BANK6

    None.

Critical Paths under _Default_ISR in BANK6

    None.

Critical Paths under _INT0_ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _TMR1_ISR in BANK7

    None.

Critical Paths under _TMR2_ISR in BANK7

    None.

Critical Paths under _TMR4_ISR in BANK7

    None.

Critical Paths under _TMR6_ISR in BANK7

    None.

Critical Paths under _TMR5_ISR in BANK7

    None.

Critical Paths under _TMR3_ISR in BANK7

    None.

Critical Paths under _Default_ISR in BANK7

    None.

Critical Paths under _INT0_ISR in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _TMR1_ISR in BANK8

    None.

Critical Paths under _TMR2_ISR in BANK8

    None.

Critical Paths under _TMR4_ISR in BANK8

    None.

Critical Paths under _TMR6_ISR in BANK8

    None.

Critical Paths under _TMR5_ISR in BANK8

    None.

Critical Paths under _TMR3_ISR in BANK8

    None.

Critical Paths under _Default_ISR in BANK8

    None.

Critical Paths under _INT0_ISR in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _TMR1_ISR in BANK9

    None.

Critical Paths under _TMR2_ISR in BANK9

    None.

Critical Paths under _TMR4_ISR in BANK9

    None.

Critical Paths under _TMR6_ISR in BANK9

    None.

Critical Paths under _TMR5_ISR in BANK9

    None.

Critical Paths under _TMR3_ISR in BANK9

    None.

Critical Paths under _Default_ISR in BANK9

    None.

Critical Paths under _INT0_ISR in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _TMR1_ISR in BANK10

    None.

Critical Paths under _TMR2_ISR in BANK10

    None.

Critical Paths under _TMR4_ISR in BANK10

    None.

Critical Paths under _TMR6_ISR in BANK10

    None.

Critical Paths under _TMR5_ISR in BANK10

    None.

Critical Paths under _TMR3_ISR in BANK10

    None.

Critical Paths under _Default_ISR in BANK10

    None.

Critical Paths under _INT0_ISR in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _TMR1_ISR in BANK11

    None.

Critical Paths under _TMR2_ISR in BANK11

    None.

Critical Paths under _TMR4_ISR in BANK11

    None.

Critical Paths under _TMR6_ISR in BANK11

    None.

Critical Paths under _TMR5_ISR in BANK11

    None.

Critical Paths under _TMR3_ISR in BANK11

    None.

Critical Paths under _Default_ISR in BANK11

    None.

Critical Paths under _INT0_ISR in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _TMR1_ISR in BANK12

    None.

Critical Paths under _TMR2_ISR in BANK12

    None.

Critical Paths under _TMR4_ISR in BANK12

    None.

Critical Paths under _TMR6_ISR in BANK12

    None.

Critical Paths under _TMR5_ISR in BANK12

    None.

Critical Paths under _TMR3_ISR in BANK12

    None.

Critical Paths under _Default_ISR in BANK12

    None.

Critical Paths under _INT0_ISR in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _TMR1_ISR in BANK13

    None.

Critical Paths under _TMR2_ISR in BANK13

    None.

Critical Paths under _TMR4_ISR in BANK13

    None.

Critical Paths under _TMR6_ISR in BANK13

    None.

Critical Paths under _TMR5_ISR in BANK13

    None.

Critical Paths under _TMR3_ISR in BANK13

    None.

Critical Paths under _Default_ISR in BANK13

    None.

Critical Paths under _INT0_ISR in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _TMR1_ISR in BANK14

    None.

Critical Paths under _TMR2_ISR in BANK14

    None.

Critical Paths under _TMR4_ISR in BANK14

    None.

Critical Paths under _TMR6_ISR in BANK14

    None.

Critical Paths under _TMR5_ISR in BANK14

    None.

Critical Paths under _TMR3_ISR in BANK14

    None.

Critical Paths under _Default_ISR in BANK14

    None.

Critical Paths under _INT0_ISR in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _TMR1_ISR in BANK15

    None.

Critical Paths under _TMR2_ISR in BANK15

    None.

Critical Paths under _TMR4_ISR in BANK15

    None.

Critical Paths under _TMR6_ISR in BANK15

    None.

Critical Paths under _TMR5_ISR in BANK15

    None.

Critical Paths under _TMR3_ISR in BANK15

    None.

Critical Paths under _Default_ISR in BANK15

    None.

Critical Paths under _INT0_ISR in BANK15

    None.

Critical Paths under _main in BANK16

    None.

Critical Paths under _TMR1_ISR in BANK16

    None.

Critical Paths under _TMR2_ISR in BANK16

    None.

Critical Paths under _TMR4_ISR in BANK16

    None.

Critical Paths under _TMR6_ISR in BANK16

    None.

Critical Paths under _TMR5_ISR in BANK16

    None.

Critical Paths under _TMR3_ISR in BANK16

    None.

Critical Paths under _Default_ISR in BANK16

    None.

Critical Paths under _INT0_ISR in BANK16

    None.

Critical Paths under _main in BANK17

    None.

Critical Paths under _TMR1_ISR in BANK17

    None.

Critical Paths under _TMR2_ISR in BANK17

    None.

Critical Paths under _TMR4_ISR in BANK17

    None.

Critical Paths under _TMR6_ISR in BANK17

    None.

Critical Paths under _TMR5_ISR in BANK17

    None.

Critical Paths under _TMR3_ISR in BANK17

    None.

Critical Paths under _Default_ISR in BANK17

    None.

Critical Paths under _INT0_ISR in BANK17

    None.

Critical Paths under _main in BANK18

    None.

Critical Paths under _TMR1_ISR in BANK18

    None.

Critical Paths under _TMR2_ISR in BANK18

    None.

Critical Paths under _TMR4_ISR in BANK18

    None.

Critical Paths under _TMR6_ISR in BANK18

    None.

Critical Paths under _TMR5_ISR in BANK18

    None.

Critical Paths under _TMR3_ISR in BANK18

    None.

Critical Paths under _Default_ISR in BANK18

    None.

Critical Paths under _INT0_ISR in BANK18

    None.

Critical Paths under _main in BANK19

    None.

Critical Paths under _TMR1_ISR in BANK19

    None.

Critical Paths under _TMR2_ISR in BANK19

    None.

Critical Paths under _TMR4_ISR in BANK19

    None.

Critical Paths under _TMR6_ISR in BANK19

    None.

Critical Paths under _TMR5_ISR in BANK19

    None.

Critical Paths under _TMR3_ISR in BANK19

    None.

Critical Paths under _Default_ISR in BANK19

    None.

Critical Paths under _INT0_ISR in BANK19

    None.

Critical Paths under _main in BANK20

    None.

Critical Paths under _TMR1_ISR in BANK20

    None.

Critical Paths under _TMR2_ISR in BANK20

    None.

Critical Paths under _TMR4_ISR in BANK20

    None.

Critical Paths under _TMR6_ISR in BANK20

    None.

Critical Paths under _TMR5_ISR in BANK20

    None.

Critical Paths under _TMR3_ISR in BANK20

    None.

Critical Paths under _Default_ISR in BANK20

    None.

Critical Paths under _INT0_ISR in BANK20

    None.

Critical Paths under _main in BANK21

    None.

Critical Paths under _TMR1_ISR in BANK21

    None.

Critical Paths under _TMR2_ISR in BANK21

    None.

Critical Paths under _TMR4_ISR in BANK21

    None.

Critical Paths under _TMR6_ISR in BANK21

    None.

Critical Paths under _TMR5_ISR in BANK21

    None.

Critical Paths under _TMR3_ISR in BANK21

    None.

Critical Paths under _Default_ISR in BANK21

    None.

Critical Paths under _INT0_ISR in BANK21

    None.

Critical Paths under _main in BANK22

    None.

Critical Paths under _TMR1_ISR in BANK22

    None.

Critical Paths under _TMR2_ISR in BANK22

    None.

Critical Paths under _TMR4_ISR in BANK22

    None.

Critical Paths under _TMR6_ISR in BANK22

    None.

Critical Paths under _TMR5_ISR in BANK22

    None.

Critical Paths under _TMR3_ISR in BANK22

    None.

Critical Paths under _Default_ISR in BANK22

    None.

Critical Paths under _INT0_ISR in BANK22

    None.

Critical Paths under _main in BANK23

    None.

Critical Paths under _TMR1_ISR in BANK23

    None.

Critical Paths under _TMR2_ISR in BANK23

    None.

Critical Paths under _TMR4_ISR in BANK23

    None.

Critical Paths under _TMR6_ISR in BANK23

    None.

Critical Paths under _TMR5_ISR in BANK23

    None.

Critical Paths under _TMR3_ISR in BANK23

    None.

Critical Paths under _Default_ISR in BANK23

    None.

Critical Paths under _INT0_ISR in BANK23

    None.

Critical Paths under _main in BANK24

    None.

Critical Paths under _TMR1_ISR in BANK24

    None.

Critical Paths under _TMR2_ISR in BANK24

    None.

Critical Paths under _TMR4_ISR in BANK24

    None.

Critical Paths under _TMR6_ISR in BANK24

    None.

Critical Paths under _TMR5_ISR in BANK24

    None.

Critical Paths under _TMR3_ISR in BANK24

    None.

Critical Paths under _Default_ISR in BANK24

    None.

Critical Paths under _INT0_ISR in BANK24

    None.

Critical Paths under _main in BANK25

    None.

Critical Paths under _TMR1_ISR in BANK25

    None.

Critical Paths under _TMR2_ISR in BANK25

    None.

Critical Paths under _TMR4_ISR in BANK25

    None.

Critical Paths under _TMR6_ISR in BANK25

    None.

Critical Paths under _TMR5_ISR in BANK25

    None.

Critical Paths under _TMR3_ISR in BANK25

    None.

Critical Paths under _Default_ISR in BANK25

    None.

Critical Paths under _INT0_ISR in BANK25

    None.

Critical Paths under _main in BANK26

    None.

Critical Paths under _TMR1_ISR in BANK26

    None.

Critical Paths under _TMR2_ISR in BANK26

    None.

Critical Paths under _TMR4_ISR in BANK26

    None.

Critical Paths under _TMR6_ISR in BANK26

    None.

Critical Paths under _TMR5_ISR in BANK26

    None.

Critical Paths under _TMR3_ISR in BANK26

    None.

Critical Paths under _Default_ISR in BANK26

    None.

Critical Paths under _INT0_ISR in BANK26

    None.

Critical Paths under _main in BANK27

    None.

Critical Paths under _TMR1_ISR in BANK27

    None.

Critical Paths under _TMR2_ISR in BANK27

    None.

Critical Paths under _TMR4_ISR in BANK27

    None.

Critical Paths under _TMR6_ISR in BANK27

    None.

Critical Paths under _TMR5_ISR in BANK27

    None.

Critical Paths under _TMR3_ISR in BANK27

    None.

Critical Paths under _Default_ISR in BANK27

    None.

Critical Paths under _INT0_ISR in BANK27

    None.

Critical Paths under _main in BANK28

    None.

Critical Paths under _TMR1_ISR in BANK28

    None.

Critical Paths under _TMR2_ISR in BANK28

    None.

Critical Paths under _TMR4_ISR in BANK28

    None.

Critical Paths under _TMR6_ISR in BANK28

    None.

Critical Paths under _TMR5_ISR in BANK28

    None.

Critical Paths under _TMR3_ISR in BANK28

    None.

Critical Paths under _Default_ISR in BANK28

    None.

Critical Paths under _INT0_ISR in BANK28

    None.

Critical Paths under _main in BANK29

    None.

Critical Paths under _TMR1_ISR in BANK29

    None.

Critical Paths under _TMR2_ISR in BANK29

    None.

Critical Paths under _TMR4_ISR in BANK29

    None.

Critical Paths under _TMR6_ISR in BANK29

    None.

Critical Paths under _TMR5_ISR in BANK29

    None.

Critical Paths under _TMR3_ISR in BANK29

    None.

Critical Paths under _Default_ISR in BANK29

    None.

Critical Paths under _INT0_ISR in BANK29

    None.

Critical Paths under _main in BANK30

    None.

Critical Paths under _TMR1_ISR in BANK30

    None.

Critical Paths under _TMR2_ISR in BANK30

    None.

Critical Paths under _TMR4_ISR in BANK30

    None.

Critical Paths under _TMR6_ISR in BANK30

    None.

Critical Paths under _TMR5_ISR in BANK30

    None.

Critical Paths under _TMR3_ISR in BANK30

    None.

Critical Paths under _Default_ISR in BANK30

    None.

Critical Paths under _INT0_ISR in BANK30

    None.

Critical Paths under _main in BANK31

    None.

Critical Paths under _TMR1_ISR in BANK31

    None.

Critical Paths under _TMR2_ISR in BANK31

    None.

Critical Paths under _TMR4_ISR in BANK31

    None.

Critical Paths under _TMR6_ISR in BANK31

    None.

Critical Paths under _TMR5_ISR in BANK31

    None.

Critical Paths under _TMR3_ISR in BANK31

    None.

Critical Paths under _Default_ISR in BANK31

    None.

Critical Paths under _INT0_ISR in BANK31

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 6     6      0  496903
                                             83 BANK0      6     6      0
                      _G_start_check
                   _RFM70_Initialize
                    _SEG_start_check
                  _SYSTEM_Initialize
                     _SwitchToRxMode
                            ___fladd
                            ___flsub
                    _base_motors_off
          _elbow_shoulder_motors_off
        _next_rad_calculation_manual
             _next_steps_calculation
              _pitch_roll_motors_off
               _rad_calculation_auto
             _rad_calculation_manual
                           _rad_copy
               _real_rad_calculation
                  _steps_calculation
                      _values_update
 ---------------------------------------------------------------------------------
 (1) _values_update                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _steps_calculation                                    8     8      0   36536
                                             55 BANK0      8     8      0
                            ___fladd
                            ___flmul
                            ___flneg
                            ___fltol
                              _round
 ---------------------------------------------------------------------------------
 (1) _real_rad_calculation                                 0     0      0   16293
                            ___fladd
                            ___fldiv
                           ___xxtofl
 ---------------------------------------------------------------------------------
 (1) _rad_copy                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _rad_calculation_manual                               4     4      0   70819
                                             79 BANK0      4     4      0
                            ___fladd
                            ___fldiv
                            ___flmul
                            ___flneg
                               _atan
                               _sqrt
 ---------------------------------------------------------------------------------
 (1) _rad_calculation_auto                                16    16      0  233342
                                              0 BANK1     16    16      0
                            ___fladd
                            ___fldiv
                            ___flmul
                            ___flneg
                               _atan
                                _cos
                                _sin
                               _sqrt
 ---------------------------------------------------------------------------------
 (2) _cos                                                  8     4      4   87673
                                             72 BANK0      8     4      4
                            ___fladd
                             ___flge
                                _sin
 ---------------------------------------------------------------------------------
 (2) _sin                                                 17    13      4   74714
                                             55 BANK0     17    13      4
                            ___fladd
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                            ___flsub
                          _eval_poly
                              _floor
 ---------------------------------------------------------------------------------
 (3) _floor                                               10     6      4   15537
                                             37 BANK0     10     6      4
                            ___fladd
                             ___flge
                            ___fltol
                           ___xxtofl
                              _frexp
 ---------------------------------------------------------------------------------
 (3) ___flsub                                              8     0      8   14987
                                             47 BANK0      8     0      8
                            ___fladd
                              _floor (ARG)
 ---------------------------------------------------------------------------------
 (1) _pitch_roll_motors_off                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _next_steps_calculation                               8     8      0   36536
                                             55 BANK0      8     8      0
                            ___fladd
                            ___flmul
                            ___flneg
                            ___fltol
                              _round
 ---------------------------------------------------------------------------------
 (2) _round                                                8     4      4   16363
                                             47 BANK0      8     4      4
                            ___fladd
                            ___flmul (ARG)
                            ___flneg
                              _trunc
 ---------------------------------------------------------------------------------
 (3) _trunc                                               10     6      4    2795
                                             37 BANK0     10     6      4
                            ___fladd (ARG)
                            ___flneg (ARG)
                            ___fltol
                           ___xxtofl
                              _frexp
 ---------------------------------------------------------------------------------
 (4) _frexp                                                8     2      6     658
                                             13 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (4) ___xxtofl                                            14    10      4     836
                                             13 COMRAM    14    10      4
 ---------------------------------------------------------------------------------
 (4) ___fltol                                             10     6      4     877
                                             68 COMRAM     2     2      0
                                             29 BANK0      8     4      4
                            ___fladd (ARG)
                            ___flmul (ARG)
                            ___flneg (ARG)
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _next_rad_calculation_manual                          4     4      0   70819
                                             79 BANK0      4     4      0
                            ___fladd
                            ___fldiv
                            ___flmul
                            ___flneg
                               _atan
                               _sqrt
 ---------------------------------------------------------------------------------
 (2) _sqrt                                                29    25      4    1673
                                             29 BANK0     29    25      4
                            ___fladd (ARG)
                            ___flmul (ARG)
 ---------------------------------------------------------------------------------
 (2) _atan                                                21    17      4   46037
                                             58 BANK0     21    17      4
                            ___fladd
                            ___fldiv
                             ___flge
                            ___flmul
                            ___flneg
                          _eval_poly
                               _fabs
                               _sqrt (ARG)
 ---------------------------------------------------------------------------------
 (3) _fabs                                                 4     0      4    1688
                                             31 COMRAM     4     0      4
                            ___flneg
 ---------------------------------------------------------------------------------
 (3) ___flneg                                              4     0      4    1505
                                             27 COMRAM     4     0      4
                           ___xxtofl (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) _eval_poly                                           16     8      8   18989
                                             29 BANK0     16     8      8
                            ___fladd
                            ___fldiv (ARG)
                            ___flmul
 ---------------------------------------------------------------------------------
 (2) ___flmul                                             25    17      8    6113
                                              4 BANK0     25    17      8
                            ___fladd (ARG)
                            ___fldiv (ARG)
                            ___flneg (ARG)
 ---------------------------------------------------------------------------------
 (3) ___fladd                                             20    12      8   11542
                                             52 COMRAM    16     8      8
                                              0 BANK0      4     4      0
                            ___fldiv (ARG)
                            ___flneg (ARG)
                           ___xxtofl (ARG)
                              _frexp (ARG)
 ---------------------------------------------------------------------------------
 (3) ___flge                                              12     4      8    1166
                                             13 COMRAM    12     4      8
 ---------------------------------------------------------------------------------
 (2) ___fldiv                                             25    17      8    3915
                                             27 COMRAM    25    17      8
                           ___xxtofl (ARG)
 ---------------------------------------------------------------------------------
 (1) _elbow_shoulder_motors_off                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _base_motors_off                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SwitchToRxMode                                       1     1      0    1014
                                             17 COMRAM     1     1      0
                       _SPI_Read_Reg
                      _SPI_Write_Reg
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0      23
                 _EXT_INT_Initialize
               _INTERRUPT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                     _PMD_Initialize
                    _SPI1_Initialize
                    _TMR1_Initialize
                    _TMR2_Initialize
                    _TMR3_Initialize
                    _TMR4_Initialize
                    _TMR5_Initialize
                    _TMR6_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR6_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR5_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR4_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR3_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR2_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SPI1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PMD_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _INTERRUPT_Initialize                                 1     1      0      23
                                             13 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _EXT_INT_Initialize                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SEG_start_check                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _RFM70_Initialize                                    20    20      0    4736
                                             20 COMRAM    19    19      0
                       _SPI_Read_Reg
                      _SPI_Write_Buf
                      _SPI_Write_Reg
                          _SwitchCFG
 ---------------------------------------------------------------------------------
 (2) _SwitchCFG                                            2     2      0    1057
                                             17 COMRAM     2     2      0
                       _SPI_Read_Reg
                      _SPI_Write_Reg
 ---------------------------------------------------------------------------------
 (2) _SPI_Write_Reg                                        3     2      1     877
                                             14 COMRAM     3     2      1
                             _SPI_RW
 ---------------------------------------------------------------------------------
 (2) _SPI_Read_Reg                                         3     3      0      68
                                             14 COMRAM     3     3      0
                             _SPI_RW
 ---------------------------------------------------------------------------------
 (2) _SPI_Write_Buf                                        6     3      3    1330
                                             14 COMRAM     6     3      3
                             _SPI_RW
 ---------------------------------------------------------------------------------
 (3) _SPI_RW                                               1     1      0      22
                                             13 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _G_start_check                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _TMR1_ISR                                             1     1      0       0
                                              7 COMRAM     1     1      0
                            _S_motor
 ---------------------------------------------------------------------------------
 (7) _S_motor                                              0     0      0       0
                        _S_motor_LAT
 ---------------------------------------------------------------------------------
 (8) _S_motor_LAT                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _TMR2_ISR                                             1     1      0       0
                                              8 COMRAM     1     1      0
                            _B_motor
 ---------------------------------------------------------------------------------
 (7) _B_motor                                              0     0      0       0
                        _B_motor_LAT
 ---------------------------------------------------------------------------------
 (8) _B_motor_LAT                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _TMR4_ISR                                             1     1      0       0
                                              9 COMRAM     1     1      0
                           _LW_motor
 ---------------------------------------------------------------------------------
 (7) _LW_motor                                             0     0      0       0
                       _LW_motor_LAT
 ---------------------------------------------------------------------------------
 (8) _LW_motor_LAT                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _TMR6_ISR                                             1     1      0       0
                                             10 COMRAM     1     1      0
                           _RW_motor
 ---------------------------------------------------------------------------------
 (7) _RW_motor                                             0     0      0       0
                       _RW_motor_LAT
 ---------------------------------------------------------------------------------
 (8) _RW_motor_LAT                                         0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _TMR5_ISR                                             1     1      0       0
                                             11 COMRAM     1     1      0
                            _G_motor
 ---------------------------------------------------------------------------------
 (7) _G_motor                                              0     0      0       0
                        _G_motor_LAT
 ---------------------------------------------------------------------------------
 (8) _G_motor_LAT                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _TMR3_ISR                                             1     1      0       0
                                             12 COMRAM     1     1      0
                            _E_motor
 ---------------------------------------------------------------------------------
 (7) _E_motor                                              0     0      0       0
                        _E_motor_LAT
 ---------------------------------------------------------------------------------
 (8) _E_motor_LAT                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _Default_ISR                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 9
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _INT0_ISR                                             0     0      0     380
                       _SPI_Read_Buf
                    i2_SPI_Write_Reg
 ---------------------------------------------------------------------------------
 (10) i2_SPI_Write_Reg                                     3     2      1      93
                                              1 COMRAM     3     2      1
                           i2_SPI_RW
 ---------------------------------------------------------------------------------
 (10) _SPI_Read_Buf                                        6     3      3     287
                                              1 COMRAM     6     3      3
                           i2_SPI_RW
 ---------------------------------------------------------------------------------
 (11) i2_SPI_RW                                            1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _G_start_check
   _RFM70_Initialize
     _SPI_Read_Reg
       _SPI_RW
     _SPI_Write_Buf
       _SPI_RW
     _SPI_Write_Reg
       _SPI_RW
     _SwitchCFG
       _SPI_Read_Reg
         _SPI_RW
       _SPI_Write_Reg
         _SPI_RW
   _SEG_start_check
   _SYSTEM_Initialize
     _EXT_INT_Initialize
     _INTERRUPT_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _PMD_Initialize
     _SPI1_Initialize
     _TMR1_Initialize
     _TMR2_Initialize
     _TMR3_Initialize
     _TMR4_Initialize
     _TMR5_Initialize
     _TMR6_Initialize
   _SwitchToRxMode
     _SPI_Read_Reg
       _SPI_RW
     _SPI_Write_Reg
       _SPI_RW
   ___fladd
     ___fldiv (ARG)
       ___xxtofl (ARG)
     ___flneg (ARG)
       ___xxtofl (ARG)
       _frexp (ARG)
     ___xxtofl (ARG)
     _frexp (ARG)
   ___flsub
     ___fladd
       ___fldiv (ARG)
         ___xxtofl (ARG)
       ___flneg (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___xxtofl (ARG)
       _frexp (ARG)
     _floor (ARG)
       ___fladd
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___flneg (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flge
       ___fltol
         ___fladd (ARG)
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___flneg (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flmul (ARG)
           ___fladd (ARG)
             ___fldiv (ARG)
               ___xxtofl (ARG)
             ___flneg (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___flneg (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
         ___flneg (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
       ___xxtofl
       _frexp
   _base_motors_off
   _elbow_shoulder_motors_off
   _next_rad_calculation_manual
     ___fladd
       ___fldiv (ARG)
         ___xxtofl (ARG)
       ___flneg (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___xxtofl (ARG)
       _frexp (ARG)
     ___fldiv
       ___xxtofl (ARG)
     ___flmul
       ___fladd (ARG)
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___flneg (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___fldiv (ARG)
         ___xxtofl (ARG)
       ___flneg (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
     ___flneg
       ___xxtofl (ARG)
       _frexp (ARG)
     _atan
       ___fladd
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___flneg (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___fldiv
         ___xxtofl (ARG)
       ___flge
       ___flmul
         ___fladd (ARG)
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___flneg (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___flneg (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
       ___flneg
         ___xxtofl (ARG)
         _frexp (ARG)
       _eval_poly
         ___fladd
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___flneg (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           ___fladd (ARG)
             ___fldiv (ARG)
               ___xxtofl (ARG)
             ___flneg (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___flneg (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
       _fabs
         ___flneg
           ___xxtofl (ARG)
           _frexp (ARG)
       _sqrt (ARG)
         ___fladd (ARG)
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___flneg (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flmul (ARG)
           ___fladd (ARG)
             ___fldiv (ARG)
               ___xxtofl (ARG)
             ___flneg (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___flneg (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
     _sqrt
       ___fladd (ARG)
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___flneg (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flmul (ARG)
         ___fladd (ARG)
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___flneg (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___flneg (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
   _next_steps_calculation
     ___fladd
       ___fldiv (ARG)
         ___xxtofl (ARG)
       ___flneg (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___xxtofl (ARG)
       _frexp (ARG)
     ___flmul
       ___fladd (ARG)
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___flneg (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___fldiv (ARG)
         ___xxtofl (ARG)
       ___flneg (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
     ___flneg
       ___xxtofl (ARG)
       _frexp (ARG)
     ___fltol
       ___fladd (ARG)
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___flneg (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flmul (ARG)
         ___fladd (ARG)
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___flneg (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___flneg (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
       ___flneg (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___xxtofl (ARG)
     _round
       ___fladd
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___flneg (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flmul (ARG)
         ___fladd (ARG)
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___flneg (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___flneg (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
       ___flneg (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       _trunc (ARG)
         ___fladd (ARG)
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___flneg (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___fltol (ARG)
           ___fladd (ARG)
             ___fldiv (ARG)
               ___xxtofl (ARG)
             ___flneg (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul (ARG)
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___fldiv (ARG)
               ___xxtofl (ARG)
             ___flneg (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
           ___flneg (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
   _pitch_roll_motors_off
   _rad_calculation_auto
     ___fladd
       ___fldiv (ARG)
         ___xxtofl (ARG)
       ___flneg (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___xxtofl (ARG)
       _frexp (ARG)
     ___fldiv
       ___xxtofl (ARG)
     ___flmul
       ___fladd (ARG)
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___flneg (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___fldiv (ARG)
         ___xxtofl (ARG)
       ___flneg (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
     ___flneg
       ___xxtofl (ARG)
       _frexp (ARG)
     _atan
       ___fladd
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___flneg (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___fldiv
         ___xxtofl (ARG)
       ___flge
       ___flmul
         ___fladd (ARG)
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___flneg (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___flneg (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
       ___flneg
         ___xxtofl (ARG)
         _frexp (ARG)
       _eval_poly
         ___fladd
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___flneg (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           ___fladd (ARG)
             ___fldiv (ARG)
               ___xxtofl (ARG)
             ___flneg (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___flneg (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
       _fabs
         ___flneg
           ___xxtofl (ARG)
           _frexp (ARG)
       _sqrt (ARG)
         ___fladd (ARG)
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___flneg (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flmul (ARG)
           ___fladd (ARG)
             ___fldiv (ARG)
               ___xxtofl (ARG)
             ___flneg (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___flneg (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
     _cos
       ___fladd
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___flneg (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flge
       _sin
         ___fladd
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___flneg (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___fldiv
           ___xxtofl (ARG)
         ___flge
         ___flmul
           ___fladd (ARG)
             ___fldiv (ARG)
               ___xxtofl (ARG)
             ___flneg (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___flneg (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
         ___flneg
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flsub
           ___fladd
             ___fldiv (ARG)
               ___xxtofl (ARG)
             ___flneg (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           _floor (ARG)
             ___fladd
               ___fldiv (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flge
             ___fltol
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___flmul (ARG)
                 ___fladd (ARG)
                   ___fldiv (ARG)
                     ___xxtofl (ARG)
                   ___flneg (ARG)
                     ___xxtofl (ARG)
                     _frexp (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___fldiv (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
               ___flneg (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
             ___xxtofl
             _frexp
         _eval_poly
           ___fladd
             ___fldiv (ARG)
               ___xxtofl (ARG)
             ___flneg (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___flmul (ARG)
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___fldiv (ARG)
               ___xxtofl (ARG)
             ___flneg (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
         _floor
           ___fladd
             ___fldiv (ARG)
               ___xxtofl (ARG)
             ___flneg (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flge
           ___fltol
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul (ARG)
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___fldiv (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
             ___flneg (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl
           _frexp
     _sin
       ___fladd
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___flneg (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___fldiv
         ___xxtofl (ARG)
       ___flge
       ___flmul
         ___fladd (ARG)
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___flneg (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___flneg (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
       ___flneg
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flsub
         ___fladd
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___flneg (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         _floor (ARG)
           ___fladd
             ___fldiv (ARG)
               ___xxtofl (ARG)
             ___flneg (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flge
           ___fltol
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___flmul (ARG)
               ___fladd (ARG)
                 ___fldiv (ARG)
                   ___xxtofl (ARG)
                 ___flneg (ARG)
                   ___xxtofl (ARG)
                   _frexp (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___fldiv (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
             ___flneg (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
           ___xxtofl
           _frexp
       _eval_poly
         ___fladd
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___flneg (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           ___fladd (ARG)
             ___fldiv (ARG)
               ___xxtofl (ARG)
             ___flneg (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___flneg (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
       _floor
         ___fladd
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___flneg (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flge
         ___fltol
           ___fladd (ARG)
             ___fldiv (ARG)
               ___xxtofl (ARG)
             ___flneg (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul (ARG)
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___fldiv (ARG)
               ___xxtofl (ARG)
             ___flneg (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
           ___flneg (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl
         _frexp
     _sqrt
       ___fladd (ARG)
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___flneg (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flmul (ARG)
         ___fladd (ARG)
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___flneg (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___flneg (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
   _rad_calculation_manual
     ___fladd
       ___fldiv (ARG)
         ___xxtofl (ARG)
       ___flneg (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___xxtofl (ARG)
       _frexp (ARG)
     ___fldiv
       ___xxtofl (ARG)
     ___flmul
       ___fladd (ARG)
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___flneg (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___fldiv (ARG)
         ___xxtofl (ARG)
       ___flneg (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
     ___flneg
       ___xxtofl (ARG)
       _frexp (ARG)
     _atan
       ___fladd
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___flneg (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___fldiv
         ___xxtofl (ARG)
       ___flge
       ___flmul
         ___fladd (ARG)
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___flneg (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___flneg (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
       ___flneg
         ___xxtofl (ARG)
         _frexp (ARG)
       _eval_poly
         ___fladd
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___flneg (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___flmul (ARG)
           ___fladd (ARG)
             ___fldiv (ARG)
               ___xxtofl (ARG)
             ___flneg (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___flneg (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
       _fabs
         ___flneg
           ___xxtofl (ARG)
           _frexp (ARG)
       _sqrt (ARG)
         ___fladd (ARG)
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___flneg (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flmul (ARG)
           ___fladd (ARG)
             ___fldiv (ARG)
               ___xxtofl (ARG)
             ___flneg (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___flneg (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
     _sqrt
       ___fladd (ARG)
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___flneg (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flmul (ARG)
         ___fladd (ARG)
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___flneg (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___flneg (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
   _rad_copy
   _real_rad_calculation
     ___fladd
       ___fldiv (ARG)
         ___xxtofl (ARG)
       ___flneg (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___xxtofl (ARG)
       _frexp (ARG)
     ___fldiv
       ___xxtofl (ARG)
     ___xxtofl
   _steps_calculation
     ___fladd
       ___fldiv (ARG)
         ___xxtofl (ARG)
       ___flneg (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___xxtofl (ARG)
       _frexp (ARG)
     ___flmul
       ___fladd (ARG)
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___flneg (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___fldiv (ARG)
         ___xxtofl (ARG)
       ___flneg (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
     ___flneg
       ___xxtofl (ARG)
       _frexp (ARG)
     ___fltol
       ___fladd (ARG)
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___flneg (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flmul (ARG)
         ___fladd (ARG)
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___flneg (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___flneg (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
       ___flneg (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___xxtofl (ARG)
     _round
       ___fladd
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___flneg (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       ___flmul (ARG)
         ___fladd (ARG)
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___flneg (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___fldiv (ARG)
           ___xxtofl (ARG)
         ___flneg (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
       ___flneg (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
       _trunc (ARG)
         ___fladd (ARG)
           ___fldiv (ARG)
             ___xxtofl (ARG)
           ___flneg (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___flneg (ARG)
           ___xxtofl (ARG)
           _frexp (ARG)
         ___fltol (ARG)
           ___fladd (ARG)
             ___fldiv (ARG)
               ___xxtofl (ARG)
             ___flneg (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___flmul (ARG)
             ___fladd (ARG)
               ___fldiv (ARG)
                 ___xxtofl (ARG)
               ___flneg (ARG)
                 ___xxtofl (ARG)
                 _frexp (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
             ___fldiv (ARG)
               ___xxtofl (ARG)
             ___flneg (ARG)
               ___xxtofl (ARG)
               _frexp (ARG)
           ___flneg (ARG)
             ___xxtofl (ARG)
             _frexp (ARG)
           ___xxtofl (ARG)
         ___xxtofl (ARG)
         _frexp (ARG)
   _values_update

 _TMR1_ISR (ROOT)
   _S_motor
     _S_motor_LAT

 _TMR2_ISR (ROOT)
   _B_motor
     _B_motor_LAT

 _TMR4_ISR (ROOT)
   _LW_motor
     _LW_motor_LAT

 _TMR6_ISR (ROOT)
   _RW_motor
     _RW_motor_LAT

 _TMR5_ISR (ROOT)
   _G_motor
     _G_motor_LAT

 _TMR3_ISR (ROOT)
   _E_motor
     _E_motor_LAT

 _Default_ISR (ROOT)

 _INT0_ISR (ROOT)
   _SPI_Read_Buf
     i2_SPI_RW
   i2_SPI_Write_Reg
     i2_SPI_RW

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM            1FFF      0       0      69        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK31          100      0       0      67        0.0%
BANK31             100      0       0      68        0.0%
BITBANK30          100      0       0      65        0.0%
BANK30             100      0       0      66        0.0%
BITBANK29          100      0       0      63        0.0%
BANK29             100      0       0      64        0.0%
BITBANK28          100      0       0      61        0.0%
BANK28             100      0       0      62        0.0%
BITBANK27          100      0       0      59        0.0%
BANK27             100      0       0      60        0.0%
BITBANK26          100      0       0      56        0.0%
BANK26             100      0       0      57        0.0%
BITBANK25          100      0       0      54        0.0%
BANK25             100      0       0      55        0.0%
BITBANK24          100      0       0      52        0.0%
BANK24             100      0       0      53        0.0%
BITBANK23          100      0       0      50        0.0%
BANK23             100      0       0      51        0.0%
BITBANK22          100      0       0      48        0.0%
BANK22             100      0       0      49        0.0%
BITBANK21          100      0       0      46        0.0%
BANK21             100      0       0      47        0.0%
BITBANK20          100      0       0      44        0.0%
BANK20             100      0       0      45        0.0%
BITBANK19          100      0       0      42        0.0%
BANK19             100      0       0      43        0.0%
BITBANK18          100      0       0      40        0.0%
BANK18             100      0       0      41        0.0%
BITBANK17          100      0       0      38        0.0%
BANK17             100      0       0      39        0.0%
BITBANK16          100      0       0      36        0.0%
BANK16             100      0       0      37        0.0%
BITBANK15          100      0       0      34        0.0%
BANK15             100      0       0      35        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     10      6E       7       43.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0     59      9F       5       99.4%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     46      52       1       86.3%
BITSFR_8             0      0       0     200        0.0%
SFR_8                0      0       0     200        0.0%
BITSFR_7             0      0       0     200        0.0%
SFR_7                0      0       0     200        0.0%
BITSFR_6             0      0       0     200        0.0%
SFR_6                0      0       0     200        0.0%
BITSFR_5             0      0       0     200        0.0%
SFR_5                0      0       0     200        0.0%
BITSFR_4             0      0       0     200        0.0%
SFR_4                0      0       0     200        0.0%
BITSFR_3             0      0       0     200        0.0%
SFR_3                0      0       0     200        0.0%
BITSFR_2             0      0       0     200        0.0%
SFR_2                0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     15F      58        0.0%
DATA                 0      0     15F       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Wed Jun 12 10:43:40 2019

                        ___fldiv@aexp 0034                          ___fldiv@bexp 0033  
                        ___fldiv@sign 0028                           __CFG_CP$OFF 000000  
                      ??_RW_motor_LAT 000B                                    _R0 00CD  
                                  _Z0 00C9                                    _RR 014C  
           __size_of_RFM70_Initialize 041C               __size_of_SwitchToRxMode 0042  
                                 l706 6B16                                   l723 65EE  
                                 l724 65D6                                   l750 35F6  
                                 l752 3646                                   l761 37A0  
                                 l673 651A                                   l754 36A2  
                                 l746 3550                                   l674 6530  
                                 l763 37AC                                   l755 36AE  
                                 l748 35A6                                   l765 3846  
                                 l757 370A                                   l767 3896  
                                 l759 3716                                   _GIE 01FE97  
                                 _RB2 01FE5A                                   _RB3 01FE5B  
                                 _X_c 00D9                                   _Y_c 00D5  
                                 _Z_c 0154                                   _cos 5D20  
                                 _sin 3942               __size_of_PMD_Initialize 0024  
                     _TMR2_Initialize 6914                                   prod 003FF3  
                                 wreg 003FE8                          ___flmul@aexp 0071  
                        ___flmul@bexp 0076                          ___flmul@sign 0070  
                        ___flmul@temp 007B                   __end_of_G_motor_LAT 685C  
                        ___flmul@prod 0077                         __CFG_BBEN$OFF 000000  
                     ??_values_update 000E     __end_of_elbow_shoulder_motors_off 6B0E  
                        __CFG_LVP$OFF 000000                          __CFG_ZCD$OFF 000000  
                        ___fltol@exp1 0046                                  l1010 2216  
                                l1100 2F08                                  l1020 2454  
                                l1013 2232                                  l1102 2F18  
                                l1031 262A                                  l1023 2500  
                                l1016 2D5E                                  l1041 2758  
                                l1033 268E                                  l1025 2560  
                                l1017 224E                                  l1009 2224  
                                l1050 28C8                                  l1018 22FE  
                                l1043 27B0                                  l1035 2696  
                                l1027 25C2                                  l1019 23AA  
                                l1060 2B66                                  l1052 296C  
                                l1045 2814                                  l1037 26EE  
                                l1029 25CC                                  l1062 2C0C  
                                l1054 29C8                                  l1055 2A16  
                                l1047 281E                                  l1039 2750  
                                l1072 2DCA                                  l1064 2C68  
                                l1081 2E24                                  l1065 2CB6  
                                l1057 2ABC                                  l1049 287A  
                                l1330 5AA2                                  l1250 47F0  
                                l1090 2E72                                  l1074 2DD6  
                                l1331 59D6                                  l1091 2E94  
                                l1067 2DE6                                  l1059 2B18  
                                l1340 5AFA                                  l1252 4874  
                                l1092 2EB0                                  l1076 2E5C  
                                l1068 2D9E                                  l1341 5B2E  
                                l1253 4A34                                  l1093 2ED0  
                                l1085 2E3C                                  l1077 2DFE  
                                l1069 2DBA                                  l1342 5B74  
                                l1326 5DCA                                  l1078 2E10  
                                l1343 5BBA                                  l1255 4A54  
                                l1087 2E56                                  l1336 63B8  
                                l1096 2EE8                                  l1601 4262  
                                l1089 2F2E                                  l1602 4240  
                                l1370 5F6A                                  l1098 2EF8  
                                l1611 42AA                                  l1603 424E  
                                l1347 6618                                  l1620 4384  
                                l1612 42AE                                  l1604 4252  
                                l1700 4070                                  l1372 5FDE  
                                l1701 408E                                  l1381 601E  
                                l1373 5FCE                                  l1622 439A  
                                l1615 4350                                  l1607 42C0  
                                l1703 40B2                                  l1711 44B4  
                                l1632 441C                                  l1624 43A4  
                                l1608 4286                                  l1704 40D2  
                                l1720 45B8                                  l1617 4360  
                                l1721 45FE                                  l1713 44C4  
                                l1650 4AFA                                  l1722 462E  
                                l1714 44DE                                  l1378 6002  
                                l1730 6074                                  l1651 4AF6  
                                l1379 5FF6                                  l1660 4C2C  
                                l1636 4442                                  l1724 4758  
                                l1716 4520                                  l1740 572A  
                                l1732 609A                                  l1653 4B48  
                                l1637 444A                                  l1629 43C6  
                                l1717 4554                                  l1581 3986  
                                l5110 36A6                                  l1670 4C9A  
                                l1646 4ABA                                  l1638 444C  
                                l1590 411E                                  l1718 45B2  
                                l1750 57C4                                  l1742 5774  
                                l1582 3AFE                                  l1663 4C62  
                                l1655 4B78                                  l1647 4AB6  
                                l1719 4674                                  l1751 57FA  
                                l1743 575C                                  l1735 56EE  
                                l1583 3B8E                                  l1672 4CEE  
                                l1664 4C44                                  l1656 4C2E  
                                l1680 3D70                                  l1736 5706  
                                l1584 3D24                                  l1673 4D12  
                                l1657 4BDE                                  l1681 3D6C  
                                l1745 57A6                                  l1737 5724  
                                l1761 588C                                  l5130 370E  
                                l5050 3548                                  l1674 4D3C  
                                l1658 4C06                                  l1594 416A  
                                l1682 3D80                                  l1746 579A  
                                l1762 595C                                  l1675 4D4A  
                                l1595 4166                                  l1691 3FE4  
                                l1739 5736                                  l5124 3702  
                                l1676 4D4C                                  l1692 3FC6  
                                l1684 3DB0                                  l1597 41E4  
                                l1589 4122                                  l1685 3DAC  
                                ?_cos 00A8                                  l5062 359E  
                                l1598 418A                                  l1686 3DC0  
                                l1758 5866                                  l1687 3DDE  
                                l1767 61CE                                  l1759 5854  
                                l5154 37A4                                  l5090 363E  
                                l1698 401C                                  l5172 383E  
                                l5148 3798                                  l5076 35EE  
                                l7016 2626                                  l5186 388E  
                                l6472 4D3C                                  l5892 5BF2  
                                ?_sin 0097                                  _GIEH 01FE97  
                                _GIEL 01FE96                                  _LATA 003FBA  
                                _LATB 003FBB                                  _LATC 003FBC  
                                u4000 645E                                  _LATD 003FBD  
                                _LATE 003FBE                                  u4015 6462  
                                u4040 664E                                  _T2PR 003FAB  
                                u4060 665A                                  _T4PR 003F9F  
                                u6030 3DCC                                  u4600 3678  
                                u6120 407E                                  u6040 3F80  
                                u6130 409C                                  u6210 5F90  
                                _T6PR 003F93                                  u4540 359A  
                                _PMD0 0039C0                                  u6045 3F76  
                                _PMD1 0039C1                                  u4710 3816  
                                u4630 36F8                                  _PMD2 0039C2  
                                u6215 5F86                                  _PMD3 0039C3  
                                u4720 3822                                  u4560 35D8  
                                _PMD4 0039C4                                  _PMD5 0039C5  
                                u4730 383A                                  u6090 4018  
                                u6250 6008                                  _PMD6 0039C6  
                                u4715 380C                                  _PMD7 0039C7  
                                u4660 3770                                  u4580 3628  
                                u4750 3878                                  u4670 377C  
                                u5710 426A                                  u6350 57B0  
                                u4680 3794                                  u6600 4D20  
                                u6280 61FE                                  u4665 3766  
                                u4770 38E6                                  u4780 38F2  
                                u5660 4214                                  u6700 3AFA  
                                u5670 4224                                  u6710 3AFC  
                                u4775 38DC                                  u6560 4C96  
                                u5920 4428                                  u5840 43A8  
                                u5680 4226                                  u6288 6200  
                                u6660 5872                                  u6590 4CFC  
                                u5870 43C2                                  u6760 6080  
                                u6780 4824                                  u6790 4826  
                                u7737 20F4                                  u7747 3530  
                                u6980 223C                                  u7757 392C  
                                _WPUA 003A41                                  _WPUB 003A51  
                                _WPUC 003A61                                  _WPUD 003A71  
                                _WPUE 003A81                            _RWM_phases 0120  
                       __CFG_FCMEN$ON 000000                                  _Roll 0150  
                                _alfa 00F5                                  _fabs 637E  
                                _beta 00C5                                  _atan 479C  
                                _main 20CA                                  _grip 0050  
                                cos@f 00A8                                  _roll 013C  
                                fsr2h 003FDA                                  indf2 003FDF  
                                fsr1l 003FE1                                  fsr2l 003FD9  
                                _sqrt 4470                                  sin@f 0097  
                                sin@y 009B                       SPI_Read_Buf@reg 0006  
                                prodh 003FF4                                  prodl 003FF3  
                                start 00AE                       __end_of_B_motor 6700  
                     ___fldiv@new_exp 002D                       __end_of_E_motor 64C4  
                     _TMR3_Initialize 68F0                       __end_of_G_motor 631E  
                       __CFG_CSWEN$ON 000000                         _SPI_Write_Buf 65C2  
                     SPI_Read_Reg@reg 0010                         _SPI_Write_Reg 6A22  
                         _B_motor_LAT 67BC                          ___param_bank 000000  
                               ??_cos 0047                      ?_base_motors_off 0001  
                               ??_sin 0047                       __end_of_S_motor 6424  
                    __end_of_INT0_ISR 669C        __size_of_OSCILLATOR_Initialize 0018  
       __end_of_OSCILLATOR_Initialize 6A86                                 ?_fabs 0020  
                       ___fltol@sign1 0045                                 ?_atan 009A  
                     __end_of___fladd 4470                                 ?_main 0001  
                     __end_of___fldiv 4D70                       __end_of___flneg 6632  
                       __CFG_WDTE$OFF 000000                       __end_of___flmul 40F0  
                     __end_of___flsub 637E                       __end_of___fltol 6038  
                               ?_sqrt 007D                                 _T1CLK 003FB5  
                               _T1CON 003FB2                                 _T3CLK 003FA9  
                               _T2CON 003FAC                                 _LATA0 01FDD0  
                               _LATA1 01FDD1                                 _LATA2 01FDD2  
                               _LATA3 01FDD3                                 _LATC0 01FDE0  
                               _LATA4 01FDD4                                 _LATC1 01FDE1  
                               _LATA5 01FDD5                                 _LATD0 01FDE8  
                               _LATC2 01FDE2                                 _LATA6 01FDD6  
                               _T3CON 003FA6                                 _LATD1 01FDE9  
                               _LATC3 01FDE3                                 _LATA7 01FDD7  
                               _LATC4 01FDE4                                 _LATD2 01FDEA  
                               _LATC5 01FDE5                                 _LATD3 01FDEB  
                               _LATC6 01FDE6                                 _LATD4 01FDEC  
                               _LATC7 01FDE7                                 _LATD5 01FDED  
                               _LATD6 01FDEE                                 _LATD7 01FDEF  
                               _T5CLK 003F9D                                 _T4CON 003FA0  
                               _T2HLT 003FAD                                 _T5CON 003F9A  
                               _T6CON 003F94                                 _T4HLT 003FA1  
                      __CFG_DEBUG$OFF 000000                                 _T6HLT 003F95  
                               _T2TMR 003FAA                                 _T2RST 003FAF  
            __size_ofi2_SPI_Write_Reg 001A                                 _T4TMR 003F9E  
                               i1l630 6746                                 i1l631 6748  
                               i1l623 6714                                 i1l632 6756  
                               i1l624 6716                                 i1l640 66FA  
                               i1l633 675E                                 i1l625 6724  
                               i1l626 672C                                 _T4RST 003FA3  
                               i1l644 641E                                 i1l653 64BE  
                               i1l637 66E2                                 i1l645 63F8  
                               i1l654 649A                                 i1l662 630E  
                               i1l638 66E4                                 i1l646 6402  
                               i1l655 64A2                                 i1l663 62E6  
                               i1l639 66F2                                 i1l647 6410  
                               i1l656 64B0                                 i1l664 62E2  
                               i1l648 6418                                 i1l657 64B8  
                               i1l666 62F0                                 i1l667 6300  
                               i1l668 6308                                 _T6TMR 003F92  
                               i2l706 6B2A                                 _T6RST 003F97  
                               i2l717 65B4                                 i2l718 659A  
                               _OSCEN 0039DD                                 _TMR1H 003FB1  
                               _TMR1L 003FB0                                 _TMR3H 003FA5  
                               _TMR5H 003F99                                 _TMR3L 003FA4  
                               _TMR5L 003F98                                 _TRISA 003FC2  
                               _TRISB 003FC3                                 _TRISC 003FC4  
                               _TRISD 003FC5                                 _TRISE 003FC6  
                         _Default_ISR 6B58                    __end_ofsin@coeff_a 20A4  
                  __end_ofsin@coeff_b 20C8                       _TMR4_Initialize 68CC  
                    __end_ofi2_SPI_RW 6B36                                 _Pitch 00D1  
             ?_rad_calculation_manual 0001                      __end_of_TMR1_ISR 69C4  
                    __end_of_TMR2_ISR 6AB6                         __CFG_WRTB$OFF 000000  
                    __end_of_TMR3_ISR 6A04                         __CFG_WRTC$OFF 000000  
                    __end_of_TMR4_ISR 6ACE                         __CFG_WRTD$OFF 000000  
                    __end_of_TMR5_ISR 69E4                      __end_of_TMR6_ISR 6AE6  
                               fabs@d 0020                                 _floor 5814  
                               _frexp 61AC                                 _errno 0158  
                  __CFG_MCLRE$INTMCLR 000000                                 atan@f 009A  
                               atan@x 00A2                                 atan@y 009E  
                               _pitch 0140                                 _round 5E44  
                               _trunc 6038               __end_of_TMR1_Initialize 695C  
                    SPI_Read_Buf@pBuf 0002                                 sin@x2 00A3  
                     _SEG_start_check 6506                                 tablat 003FF5  
                         _E_motor_LAT 685C                                 sqrt@a 007D  
                               sqrt@i 0086                                 sqrt@p 008B  
                               status 003FD8                      __end_of_LW_motor 6732  
            __size_of_SPI1_Initialize 0018                        ?_SPI_Write_Buf 000F  
                      ?_SPI_Write_Reg 000F                       _TMR5_Initialize 68A8  
                     __initialization 623A                      __end_of_RW_motor 6764  
                        __end_of_fabs 63D2                          __end_of_atan 4A8A  
                        __end_of_main 2F54                          __end_of_sqrt 479C  
                      __CFG_SAFEN$OFF 000000               __end_of_TMR2_Initialize 6938  
                       i2SPI_RW@value 0001                                ??_fabs 0024  
                              ??_atan 0045                           _G_motor_LAT 6834  
                              ??_main 00B3                         ??_S_motor_LAT 0008  
                      __CFG_PR1WAY$ON 000000                                ??_sqrt 0081  
                       __activetblptr 000003        __end_of_rad_calculation_manual 501A  
                      __CFG_MVECEN$ON 000000                 __size_of_LW_motor_LAT 0028  
                     _TMR6_Initialize 6884                        _next_elbow_rad 0130  
                              ?_floor 0085                                ?_frexp 000E  
             ?_next_steps_calculation 0001                                _ANSELA 003A40  
                              _ANSELB 003A50                                _ANSELC 003A60  
                              _ANSELD 003A70                                _ANSELE 003A80  
                              ?_round 008F                                _RB1I2C 003A5A  
                              _T1GATE 003FB4                                _RB2I2C 003A5B  
                              _T1GCON 003FB3                                ?_trunc 0085  
      __size_of_pitch_roll_motors_off 0014                                _RD0I2C 003A7A  
                              _RC3I2C 003A6A                                _RD1I2C 003A7B  
                              _T3GATE 003FA8                                _RC4I2C 003A6B  
                              _T3GCON 003FA7                                _T5GATE 003F9C  
                              _T5GCON 003F9B                    __CFG_PWRTS$PWRT_64 000000  
                              _RB1PPS 003A09         __end_of_pitch_roll_motors_off 6AFA  
                              _RB4PPS 003A0C                             ??_B_motor 0009  
                              _ODCONA 003A42                                _ODCONB 003A52  
                              _ODCONC 003A62                                _ODCOND 003A72  
                              _ODCONE 003A82               __end_of_TMR3_Initialize 6914  
                      __CFG_WDTCCS$SC 000000                  __end_of_RW_motor_LAT 6834  
                              _INLVLB 003A54                                _IVTADH 00389E  
                              _IVTADL 00389D                             ??_E_motor 000D  
                              _IVTADU 00389F                                _OSCFRQ 0039DF  
                           ??_G_motor 000C                                _TMR1IF 01CD20  
                              _TMR2IF 01CD22                                _TMR3IF 01CD36  
                              _TMR4IF 01CD38                                _TMR5IF 01CD46  
                              _TMR6IF 01CD48                     _steps_calculation 52C4  
                              _SPI_RW 6B0E                      __end_of___xxtofl 5814  
                        _rwrist_steps 00E9                    ?_steps_calculation 0001  
                        SwitchCFG@Tmp 0013              RFM70_Initialize@WriteArr 001A  
                   RFM70_Initialize@i 0026                     RFM70_Initialize@j 0027  
                           ??_S_motor 0008                        __CFG_XINST$OFF 000000  
                              ___flge 5AC6                             ??___fladd 003D  
                           ??___fldiv 0024                             ??___flneg 0020  
                      __CFG_STVREN$ON 000000                             ??___flmul 006C  
                           ??___flsub 0047                             ??___fltol 0081  
                    SPI_Write_Buf@reg 0013                   ??_steps_calculation 0047  
                    __end_of_rad_copy 69A2                          _LW_motor_LAT 67E4  
             __end_of_TMR4_Initialize 68F0                                clear_0 6284  
                              clear_1 6290                                clear_2 629C  
                      _SwitchToRxMode 64C4                      SPI_Write_Reg@reg 0011  
                              _rx_buf 0051                      _RFM70_Initialize 3526  
                   __end_of_Bank0_Reg 2067                                floor@i 0089  
                              floor@x 0085                 __end_of_G_start_check 6A9E  
                      _PMD_Initialize 695C                                sin@sgn 00A7  
             __end_of_SEG_start_check 6548                          __mediumconst 0000  
    _next_rad_calculation_manual$2451 00AF                                tblptrh 003FF7  
                              tblptrl 003FF6                                tblptru 003FF8  
      __end_of_next_steps_calculation 56A0                                round@f 0093  
                              round@x 008F                   SwitchToRxMode@value 0012  
                 __end_of_S_motor_LAT 67BC                                trunc@i 0089  
                              trunc@x 0085                     ??i2_SPI_Write_Reg 0003  
           __end_of_steps_calculation 54B2         __size_of_INTERRUPT_Initialize 0050  
                          ___flge@ff1 000E                            ___flge@ff2 0012  
                    ?_TMR1_Initialize 0001               __end_of_TMR5_Initialize 68CC  
                        ___xxtofl@arg 0018                    __size_of_SwitchCFG 0034  
                        ___xxtofl@exp 0017                     _SYSTEM_Initialize 669C  
                        ___xxtofl@val 000E                            __accesstop 0060  
             __end_of__initialization 62AE                             ?_INT0_ISR 0001  
                          ___flneg@f1 001C                       ??_SPI_Write_Buf 0012  
                     ??_SPI_Write_Reg 0010                    ?_SYSTEM_Initialize 0001  
                        eval_poly@res 0089                         ___rparam_used 000001  
                          ___fltol@f1 007D                    _lwrist_steps_count 00EB  
                  _rwrist_steps_count 015C                     SPI_Read_Reg@value 0011  
                      __pcstackCOMRAM 0001                             ?i2_SPI_RW 0001  
                        __pidataBANK0 6B50                          __pidataBANK1 6764  
                 ??_SYSTEM_Initialize 000F                  i2SPI_Write_Reg@value 0002  
                           ?_TMR1_ISR 0001                             ?_TMR2_ISR 0001  
                      main@base_state 00B5                             ?_TMR3_ISR 0001  
                           ?_TMR4_ISR 0001                             ?_TMR5_ISR 0001  
                           ?_TMR6_ISR 0001                        ivt0x8_undefint 00AC  
                       __end_of_floor 5976                         __end_of_frexp 623A  
              __end_of_SwitchToRxMode 6506                     ??_SPI1_Initialize 000E  
                       __end_of_round 5F4A                         __end_of_trunc 6106  
                    ?_TMR2_Initialize 0001               __end_of_TMR6_Initialize 68A8  
              __end_of_PMD_Initialize 6980          __end_of_real_rad_calculation 5D20  
        __end_of_rad_calculation_auto 3526           __size_of_EXT_INT_Initialize 000E  
                           ?_LW_motor 0001                  main@pitch_roll_state 00B7  
                             ??_floor 0047                               ??_frexp 0014  
           __end_of_SYSTEM_Initialize 66CE                            _base_steps 00E7  
                     __CFG_IVT1WAY$ON 000000             _rad_calculation_auto$2446 016A  
           _rad_calculation_auto$2447 015E             _rad_calculation_auto$2448 0162  
           _rad_calculation_auto$2449 0166                             ?_RW_motor 0001  
                             ??_round 0047                               ??_trunc 0047  
                          __pbssBANK0 00B9                            __pbssBANK1 0130  
                  __size_of_eval_poly 0150                      ?_TMR3_Initialize 0001  
                          ??_INT0_ISR 0008                               ?_SPI_RW 0001  
                             IVTBASEH 003FD6                               IVTBASEL 003FD5  
                             IVTBASEU 003FD7                          ?_B_motor_LAT 0001  
                             ?___flge 000E                            ??i2_SPI_RW 0001  
                          ??_TMR1_ISR 0008                       __CFG_PPS1WAY$ON 000000  
                          ??_TMR2_ISR 0009                            ??_TMR3_ISR 000D  
                          ??_TMR4_ISR 000A                            ??_TMR5_ISR 000C  
                          ??_TMR6_ISR 000B                       ?_SwitchToRxMode 0001  
                    ?_TMR4_Initialize 0001                     __end_of_SwitchCFG 6666  
                     ?_PMD_Initialize 0001                           _S_motor_LAT 6794  
                             _INT0PPS 003AC0                          ?_Default_ISR 0001  
                           ?___xxtofl 000E                            ??_LW_motor 000A  
                             _OSCCON1 0039D9                               _OSCCON3 0039DB  
                    ?_SEG_start_check 0001                               _IVTLOCK 003FD4  
               __size_of_RW_motor_LAT 0028                               _SPI1CLK 003D1C  
                             _SPI1RXB 003D10                               _SPI1TXB 003D11  
                             _OSCTUNE 0039DE                               _SLRCONA 003A43  
                             _SLRCONB 003A53                               _SLRCONC 003A63  
                             _SLRCOND 003A73                               _SLRCONE 003A83  
                _shoulder_steps_count 004B            ?_elbow_shoulder_motors_off 0001  
                          ??_RW_motor 000B                 __end_of_values_update 6586  
          __size_of_steps_calculation 01EE                               _B_phase 00F2  
                      main@grip_state 00B6                               _B_motor 66CE  
                             _E_phase 00F0                      ?_TMR5_Initialize 0001  
                             _E_motor 6474                               _G_phase 00EF  
                        ?_E_motor_LAT 0001                               _G_motor 62B4  
                           ?_rad_copy 0001                         _real_base_rad 0138  
                     __size_of_SPI_RW 0014                         SwitchCFG@_cfg 0012  
           INTERRUPT_Initialize@state 000E                       _next_grip_steps 00DF  
                             _S_phase 00F1                               __Hparam 0000  
                             _S_motor 63D2                               __Lparam 0000  
          __CFG_RSTOSC$HFINTOSC_64MHZ 000000          ?_next_rad_calculation_manual 0001  
                     __size_of___flge 0130                               ___fladd 40F0  
                             ___fldiv 4A8A                               ___flneg 65FC  
                             ___flmul 3D3E                               ___flsub 631E  
                             ___fltol 5F4A                          __psmallconst 2000  
                          _grip_steps 00DD                               __pcinit 623A  
                        _RW_motor_LAT 680C                     __end_of_eval_poly 5AC6  
                    ?_TMR6_Initialize 0001                               __ramtop 2000  
                   SPI_Write_Buf@pBuf 000F                          ?_G_motor_LAT 0001  
                             __ptext0 20CA                               __ptext1 6548  
                             __ptext2 52C4                               __ptext3 5BF6  
                             __ptext4 6980                               __ptext5 4D70  
                             __ptext6 2F54                               __ptext7 5D20  
                             __ptext8 3942                               __ptext9 5814  
                     __CFG_WRTAPP$OFF 000000                             _T1CONbits 003FB2  
               _OSCILLATOR_Initialize 6A6E                             _T2CONbits 003FAC  
                        __size_of_cos 0124                       atan@val_squared 00A7  
                        __size_of_sin 03FC                            ??___xxtofl 0012  
                           _T3CONbits 003FA6                      _grip_steps_count 0047  
                   _elbow_steps_count 0049              __size_of_base_motors_off 000C  
                           _T4CONbits 003FA0              ??_PIN_MANAGER_Initialize 000E  
                             atan@val 00AB                       __CFG_WRTSAF$OFF 000000  
                           _T5CONbits 003F9A                             _T6CONbits 003F94  
          __size_of_SYSTEM_Initialize 0032                  end_of_initialization 62AE  
                          ??_rad_copy 000E              __end_of_RFM70_Initialize 3942  
                _real_rad_calculation 5BF6                    SPI_Read_Buf@length 0004  
                           _BM_phases 0118                  _rad_calculation_auto 2F54  
                  SPI_Read_Buf@status 0005                               postdec1 003FE5  
                             postdec2 003FDD                               postinc0 003FEE  
                             postinc2 003FDE                             _EM_phases 0108  
                             sqrt@grs 008C                               sqrt@exp 0090  
       ??_next_rad_calculation_manual 0045                 __CFG_WDTCPS$WDTCPS_31 000000  
                           _GM_phases 0100                       i2_SPI_Write_Reg 6A3C  
                           _PORTEbits 003FCE                           ___fladd@grs 0063  
                       ___xxtofl@sign 0016                             _Bank0_Reg 2039  
                         ___fldiv@grs 002F                           ___fldiv@rem 0029  
               __end_of_Bank1_Reg0_13 2039                      __CFG_FEXTOSC$OFF 000000  
                         ___flmul@grs 0072                 _pitch_roll_motors_off 6AE6  
                     _SPI1_Initialize 6A56                 ?_real_rad_calculation 0001  
               ?_rad_calculation_auto 0001           _rad_calculation_manual$2450 00AF  
                      __end_of_SPI_RW 6B22                     __size_of_INT0_ISR 0034  
                       ?_SPI_Read_Buf 0002                         ?_SPI_Read_Reg 0001  
                           _SM_phases 0110                    SPI_Read_Reg@status 000F  
        __end_of_INTERRUPT_Initialize 6474                           SPI_RW@value 000E  
                      __end_of___flge 5BF6                  __size_of_B_motor_LAT 0028  
                   __size_ofi2_SPI_RW 0014                     __size_of_TMR1_ISR 0020  
                   __size_of_TMR2_ISR 0016                 i2SPI_Write_Reg@status 0004  
                   __size_of_TMR3_ISR 0020                     __size_of_TMR4_ISR 0016  
                   __size_of_TMR5_ISR 0020                     __size_of_TMR6_ISR 0016  
              ?_OSCILLATOR_Initialize 0001                            floor@expon 008D  
                 start_initialization 623A                            eval_poly@d 0081  
                          eval_poly@n 0083                            eval_poly@x 007D  
     __size_of_PIN_MANAGER_Initialize 00A6                    i2SPI_Write_Reg@reg 0003  
                         __end_of_cos 5E44                  __size_of_Default_ISR 0002  
                         __end_of_sin 3D3E  __size_of_next_rad_calculation_manual 02AA  
                   __size_of_LW_motor 0032                            ivt0x8_base 0008  
                   ??_base_motors_off 000E                   _next_shoulder_steps 00E3  
                          frexp@value 000E                     __size_of_RW_motor 0032  
                            ??_SPI_RW 000E              main@elbow_shoulder_state 00B8  
                      ??_SPI_Read_Buf 0005                        ??_SPI_Read_Reg 000F  
                __size_of_E_motor_LAT 0028                 __end_of_SPI_Write_Buf 65FC  
               __end_of_SPI_Write_Reg 6A3C                      ??_SwitchToRxMode 0012  
              __size_of_G_start_check 0018                      __CFG_LPBOREN$OFF 000000  
            __size_of_TMR1_Initialize 0024               __end_ofi2_SPI_Write_Reg 6A56  
                            ??___flge 0016                      ??_PMD_Initialize 000E  
            ??_rad_calculation_manual 0045                           __pdataBANK0 00F9  
                         __pdataBANK1 0100            __end_of_EXT_INT_Initialize 6B44  
                        ?_S_motor_LAT 0001                             ___fladd@a 0039  
                           ___fladd@b 0035                             ___fldiv@a 0020  
                           ___fldiv@b 001C                  __size_of_G_motor_LAT 0028  
                           ___flmul@a 0068                             ___flmul@b 0064  
                         __pbssCOMRAM 0047                             _SwitchCFG 6632  
                           ___flsub@a 0093                             ___flsub@b 008F  
                       __pcstackBANK0 0060                         __pcstackBANK1 015E  
            __size_of_TMR2_Initialize 0024                     __size_of___xxtofl 0174  
             __end_of_SPI1_Initialize 6A6E           ??_elbow_shoulder_motors_off 000E  
                            ?_B_motor 0001                ?_pitch_roll_motors_off 0001  
              ??_real_rad_calculation 0045                              ?_E_motor 0001  
                            ?_G_motor 0001                ??_rad_calculation_auto 0047  
                          sin@coeff_a 2090                            sin@coeff_b 20B8  
                   __size_of_rad_copy 0022                              ?_S_motor 0001  
              _PIN_MANAGER_Initialize 6106              __size_of_TMR3_Initialize 0024  
                            ?___fladd 0035                              ?___fldiv 001C  
                            ?___flneg 001C                              ?___flmul 0064  
                            ?___flsub 008F                              ?___fltol 007D  
                 SPI_Write_Buf@length 0011                             _elbow_rad 0144  
                 SPI_Write_Buf@status 0012              ??_next_steps_calculation 0047  
                    _next_elbow_steps 00E1                __CFG_BBSIZE$BBSIZE_512 000000  
                         __smallconst 2000                         _G_start_check 6A86  
                           _eval_poly 5976                            ?_SwitchCFG 0001  
               SPI_Write_Buf@byte_ctr 0014              __size_of_TMR4_Initialize 0024  
                      __size_of_floor 0162                        __size_of_frexp 008E  
                            _T2CLKCON 003FAE                              _T4CLKCON 003FA2  
                      __size_of_round 0106                        __size_of_trunc 00CE  
                _INTERRUPT_Initialize 6424                              _T6CLKCON 003F96  
            __size_of_SEG_start_check 0042                              _INT0_ISR 6668  
                   ?_RFM70_Initialize 0001                             atan@recip 00A6  
                            _IPR1bits 003981                      _base_steps_count 015A  
                            _PIE1bits 003991                           _elbow_steps 00E5  
                            _IPR4bits 003984                              _IPR6bits 003986  
                            _PIE4bits 003994                              _IPR7bits 003987  
                            _IPR8bits 003988                              _PIE6bits 003996  
                            _IPR9bits 003989                              _PIE7bits 003997  
                            _PIE8bits 003998                   __CFG_BORV$VBOR_2P85 000000  
                            _PIE9bits 003999                              _LAT_copy 004F  
                            i1u430_20 66DE                              i1u440_20 62D2  
                            i1u433_20 6710                              i1u426_20 63E0  
                            i1u427_20 63EE                              i1u444_20 6484  
                            i1u436_20 6742                              i1u445_20 6492  
                            i1u439_20 62C4                    ??_RFM70_Initialize 0015  
                            _PIR1bits 0039A1                              _PIR2bits 0039A2  
                            _SPI1BAUD 003D19                              _PIR4bits 0039A4  
                            _SPI1CON0 003D14                              _SPI1CON1 003D15  
                            _SPI1CON2 003D16                              _PIR6bits 0039A6  
                            _PIR7bits 0039A7                              _PIR8bits 0039A8  
                            _PIR9bits 0039A9                           _copia_buf_0 00FB  
                         _copia_buf_1 00F9              __size_of_TMR5_Initialize 0024  
                    ?i2_SPI_Write_Reg 0002                              i2_SPI_RW 6B22  
                            _TMR1_ISR 69A4             _elbow_shoulder_motors_off 6AFA  
                            _TMR2_ISR 6AA0                              _TMR3_ISR 69E4  
                            _TMR4_ISR 6AB8                              _TMR5_ISR 69C4  
                            _TMR6_ISR 6AD0                         ?_LW_motor_LAT 0001  
     __size_of_rad_calculation_manual 02AA                __size_of_values_update 003E  
                   ??_TMR1_Initialize 000E                   SPI_Write_Reg@status 0010  
                      ?_G_start_check 0001                              _RX_PORTA 00FE  
                            _RX_PORTB 00FD                            ?_eval_poly 007D  
                            _LW_phase 00F4                  __end_of_SPI_Read_Buf 65C2  
                            _LW_motor 6700                  __end_of_SPI_Read_Reg 6A22  
                 __end_ofatan@coeff_a 2090                   __end_ofatan@coeff_b 20B8  
            __size_of_TMR6_Initialize 0024                      ?_SPI1_Initialize 0001  
                         _INTCON0bits 003FD2                              _RW_phase 00F3  
                           copy_data0 624E                             copy_data1 6270  
               ?_INTERRUPT_Initialize 0001                              _RW_motor 6732  
                    __size_of_B_motor 0032                     ??_TMR2_Initialize 000E  
                    __size_of_E_motor 0050                      __size_of_G_motor 006A  
                           frexp@eptr 0012                              __Hrparam 0000  
                      _real_elbow_rad 00B9                              __Lrparam 0000  
                  __CFG_BOREN$SBORDIS 000000                      __size_of_S_motor 0052  
                      ??_LW_motor_LAT 000A               ??_OSCILLATOR_Initialize 000E  
                    __size_of___fladd 0380                      __size_of___fldiv 02E6  
                    __size_of___flneg 0036                      __size_of___flmul 03B2  
                    __size_of___flsub 0060                      __size_of___fltol 00EE  
                 __end_of_RX0_Address 2078                              _cos$2456 00AC  
                 __end_of_RX1_Address 2075                     ??_TMR3_Initialize 000E  
     __size_of_next_steps_calculation 01EE                       _base_motors_off 6B44  
                            _base_rad 0148                              ___xxtofl 56A0  
                         ??_SwitchCFG 0012                  __size_of_S_motor_LAT 0028  
                            __pivt0x8 0008                  SPI_Read_Buf@byte_ctr 0007  
                            __ptext10 631E                              __ptext11 6AE6  
                            __ptext20 479C                              __ptext12 54B2  
                            __ptext21 637E                              __ptext13 5E44  
                            __ptext30 64C4                              __ptext22 65FC  
                            __ptext14 6038                              __ptext31 669C  
                            __ptext23 5976                              __ptext15 61AC  
                            __ptext40 6106                              __ptext32 6884  
                            __ptext24 3D3E                              __ptext16 56A0  
                            __ptext41 6A6E                              __ptext33 68A8  
                            __ptext25 40F0                              __ptext17 5F4A  
                            __ptext50 6B0E                              __ptext42 6424  
                            __ptext34 68CC                              __ptext26 5AC6  
                            __ptext18 501A                              __ptext51 6A86  
                            __ptext43 6B36                              __ptext35 68F0  
                            __ptext27 4A8A                              __ptext19 4470  
                            __ptext60 67E4                              __ptext52 69A4  
                            __ptext44 6506                              __ptext36 6914  
                            __ptext28 6AFA                              __ptext61 6AD0  
                            __ptext53 63D2                              __ptext45 3526  
                            __ptext37 6938                              __ptext29 6B44  
                            __ptext70 6B58                              __ptext62 6732  
                            __ptext54 6794                              __ptext46 6632  
                            __ptext38 6A56                              __ptext71 6668  
                            __ptext63 680C                              __ptext55 6AA0  
                            __ptext47 6A22                              __ptext39 695C  
                            __ptext72 6A3C                              __ptext64 69C4  
                            __ptext56 66CE                              __ptext48 6A04  
                            __ptext73 6586                              __ptext65 62B4  
                            __ptext57 67BC                              __ptext49 65C2  
                            __ptext74 6B22                              __ptext66 6834  
                            __ptext58 6AB8                              __ptext67 69E4  
                            __ptext59 6700                              __ptext68 6474  
                            __ptext69 685C                              _sin$2457 009F  
              _rad_calculation_manual 4D70                         _values_update 6548  
                            _rad_copy 6980                            trunc@expon 008D  
                       __size_of_fabs 0054                     ??_TMR4_Initialize 000E  
                       __size_of_atan 02EE                         __size_of_main 0E8A  
                       __size_of_sqrt 032C                  __CFG_WDTCWS$WDTCWS_7 000000  
                         _IVTLOCKbits 003FD4                        _shoulder_steps 004D  
                       ??_B_motor_LAT 0009   __end_of_next_rad_calculation_manual 52C4  
         _next_rad_calculation_manual 501A                     ??_SEG_start_check 000E  
                  SPI_Write_Reg@value 000F                   __end_of_Bank1_Reg14 2072  
                     ??_G_start_check 000E                           atan@coeff_a 2078  
                         atan@coeff_b 20A4                     ??_TMR5_Initialize 000E  
                       ??_Default_ISR 0001                     _next_shoulder_rad 0134  
                         ??_eval_poly 0085                ??_INTERRUPT_Initialize 000E  
             ??_pitch_roll_motors_off 000E                             sqrt@tfrac 0087  
                  _EXT_INT_Initialize 6B36                        ?_values_update 0001  
                            intlevel1 0000                              intlevel2 0000  
                   _real_shoulder_rad 00BD                         ??_E_motor_LAT 000D  
              _steps_calculation$2452 0097                _steps_calculation$2453 009B  
              _next_steps_calculation 54B2               ?_PIN_MANAGER_Initialize 0001  
                   ??_TMR6_Initialize 000E                     __CFG_CLKOUTEN$OFF 000000  
                 ?_EXT_INT_Initialize 0001                           _RX0_Address 2075  
                         _RX1_Address 2072                            _SPI1SCKPPS 003ADE  
                          _SPI1SDIPPS 003ADF           _next_steps_calculation$2454 0097  
         _next_steps_calculation$2455 009B               __end_of_base_motors_off 6B50  
                       ?_RW_motor_LAT 0001                 __size_of_SPI_Read_Buf 003C  
                       ??_G_motor_LAT 000C                 __size_of_SPI_Read_Reg 001E  
                 __end_of_B_motor_LAT 67E4                              sqrt@frac 0096  
                            sqrt@sign 0085                              sqrt@root 0092  
                ??_EXT_INT_Initialize 000E    __size_of_elbow_shoulder_motors_off 0014  
                        _shoulder_rad 00C1                __size_of_SPI_Write_Buf 003A  
              __size_of_SPI_Write_Reg 001A                         ___fladd@signs 0060  
                 __end_of_Default_ISR 6B5A                  __end_of_LW_motor_LAT 680C  
                       _Bank1_Reg0_13 2001        __end_of_PIN_MANAGER_Initialize 61AC  
                        ___fladd@aexp 0061                          ___fladd@bexp 0062  
                        _lwrist_steps 00ED         __size_of_real_rad_calculation 012A  
       __size_of_rad_calculation_auto 05D2                           _Bank1_Reg14 2067  
                     _TMR1_Initialize 6938                            _LWM_phases 0128  
                        _SPI_Read_Buf 6586                          _SPI_Read_Reg 6A04  
                 __end_of_E_motor_LAT 6884  
